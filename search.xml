<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>uniapp</title>
      <link href="/2022/01/06/uniapp/"/>
      <url>/2022/01/06/uniapp/</url>
      
        <content type="html"><![CDATA[<p>小程序的生命周期说白了就是指程序从创建、到开始、暂停、唤起、停止、卸载的过程。</p><p>我们大概从三个角度看一下小程序的生命周期。</p><p>（1）：应用生命周期</p><p>（2）：页面生命周期</p><p>（3）：应用生命周期影响页面生命周期</p><p>一：应用生命周期</p><p>1：用户首次打开小程序，触发 onLaunch（全局只触发一次）。:</p><p>2：小程序初始化完成后，触发onShow方法，监听小程序显示。</p><p>3：小程序从前台进入后台，触发 onHide方法。:</p><p>4：小程序从后台进入前台显示，触发 onShow方法。</p><p>5：小程序后台运行一定时间，或系统资源占用过高，会被销毁。</p><p>前台、后台定义： 当用户点击左上角关闭，或者按了设备 Home 键离开微信，小程序并没有直接销毁，而是进入了后台；当再次进入微信或再次打开小程序，又会从后台进入前台。</p><p>最后的效果是这个样子的，微信开发者工具没有办法测试onHide方法</p><p>二：页面生命周期</p><p>1：小程序注册完成后，加载页面，触发onLoad方法。</p><p>2：页面载入后触发onShow方法，显示页面。</p><p>3：首次显示页面，会触发onReady方法，渲染页面元素和样式，一个页面只会调用一次。4：当小程序后台运行或跳转到其他页面（使用wx.navigateTo）时，触发onHide方法。</p><p>5：当小程序有后台进入到前台运行或重新进入页面时，触发onShow方法。</p><p>6：当使用重定向方法wx.redirectTo(OBJECT)或关闭当前页返回上一页wx.navigateBack()，触发onUnload</p><p>具体效果如下图所示：注意看触发onHide和触发onunLoad的时机与方式</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-vQzGquRk-1601105238628)(<a href="https://api.guanchao.site/ueditor/php/upload/image/20200730/1596103857528168.gif#pic_center)]">https://api.guanchao.site/ueditor/php/upload/image/20200730/1596103857528168.gif#pic_center)]</a></p><p>三：应用生命周期影响页面生命周期</p><p>1：小程序初始化完成后，页面首次加载触发onLoad，只会触发一次。</p><p>2：当小程序进入到后台，先执行页面onHide方法再执行应用onHide方法。</p><p>3：当小程序从后台进入到前台，先执行应用onShow方法再执行页面onShow方法。</p>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试之js基础</title>
      <link href="/2021/12/19/%E9%9D%A2%E8%AF%95%E4%B9%8Bjs%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/12/19/%E9%9D%A2%E8%AF%95%E4%B9%8Bjs%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="面试—js"><a href="#面试—js" class="headerlink" title="面试—js"></a>面试—js</h1><h2 id="1、堆栈内存及闭包作用域"><a href="#1、堆栈内存及闭包作用域" class="headerlink" title="1、堆栈内存及闭包作用域"></a>1、堆栈内存及闭包作用域</h2><h3 id="js的8种数据类型及区别"><a href="#js的8种数据类型及区别" class="headerlink" title="js的8种数据类型及区别"></a>js的8种数据类型及区别</h3><p> （函数的变量提升高于var）==对象的属性值  数字和字符串不能相等（数字会被隐式转换为字符串）==</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 值类型（基本类型）  —— 栈内存</span>字符串（String）数字（Number）布尔（Boolean）空（<span class="token keyword">null</span>）未定义（Undefined）创建唯一值（Symbol）<span class="token comment" spellcheck="true">// 引用数据类型   ——堆内存</span>对象 （Object）数组（Array）函数（Function）<span class="token comment" spellcheck="true">// 简单数据类型没有修改的说法，只能被替代（原先数据在栈中被回收）</span><span class="token comment" spellcheck="true">// 引用数据类型没有自己的值 引用数据类型的数据是公共的（堆内存中）</span><span class="token comment" spellcheck="true">// 栈中放的是值 对于引用数据类型放的 指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="和-的区别"><a href="#和-的区别" class="headerlink" title="== 和===的区别"></a>== 和===的区别</h3><p>==    与 ===是不同的,一个是判断值是否相等,一个是判断值及类型是否完全相等</p><p>== 比较时会进行强制转换 ： 转换规则如下</p><pre><code>null == undefined 相等 但与其他值都不想等对象 == 字符串 ， 对象会toString（）变为字符串NaN == NaN 不相等其他的都会转换为数字</code></pre><h3 id="变量提升机制（预编译）"><a href="#变量提升机制（预编译）" class="headerlink" title="变量提升机制（预编译）"></a>变量提升机制（预编译）</h3><p>全局预编译</p><ol><li>创建GO对象</li><li>找声明变量 将<code>函数名</code>作为<code>GO对象的属性名</code>  值为undefined</li><li>寻找函数声明 将值赋予函数体 </li></ol><p>函数预编译</p><ol><li>创建AO对象</li><li>找 <code>形参和变量声明</code> 将变量和形参名 当作 AO对象的属性 值为undefined</li><li>实参形参统一</li><li>在函数体里寻找 函数声明 将值赋予函数体</li></ol><h3 id="作用域和作用域链"><a href="#作用域和作用域链" class="headerlink" title="作用域和作用域链"></a>作用域和作用域链</h3><p>作用域： AO(函数作用域)　GO(全局作用域)</p><p>作用域链: AO, GO，　AO和GO的集合</p><p>​        作用域都有上下级关系，上下级关系确定函数在哪个作用域下创建，变量取值都会在当前作用域中查找，如果没有查到就会像上级作用域查找，直到查到全局作用域，这个查找的过程叫做作用域链</p><p>扩展：nodejs中的作用域</p><h3 id="为什么需要闭包"><a href="#为什么需要闭包" class="headerlink" title="为什么需要闭包"></a>为什么需要闭包</h3><p>​    ==闭包的两大作用 ： 保护/保存==</p><p>​        由于垃圾回收机制 ，局部变量无法共享和长久的保存，全局变量又可能造成变量污染，于是我们希望出现一种机制可以长久的保存局部变量，又不会造成变量污染，</p><p>​        闭包就能解决这样的问题(闭包出现的 原因)，能够长久的保存局部变量在内存，而不会造成全居污染（闭包，函数内返回的是一个函数，并且该函数对局部变量进行的引用，并在外部被赋为全局变量==不会被回收的原因==）</p><p>​    不必要的闭包会增加内存的消耗</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 经典的闭包</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       a<span class="token operator">++</span><span class="token punctuation">;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> f2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 11</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 12</span><span class="token comment" spellcheck="true">// 经典闭包简写</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       a<span class="token operator">++</span><span class="token punctuation">;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="防抖节流"><a href="#防抖节流" class="headerlink" title="防抖节流"></a>防抖节流</h3><p>​      防抖： 当持续触发事件，一定时间内没有再触发事件，事件才会执行一次，如果设定的时间来到之前 又一次触发事件 就重新进行延时；例：</p><ul><li>如果在200ms内没有再次触发滚动事件，那么就执行函数</li><li>如果在200ms内再次触发滚动事件，那么当前的计时取消，重新开始计时</li></ul><p><strong>效果</strong>：如果短时间内大量触发同一事件，只会执行一次函数。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 防抖类似王者荣耀回城 打断重新计时</span><span class="token keyword">function</span>                 <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'show'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> debounce <span class="token punctuation">(</span>func<span class="token punctuation">,</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      func<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> debounceShowLog <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span>showLog<span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">debounceShowLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>节流</strong>：在规定时间内函数不会触发，必须等够时间才能触发</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 类似于王者英雄技能，释放过后必须冷却结束才可以再次触发</span><span class="token keyword">function</span> canRun <span class="token punctuation">(</span>func<span class="token punctuation">,</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      func<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>      flag <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> canRunShowLog <span class="token operator">=</span> <span class="token function">canRun</span><span class="token punctuation">(</span>showLog<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">canRunShowLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="浅拷贝深拷贝"><a href="#浅拷贝深拷贝" class="headerlink" title="浅拷贝深拷贝"></a>浅拷贝深拷贝</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 浅拷贝与赋值的区别</span>赋值：当我们把一个对象赋值给一个新的变量，赋的是该对象在栈中的地址，而不是栈中的数据。两个对象指向同一个存储空间。浅拷贝： 重新堆中创建内存，拷贝前后对象的<span class="token template-string"><span class="token string">`基本数据类型`</span></span>互不影响，但对象若有深层次的（<span class="token template-string"><span class="token string">`引用数据类型`</span></span>）拷贝的仍然是地址，由于共享同一块内存会互相影响。深拷贝：在堆中重新开辟一个区域存放对象，对对象的更深层次的对象进行<span class="token template-string"><span class="token string">`递归拷贝`</span></span>，完成后两个对象互不影响。<span class="token comment" spellcheck="true">// 浅拷贝</span>在多维数据处理拷贝中，浅拷贝只为第一层开辟了新的内存空间，拷贝后的对象操作更深层次的数据时会改变原数据。因此需要进行深拷贝<span class="token function">原始数据</span><span class="token punctuation">(</span>三层数据<span class="token punctuation">)</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name： <span class="token string">"lcy"</span><span class="token punctuation">,</span>    NAN<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    dx<span class="token punctuation">:</span> <span class="token punctuation">{</span>        age<span class="token punctuation">:</span> <span class="token number">18</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 简单浅拷贝实现 </span><span class="token comment" spellcheck="true">// let obj2 = {...obj}</span><span class="token comment" spellcheck="true">// Object.assgin() </span><span class="token comment" spellcheck="true">// Array.prototype.concat() </span><span class="token comment" spellcheck="true">// Array.peototype.slice()</span><span class="token comment" spellcheck="true">// es5方法</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    obj2<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 深拷贝 </span>方法一：JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>将字符串改变为对象 JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>将对象转变为字符串<span class="token keyword">let</span> obj2 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//问题： 原始数据内若有函数，日期对象，正则表达式会出现问题，无法拷贝copyObj对象原型链上的属性和方法，当数据的层次很深，会栈溢出，函数和正则表达式会替换为空对象，日期对象会变为字符串（理想的是变为标准日期对象）</span>方法二：因此采用递归的方法更为合适<span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 过滤特殊情况</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!=</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 不直接创建对象的目的：克隆的结果和之前的保存相同的所属类</span>    <span class="token keyword">let</span> newobj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">obj<span class="token punctuation">.</span>constructor</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasOwnproperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            newobj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newobj<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、面向对象（oop）和this处理"><a href="#2、面向对象（oop）和this处理" class="headerlink" title="2、面向对象（oop）和this处理"></a>2、面向对象（oop）和this处理</h2><p>单例设计模式</p><p>类和实例</p><h3 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h3><h4 id="原型和原型链的概念"><a href="#原型和原型链的概念" class="headerlink" title="原型和原型链的概念"></a><strong>原型和原型链的概念</strong></h4><p>每个对象都会在其内部初始化一个属性，就是prototype(原型)，当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么他就会去prototype里找这个属性，这个prototype又会有自己的prototype，于是就这样一直找下去</p><h4 id="原型和原型链的关系"><a href="#原型和原型链的关系" class="headerlink" title="原型和原型链的关系"></a><strong>原型和原型链的关系</strong></h4><pre><code>instance.constructor.prototype = instance.__proto__复制代码</code></pre><h4 id="原型和原型链的特点"><a href="#原型和原型链的特点" class="headerlink" title="原型和原型链的特点"></a><strong>原型和原型链的特点</strong></h4><p>JavaScript对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变</p><p>当我们需要一个属性的时，Javascript引擎会先看当前对象中是否有这个属性， 如果没有的</p><p>就会查找他的Prototype对象是否有这个属性，如此递推下去，一直检索到 Object 内建对象</p><p>new 运算符的实现机制</p><p>call/apply/bind</p><p>constructor构造函数模式</p><h3 id="this对象"><a href="#this对象" class="headerlink" title="this对象"></a>this对象</h3><p>​    this总是指向函数的直接调用者（而非间接调用者）</p><p>​    如果有new关键字，this指向new出来的那个对象</p><p>​    在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window</p><p>js的四大数据类型的检测方案</p><p>js的四大继承方案（深浅拷贝）</p><h2 id="3、DOM-BOM及事件处理机制"><a href="#3、DOM-BOM及事件处理机制" class="headerlink" title="3、DOM/BOM及事件处理机制"></a>3、DOM/BOM及事件处理机制</h2><p>DOM事件级别</p><ul><li>DOM0   element.onclick = function() {}</li><li>DOM2  element.addEventListener(‘click’, function(){})</li><li>DOM3  element.addEventListener(‘click’, function(){}) </li><li>DOM3 相比于DOM2多了很多事件类型（如鼠标）</li></ul><p><code>addEventListener(‘onclick’,function(){}, false)</code>  第三个参数默认为false 表示冒泡执行阶段， 改为true则为捕获阶段</p><p>DOM事件模型</p><p>​            <code>捕获/冒泡</code></p><p>DOM事件流</p><p>​            <code>用户操作-&gt; （捕获）-&gt; (目标阶段) -&gt; (冒泡)</code>  三个阶段</p><p>事件传播机制（dom事件的捕获流程）</p><p>​            获取html标签的方法： document.documentElement</p><p>​            window   -&gt;  document -&gt; html -&gt; body -&gt;  …  -&gt; 目标对象</p><p>事件代理 （事件委托）</p><p>​            事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件</p><p>​            使用  将事件监听绑定到父元素上    .target() 表示被点击的子元素</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>ul<span class="token operator">></span><span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>ul<span class="token punctuation">.</span>oncllick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    e <span class="token operator">=</span> e <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// e.target 表示被点击的元素</span>    <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Event常见事件对象</p><ol><li>event.preventDefault()  阻止默认事件</li><li>event.stopPropagation()  阻止冒泡</li><li>event.stoplmmediatePropagation()  </li><li>event.currentTarget  当前被点击的元素</li><li>event.target 当前被绑定的事件</li></ol><p>自定义事件</p><ul><li>通过 let eve = new Event(‘事件名’) 自定义事件</li><li>使用 ev.addEventListener(‘事件名’，处理函数function)</li><li>.dispatchEvent(eve)触发事件</li></ul><p>DOM/BOM的核心操作</p><p>拖拽和拖拽插件</p><p>发布者订阅者模式</p><p>浏览器底层渲染机制</p><p>DOM的回流渲染机制</p>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试之css</title>
      <link href="/2021/12/19/%E9%9D%A2%E8%AF%95%E4%B9%8Bcss/"/>
      <url>/2021/12/19/%E9%9D%A2%E8%AF%95%E4%B9%8Bcss/</url>
      
        <content type="html"><![CDATA[<h1 id="面试—css3"><a href="#面试—css3" class="headerlink" title="面试—css3"></a>面试—css3</h1><h2 id="新加样式"><a href="#新加样式" class="headerlink" title="新加样式"></a>新加样式</h2><pre><code>transition：过渡transform：旋转、缩放、移动或者倾斜animation：动画gradient：渐变shadow：阴影border-radius：圆角</code></pre><h2 id="行内元素和块级元素"><a href="#行内元素和块级元素" class="headerlink" title="行内元素和块级元素"></a>行内元素和块级元素</h2><p><strong>行内元素（display: inline）</strong></p><p>​        宽度和高度是由内容决定，与其他元素共占一行的元素，我们将其叫行内元素，例如：<code>&lt;span&gt; 、 &lt;i&gt; 、 &lt;a&gt;</code>等</p><p><strong>块级元素（display: block)</strong></p><p>​        默认宽度由父容器决定，默认高度由内容决定，独占一行并且可以设置宽高的元素，我们将其叫做块级元素，例如：<code>&lt;p&gt; 、&lt;div&gt; 、&lt;ul&gt;等</code></p><h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><p>标准盒子模型，ie怪异盒子模型 </p><ul><li>是什么</li></ul><p>css中的盒子模型包括<strong>IE盒子模型</strong>和标准的<strong>W3C盒子模型</strong></p><p>CSS盒子模型组成：外边距（margin）、边框（border）、内边距（padding）、内容（content）</p><p><code>计算盒子的大小不包含外边距margin</code>（css的盒模型由content(内容)、padding(内边距)、border(边框)、margin(外边距)组成。但盒子的大小由content+padding+border这几部分决定，<strong>把margin算进去的那是盒子占据的位置，而不是盒子的大小！</strong>）</p><ul><li>区别</li></ul><p>标准盒子模型： 宽度=内容的宽度（content）+ border + padding + margin</p><p>IE盒子模型：宽度=内容宽度（content+border+padding）+ margin <code>内容区域将边框与内边距包裹在内</code></p><p> 通过css转换盒子模型：box-sizing:  border-box; IE盒子模型;</p><p>​                                            box-sizing:  content-box: 标准盒子模型;</p><p>注：<code>怪异盒子模型内容宽度如果超出 width 仍然会撑开盒子</code></p><h2 id="选择符有哪些，那些可以继承"><a href="#选择符有哪些，那些可以继承" class="headerlink" title="选择符有哪些，那些可以继承"></a>选择符有哪些，那些可以继承</h2><pre class="line-numbers language-ABAP"><code class="language-ABAP">通配*{}id选择器#{}类选择器 .{}标签选择器 {div....}相邻选择器 + {} // 选择加号前的下一个元素后代选择器 空格相连 {}子元素选择器  > {}属性选择器 a[herf] {}那些可以继承https://juejin.cn/post/6844904149222424590那些不可继承1.display2.text-decoration 添加文本样式3.list-style4.盒子模型属性(如padding系列,border系列,margin等,width,height)5.背景属性 background系列6.定位属性 position float clear z-index overflow等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="css优先级算法是如何工作的"><a href="#css优先级算法是如何工作的" class="headerlink" title="css优先级算法是如何工作的;"></a>css优先级算法是如何工作的;</h2><pre><code>!important &gt; 内联样式 &gt; id &gt; class &gt; 标签 &gt; 通配</code></pre><p>css权重计算： </p><pre class="line-numbers language-ABAP"><code class="language-ABAP">第一：内联样式 style 权重 1000第二：id选择器 权重 100第三： 类选择器 权重 10第三： 标签&伪元素 权重 1第五： 通配 *  权重 0Iimportant 权重 无穷大<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对BFC规范的理解"><a href="#对BFC规范的理解" class="headerlink" title="对BFC规范的理解"></a>对BFC规范的理解</h2><pre><code>BFC是一个隔离的独立容器，容器内部的元素不会对外界的元素产生影响</code></pre><h2 id="清除浮动的方式"><a href="#清除浮动的方式" class="headerlink" title="清除浮动的方式"></a>清除浮动的方式</h2><pre><code>1、 触发BFC2、 添加伪元素    ul:after {        content: '';        display: block;        claer: both;    }</code></pre><p>什么是 CSS reset</p><pre><code>reset是一个css文件，用来重置css样式（不常用）</code></pre><h2 id="经典布局方案"><a href="#经典布局方案" class="headerlink" title="经典布局方案"></a>经典布局方案</h2><h3 id="1、圣杯布局"><a href="#1、圣杯布局" class="headerlink" title="1、圣杯布局"></a>1、圣杯布局</h3><p>(双飞翼布局) 就是左右固定 中间自适应</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">1、 父盒子padding左右挤开固定距离，两侧子盒子宽度设置为挤开的距离，中间盒子宽度100%，结合浮动定位实现（）2、flex 实现 (常用)// 结构&lt;div class="container">    &lt;div class="left">zuo&lt;/div>    &lt;div class="center">zhong&lt;/div>    &lt;div class="right">you&lt;/div> &lt;/div>// 样式 <span class="token class">.container</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> antiquewhite<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>vh<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.left</span>,<span class="token class">.right</span> </span><span class="token punctuation">{</span>    <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>vh<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.center</span> </span><span class="token punctuation">{</span>    <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>vh<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、盒子水平居中"><a href="#2、盒子水平居中" class="headerlink" title="2、盒子水平居中"></a>2、盒子水平居中</h3><p>​    回答技巧： 常见的方式 定位 javascript， —-后来在学习到flex布局发现。。。。。更好，还有grid布局的实现，虽然兼容性不是很好，但是实现起来非常简单。</p><pre class="line-numbers language-js"><code class="language-js">一、<span class="token comment" spellcheck="true">/*1、定位    子绝父相，定位宽高50% 然后transform:translate(X,Y)移动盒子宽高的一半即可（兼容性不好）    3、（或者采用margin-top &amp;&amp; margin-left  的负值实现）（必须知道盒子具体的宽高）2、 定位     子绝父相，上下左右定位都设置为零 （但盒子必须设置宽高） */</span>二、flex布局实现（主流）    父元素 <span class="token punctuation">{</span>        display： flex<span class="token punctuation">;</span>        justify<span class="token operator">-</span>content<span class="token punctuation">:</span> conter<span class="token punctuation">;</span>        align<span class="token operator">-</span>items<span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 扩展 grid布局 js实现</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="响应式布局方案"><a href="#响应式布局方案" class="headerlink" title="响应式布局方案"></a>响应式布局方案</h2><p>​    media   rem  flex  vh/ vw</p><h2 id="rem与em的区别"><a href="#rem与em的区别" class="headerlink" title="rem与em的区别"></a>rem与em的区别</h2><blockquote><p>rem是根据根的font-size变化，而em是根据父级的font-size变化</p></blockquote><p>rem：相对于根元素html的font-size，假如html为font-size：12px，那么，在其当中的div设置为font-size：2rem,就是当中的div为24px</p><p>em：相对于父元素计算，假如某个p元素为font-size:12px,在它内部有个span标签，设置font-size：2em,那么，这时候的span字体大小为：12*2=24px</p><h2 id="css3预处理"><a href="#css3预处理" class="headerlink" title="css3预处理"></a>css3预处理</h2><p>less<br>sass</p><p>动画</p>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试通关手册目录</title>
      <link href="/2021/12/17/%E9%9D%A2%E8%AF%95%E9%80%9A%E5%85%B3%E6%89%8B%E5%86%8C%E7%9B%AE%E5%BD%95/"/>
      <url>/2021/12/17/%E9%9D%A2%E8%AF%95%E9%80%9A%E5%85%B3%E6%89%8B%E5%86%8C%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="基本功考察"><a href="#基本功考察" class="headerlink" title="基本功考察"></a>基本功考察</h1><h2 id="关于Html"><a href="#关于Html" class="headerlink" title="关于Html"></a>关于Html</h2><p>html语义化标签的理解; 结构化的理解; 能否写出简洁的html结构; SEO优化<br>h5中新增的属性; 如自定义属性data, 类名className等, 新增表单元素, 拖拽Drag<br>h5中新增的API, 修改的API, 废弃的API 稍作了解 (离线存储, audio, video)</p><h2 id="关于CSS"><a href="#关于CSS" class="headerlink" title="关于CSS"></a>关于CSS</h2><p>CSS选择器( 三大特性 )<br>BFC机制<br>盒模型<br>CSS模块化开发(封装); SCSS和LESS的使用<br>屏幕适配 以及 页面自适应<br>CSS3中新增的选择器<br>CSS3中新增的属性, transform trasition animation等…</p><h2 id="关于布局"><a href="#关于布局" class="headerlink" title="关于布局"></a>关于布局</h2><p>标准文档流(padding + margin + 负margin) + 浮动float + 定位<br>百分比布局(流式布局): px单位 用 %num代替, 占父级元素的百分比<br>flex弹性布局: 主轴 辅助轴的几个属性<br>grid栅格布局: 使用框架中的类名来替代: 本质上还是百分比布局</p><h2 id="关于JS基础"><a href="#关于JS基础" class="headerlink" title="关于JS基础"></a>关于JS基础</h2><p>变量数据类型及检测: 基本 + 引用<br>运算符: 算术 + 条件 + 逻辑 + 位 + 短路, 隐式转换等<br>条件, 循环, 异常处理 if switch(){case xxx:} try catch finally throw<br>函数定义, 调用方式(apply, call, 直接调用), 传参: 实参给形参赋值<br>字符串, 数组, 对象常用API,<br>正则表达式</p><h2 id="关于JS高级"><a href="#关于JS高级" class="headerlink" title="关于JS高级"></a>关于JS高级</h2><p>作用域, 作用域链, 闭包<br>原型, 原型链, 继承<br>函数上下文, this指向<br>js的运行机制, 事件队列和循环<br>同步, 异步编程</p><h2 id="关于网络协议"><a href="#关于网络协议" class="headerlink" title="关于网络协议"></a>关于网络协议</h2><p>HTTP协议<br>cookie, session, token</p><h2 id="关于ES6语法"><a href="#关于ES6语法" class="headerlink" title="关于ES6语法"></a>关于ES6语法</h2><p>字符串, 数组, 对象 扩展的api<br>变量扩展: let const 解构赋值 块级作用域<br>函数扩展: 箭头函数 默认参数, rest参数<br>展开运算符, 模板字符串<br>set 和 map数据结构<br>迭代器和生成器函数 next 和 yield的理解<br>proxy对象 属性代理器: 属性的读取（get）和设置（set）相关操作<br>promise对象, 异步编程的解决方案<br>async + await: 异步编程的终极方案 promise + generator的语法糖<br>class语法 构造函数的语法糖<br>模块化编程 export + import 的 导出和导入</p><h2 id="VUE基础"><a href="#VUE基础" class="headerlink" title="VUE基础"></a>VUE基础</h2><p>基本指令<br>实例的属性和方法<br>实例的生命周期<br>组件基础: 创建,注册,添加属性方法,套用等…<br>组件通信传值 父子, 兄弟, 跨级<br>插槽slot等…</p><h2 id="VUE高级"><a href="#VUE高级" class="headerlink" title="VUE高级"></a>VUE高级</h2><p>vue-router: 搭建SPA<br>路由,组件的配置<br>路由间的传值<br>路由跳转<br>路由的导航守卫<br>记住在router.js 和 组件页面中的使用方式<br>vuex: 状态管理: 数据仓库store<br>实例化仓库的5大属性的使用<br>state, getters, mutations, actions, modules</p><p>辅助函数mapState等…, 仓库中计算属性的映射, 方便操作<br>记住在 store.js 和 组件中 使用方式<br>VUE深入, 源码阅读<br>数据响应式原理<br>virtual dom<br>diff 算法<br>nextTick等等…<br>vue2和vue3的数据绑定<br>vue3的componest API<br>vite的用法</p><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>掌握原生的DOM操作<br>增删查改<br>熟悉node和element对象<br>事件关于事件的机制<br>冒泡和捕获<br>事件委托<br>自定义事件<br>Event对象<br>面向对象<br>了解面向对象的思想，能够以面向对象的思想构建应用。比如封装一个日历组件，设计对象所需的属性值和方法。<br>new方法<br>继承，派生<br>原型和原型链<br>函数<br>熟悉Array，String等的方法<br>call和apply方法的使用<br>链式调用<br>this</p><h2 id="工程化"><a href="#工程化" class="headerlink" title="工程化"></a>工程化</h2><p>掌握gulp<br>索引行考察手写gulp任务<br>掌握模块化<br>CMD标准<br>commonjs<br>ES6模块<br>babel如何使用<br>webpack打包方案<br>异步加载<br>打包多个文件<br>掌握webpack<br>阅读webpack文档<br>理解配置文件结构<br>合并，注入生效代码部分<br>热更新<br>CSS<br>命名策略<br>嵌套<br>变量<br>函数<br>了解nodeJS对于前端岗位，nodejs的使用主要集中在自动化和搭建简单的数据服务器两个方面。<br>是否上传过npm包<br>断点调试法<br>express<br>插件<br>中间件<br>路由原理<br>HTTP协议<br>数据库查询<br>HTML模板（ejs，pug）<br>了解ES6<br>promise<br>Generator<br>花括号作用域<br>class<br>数组遍历（ES5）<br>严格模式（ES5）<br>模块系统<br>框架专题</p><h2 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h2><p>MVC<br>双向数据绑定<br>单项数据流<br>组件化<br>生命期<br>路由<br>前端模板<br>横向对比，所用模板的优点<br>至少使用过两种以上的前端模板</p><h1 id="工程能力考察"><a href="#工程能力考察" class="headerlink" title="工程能力考察:"></a>工程能力考察:</h1><h2 id="项目能力"><a href="#项目能力" class="headerlink" title="项目能力"></a>项目能力</h2><p>vue-cli脚手架搭建和功能配置 vue.config.js<br>vite的使用和搭建等<br>webpack的常用配置<br>项目构建 打包<br>熟悉各类框架的文档…<br>UI框架: Bootstrap, MUI, Element-ui等<br>常用的插件整理, 整理一个自己插件库, 封装自己的方法库,组件库<br>常用的工具熟练度<br>PC端和移动端开发注意事项和兼容性<br>经验总结: 如何快速确定项目的技术选型</p><h2 id="坑点总结"><a href="#坑点总结" class="headerlink" title="坑点总结"></a>坑点总结</h2><p>项目遇到坑坑坑!!!<br>如何处理，如何提出issue并且合作处理<br>git或者svn等使用情况<br>项目中的性能优化记录 ( 都是细节点…多记录 )<br>需求文档的理解, 可以结合 项目流程图, UML图<br>问题解决能力: (bug定位调试, 查找文档, 寻求他人…)<br>平常有记录的习惯吗。<br>模块化, 组件化开发能力<br>项目分类; 各类文件整理,分类<br>各类功能封装<br>组件和功能模块的抽离, 解耦, 复用</p><h2 id="内功考察"><a href="#内功考察" class="headerlink" title="内功考察:"></a>内功考察:</h2><p>面向对象的编程思想<br>类的抽象<br>对象的封装, 继承<br>为了更好的去管理数据, 分类数据 实现高内聚, 低</p><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>设计模式感觉也是<br>将面向对象思想 再度抽象成现实中 某些特定模式<br>数据结构和算法<br>学习常用的排序搜索算法, 顺序表,链表,栈,队列,树,堆 结构等等…<br>考验你的 抽象思维 和 数学功底了<br>将现实需求 抽象成 计算机代码 的思维能力</p><h2 id="附加技能考察"><a href="#附加技能考察" class="headerlink" title="附加技能考察:"></a>附加技能考察:</h2><h3 id="学习能力"><a href="#学习能力" class="headerlink" title="学习能力"></a>学习能力</h3><p>持续学习的态度–博客, 笔记记录<br>技术论坛活跃度高, 问答多<br>GitHub开源项目参与<br>了解一门后端语言<br>node.js, python, php等…<br>数据库mysql,redis,mongodb. sql的操作语句, mongo的操作语句, redis操作语句<br>node + express 搭建本地服务等<br>python + django + request + scrapy</p><h3 id="系统编程"><a href="#系统编程" class="headerlink" title="系统编程"></a>系统编程</h3><p>Linux命令行操作, 系统文件管理<br>多任务, 多线程, 多进程, 协程, 并发, 并行, 串行, 同步, 异步等概念的理解</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王秋霞</title>
      <link href="/2021/12/14/%E7%8E%8B%E7%A7%8B%E9%9C%9E/"/>
      <url>/2021/12/14/%E7%8E%8B%E7%A7%8B%E9%9C%9E/</url>
      
        <content type="html"><![CDATA[<p>大爷今年六十花甲，穿着皮裤叼着雪茄，精神抖擞红光满颊，钞票大把塞满皮夹，欲求一女共度晚霞，诚心征婚就在当下，愿那女子年纪不大，做事温柔不像三八。唠唠家常说说闲话。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试之http</title>
      <link href="/2021/11/19/%E9%9D%A2%E8%AF%95%E4%B9%8B%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/"/>
      <url>/2021/11/19/%E9%9D%A2%E8%AF%95%E4%B9%8B%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h2><h3 id="网络分层"><a href="#网络分层" class="headerlink" title="网络分层"></a>网络分层</h3><ul><li>目前网络分层可分为两种：OSI 模型和 TCP/IP 模型</li></ul><p>OSI七层模型</p><p>​    <code>物理层——数据链路层——网络层——传输层——会话层——表示层——应用层</code></p><p>TCP的层级</p><p>​    <code>应用层——TCP传输控制层——IP网络层——链路层</code></p><h3 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h3><p><strong>区分状态码</strong><br>     1××开头  - 信息提示<br>     2××开头  - 请求成功<br>     3××开头  - 请求被重定向<br>     4××开头  - 请求错误<br>     5××开头  - 服务器错误</p><p><strong>常见状态码</strong><br>     200 - 请求成功，Ajax 接受到信息了<br>     400 - 服务器不理解请求<br>     403 - 服务器拒绝请求<br>     404 - 请求页面错误<br>     500 - 服务器内部错误，无法完成请求</p><h2 id="HTTP协议类"><a href="#HTTP协议类" class="headerlink" title="HTTP协议类"></a>HTTP协议类</h2><h3 id="主要特点（半双工）"><a href="#主要特点（半双工）" class="headerlink" title="主要特点（半双工）"></a>主要特点（半双工）</h3><ul><li>无连接： 连接一次就会断开 不会保持连接</li><li>无状态 ：客户端和服务端是独立的 http协议只帮忙连接传输 （引出token，cookie，session）（引出本地存储）</li><li>简单快速 </li><li>灵活 ： 通过配置头部信息可以控制不同数据的传输</li></ul><p>报文： 请求报文 ： 请求行- 请求头- 空行- 请求体</p><p>​              响应报文： 状态行- 响应头- 空行- 响应体</p><h3 id="http方法"><a href="#http方法" class="headerlink" title="http方法"></a>http方法</h3><ul><li>GET            获取资源</li><li>POST          传输资源</li><li>PUT             更新资源</li><li>DELETE      删除资源</li><li>HEAD          获取报文首部</li></ul><h3 id="GET和POST的主要区别"><a href="#GET和POST的主要区别" class="headerlink" title="GET和POST的主要区别"></a>GET和POST的主要区别</h3><ul><li>GET在浏览器回退是无害的，POST则会重新请求</li><li>GET产生的URL地址可以被收藏， POST不行</li><li>GET请求会被浏览器主动缓存，POST不会</li><li>GET请求参数会保存在浏览器历史记录中，POST中参数不会保留</li><li>参数传递的位置不同，GET在URL中，POST在请求体中</li></ul><h3 id="什么时候用post"><a href="#什么时候用post" class="headerlink" title="什么时候用post"></a>什么时候用post</h3><p>​        post一般用于修改服务器上的资源，对所发送的信息没有限制。比如</p><p>​        1、无法使用缓存文件（更新服务器上的文件或数据库）<br>​        2、向服务器发送大量数据（POST 没有数据量限制）<br>​        3、发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</p><h2 id="TCP-UDP"><a href="#TCP-UDP" class="headerlink" title="TCP/ UDP"></a>TCP/ UDP</h2><p>TCP三握手四挥手</p><h2 id="浏览器如何运作"><a href="#浏览器如何运作" class="headerlink" title="浏览器如何运作"></a>浏览器如何运作</h2><h2 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h2><p>同源策略</p><h3 id="CORS跨域资源共享"><a href="#CORS跨域资源共享" class="headerlink" title="CORS跨域资源共享"></a>CORS跨域资源共享</h3><pre class="line-numbers language-js"><code class="language-js">会问；项目是怎么部署的<span class="token comment" spellcheck="true">// CORS跨域资源共享</span>官方跨域解决方案，特点是不需要客户端做任何特殊操作，完全在服务器中进行处理，支持<span class="token keyword">get</span>和post请求。跨域资源共享标准新增一组HTTP首部字段，CORS怎么工作的？    CORS是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到响应后会对响应放行。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="前台使用-proxy"><a href="#前台使用-proxy" class="headerlink" title="前台使用 proxy"></a>前台使用 proxy</h3><p><code>vue.config.js</code>中 ==注意写完后重启项目==</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 定义一个对象</span><span class="token keyword">let</span> proxyObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 在指定路径下配置不同的 配置  如 ‘/’下</span>proxyObj<span class="token punctuation">[</span><span class="token string">'/'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// websoket 不开启websoket</span>    ws<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token comment" spellcheck="true">// 代理的目标地址</span>    target： ‘http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>loaclhost：<span class="token number">8000</span>’    <span class="token comment" spellcheck="true">// 发送请求头host会被设置target</span>    changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 重写请求地址</span>    pathReWrite： <span class="token punctuation">{</span>    <span class="token string">'^/'</span><span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    host<span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>    post<span class="token punctuation">:</span> <span class="token number">8080</span><span class="token punctuation">,</span>    proxy<span class="token punctuation">:</span> proxyObj<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="AJAX核心步骤"><a href="#AJAX核心步骤" class="headerlink" title="AJAX核心步骤"></a>AJAX核心步骤</h2><h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>点击发送<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>result<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#result'</span><span class="token punctuation">)</span>    btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ajax 四个步骤 1、创建对象</span>      <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 2、初始化 设置请求方法和 url</span>      xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'http://localhost:8080/server'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 3、 发送</span>      xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 4、 事件绑定</span>      <span class="token comment" spellcheck="true">/*        on 当...时候        readystate 是xhr的一个属性 表示状态        有 0（未初始化） 1（open方法调用完毕）         2（send方法调用完毕） 3（服务端返回部分结果）         4（服务端返回所有结果）五个状态（一般用4）        change 改变      */</span>      xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断readyState状态</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 判断响应状态码</span>          <span class="token comment" spellcheck="true">// 2XX 二开头的表示成功</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span><span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 处理结果 行 头 空行 体</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 状态码</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 状态字符串</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>getAllResponseHeaders<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 头</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 响应体</span>            result<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> xhr<span class="token punctuation">.</span>response<span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>result<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">const</span> result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.result'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseover'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ajax 创建对象</span>      <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token string">'http://localhost:8080/server'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// post请求是在send()设置参数</span>      xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'a=1&amp;b=2&amp;c=3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 状态判断</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>radyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 状态码</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 处理返回结果</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> xhr<span class="token punctuation">.</span>response<span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如何设置请求头</p><p>​    <code>在open方法后追加一个 xhr.setRequestHeader()方法</code></p><ol><li>两个参数 头的名称 头的信息</li><li>例如    xhr.setRequestHeader(‘Content-Type’,’application/x-www-form’)</li></ol><p>服务端响应json数据</p><p>网络超时与异常处理</p><ul><li>(超时设置 xhr.timeout == 2000）若超时则请求取消</li><li>超时回调 xhr.ontimeout =function() {alert(网络超时，请刷新后重试)}</li><li>网络异常回调 xhr.onerror = function() { alert(宁的网络似乎出了点问题)}</li></ul><p>重复请求问题解决 节流阀</p><h3 id="axios请求"><a href="#axios请求" class="headerlink" title="axios请求"></a>axios请求</h3><pre class="line-numbers language-js"><code class="language-js"> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8080/server'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// url参数</span>      params<span class="token punctuation">:</span> <span class="token punctuation">{</span>        id<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>        vip<span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 请求头信息</span>      Headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>        size<span class="token punctuation">:</span> <span class="token string">'ii'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 请求体</span>        username<span class="token punctuation">:</span> admin<span class="token punctuation">,</span>        password<span class="token punctuation">:</span> <span class="token number">123456</span>      <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// axios基于Promise 可用then链式调用</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// post请求</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8080/server'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 请求体</span>        username<span class="token punctuation">:</span> admin<span class="token punctuation">,</span>        password<span class="token punctuation">:</span> <span class="token number">123456</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// url参数</span>      params<span class="token punctuation">:</span> <span class="token punctuation">{</span>        id<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>        vip<span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 请求头信息</span>      Headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>        size<span class="token punctuation">:</span> <span class="token string">'ii'</span>      <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// axios基于Promise 可用then链式调用</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>axios通用方法请求</p><pre class="line-numbers language-js"><code class="language-js">axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">'http://loaclhost:8080'</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// method: 'POAT' 不写默认为GET请求</span>    url<span class="token punctuation">:</span> <span class="token string">'/server'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// url参数</span>    params<span class="token punctuation">:</span> <span class="token punctuation">{</span>        vip： <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 请求头信息</span>    Headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> <span class="token number">100</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 请求体参数</span>    data： <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> <span class="token number">1</span>，        b： <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>status<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 响应状态码</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 状态码字符串</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 响应头信息</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 响应体</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ajax优缺点"><a href="#ajax优缺点" class="headerlink" title="ajax优缺点"></a>ajax优缺点</h3><p><strong>ajax的优点</strong></p><p>1、无刷新更新数据（在不刷新整个页面的情况下维持与服务器通信）<br> 2、异步与服务器通信（使用异步的方式与服务器通信，不打断用户的操作）<br> 3、前端和后端负载均衡（将一些后端的工作交给前端，减少服务器与宽度的负担）<br> 4、界面和应用相分离（ajax将界面和应用分离也就是数据与呈现相分离）</p><p><strong>ajax的缺点</strong></p><p>1、ajax不支持浏览器back按钮.<br> 2、安全问题 Aajax暴露了与服务器交互的细节<br> 3、对搜索引擎的支持比较弱<br> 4、破坏了Back与History后退按钮的正常行为等浏览器机制</p>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试扫盲</title>
      <link href="/2021/11/17/%E9%9D%A2%E8%AF%95%E6%89%AB%E7%9B%B2/"/>
      <url>/2021/11/17/%E9%9D%A2%E8%AF%95%E6%89%AB%E7%9B%B2/</url>
      
        <content type="html"><![CDATA[<p>3443<br>耶特瑞特ewew<br>的几位佛囧文化哦日哦额啊我日eawoif eaa<br>而且文为委屈<br> 奥尔u金佛外婆家<br>————————后续更新————————</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何搭建青龙面板</title>
      <link href="/2021/11/16/%E9%9D%92%E9%BE%99%E9%9D%A2%E6%9D%BF%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/11/16/%E9%9D%92%E9%BE%99%E9%9D%A2%E6%9D%BF%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<pre><code>建议:服务器大家用腾讯的轻量云就可以 现在优惠力度大 1h2g2m轻量云 50r一年 推荐用2h4g8m的 74r一年 还可以用来搭建v2免流购买地址 https://curl.qcloud.com/mZF3xXoO```教程开始了第一步```下载finalshell 连接服务器 相信这个大家都会```第二步搭建青龙面板的前提条件 安装docker```1.检查yum源且更新sudo yum check-update2.下载dockercurl -sSL https://get.daocloud.io/docker | sh如果出现错误或者下载不了的换这个curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun3.启动dockersudo systemctl start docker4.查看docker状态sudo systemctl status docker启动成功的话 会有绿色的active(running)5.设置开机自启sudo systemctl enable docker```第三步搭建青龙面板1.拉取镜像```连接服务器后执行以下代码5700为面板端口 可以自己更改 两个都要改docker run -dit-v $pwd/ql/config:/ql/config-v $pwd/ql/log:/ql/log-v $pwd/ql/db:/ql/db-v $pwd/ql/scripts:/ql/scripts-v $pwd/ql/jbot:/ql/jbot-p 5700:5700-e ENABLE_HANGUP=true-e ENABLE_WEB_PANEL=true–name ql–hostname ql–restart alwayswhyour/qinglong:latest```2.放行端口 修改密码```去服务器管理界面防火墙 有的是安全组放行5700端口，你自己改的什么就放行什么。下载winscp连接服务器 找到ql文件夹里面config打开 找到auth.json文件 修改密码 password后面是密码 自己修改```第四步```登录青龙面板浏览器打开http://ip:5700ip为你的服务器ip地址 端口根据自己修改的填写```第五步添加脚本 也就是所为的拉库1.点击青龙面板左侧的定时任务，点击右上角“添加定时”2.名称随便填```faker库命令ql repo https://ghproxy.com/https://github.com/shufflewzc/faker2.git “jd_|jx_|gua_|jddj_|getJDCookie” “activity|backUp” “jd[_]|USER|utils|ZooFaker_Necklace.js|JDJRValidator_Pure|sign_graphics_validate”定时规则30 2,8,14,20,23 * * *```3.点击运行按钮 就可以了第六步添加账号```1.点击左上角三道杠2.点击环境变量3.点击右上角添加变量名称：JD_COOKIE 名称不可更改值填写cookiept_key=*******************;pt_pin=********;注意：分号是英文的，中间没有空格。最后怎么教大家抓cookie```第七步安装依赖环境 必须安装 否则有些脚本运行不了 ，以下命令一个一个跑。跑完之后全选所有脚本 点击批量运行 就可以了。```docker exec -it ql bash -c “apk add --no-cache build-base g++ cairo-dev pango-dev giflib-dev &amp;&amp; cd scripts &amp;&amp; npm install canvas --build-from-source”```2.```docker exec -it ql bash -c “cd scripts &amp;&amp; npm i -S png-js”```3.```docker exec -it ql bash -c “npm install axios date-fns”```4.```docker exec -it ql bash -c “npm install png-js”```5.```docker exec -it ql bash -c “pnpm i png-js”```6.```docker exec -it ql bash -c “pip3 install requests”```7.```docker exec -it ql bash -c “apk add --no-cache build-base g++ cairo-dev pango-dev giflib-dev &amp;&amp; cd scripts &amp;&amp; npm install canvas --build-from-source”```8.```docker exec -it ql bash -c “apk add python3 zlib-dev gcc jpeg-dev python3-dev musl-dev freetype-dev”```9.```docker exec -it ql bash -c “cd /ql/scripts/ &amp;&amp; apk add --no-cache build-base g++ cairo-dev pango-dev giflib-dev &amp;&amp; npm i &amp;&amp; npm i -S ts-node typescript @types/node date-fns axios png-js canvas --build-from-source”```10.yum install wget unzip -y cd root/ql/scripts wget https://ghproxy.com/https://github.com/shufflewzc/faker2/releases/download/0.0.1/utils.zip &amp;&amp; unzip utils.zip如何抓cookie手机用户 下载alook浏览器 登录jd官网，登陆之后 点击 菜单 工具箱 开发者工具 cookies获取 安卓 苹果通用 然后按照上面的教程 输入就好了</code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node操作mongo</title>
      <link href="/2021/10/28/node%E6%93%8D%E4%BD%9CMongo/"/>
      <url>/2021/10/28/node%E6%93%8D%E4%BD%9CMongo/</url>
      
        <content type="html"><![CDATA[<h2 id="node操作mongodb"><a href="#node操作mongodb" class="headerlink" title="node操作mongodb"></a>node操作mongodb</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><pre class="line-numbers language-js"><code class="language-js">npm install mongodb <span class="token operator">--</span>save <span class="token comment" spellcheck="true">// 或者</span>cnpm install mongodb <span class="token operator">--</span>save <span class="token comment" spellcheck="true">// 或者</span>yarn add mongodb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="node引入连接mongodb"><a href="#node引入连接mongodb" class="headerlink" title="node引入连接mongodb"></a>node引入连接mongodb</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 引入 mongodb</span><span class="token keyword">const</span> <span class="token punctuation">{</span>MongoClient<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongodb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定义数据库连接的地址</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">'mongodb://localhost:27017'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// const url = 'mongodb://admin:123456@localhost:27017/'; 有密码连接方式 admin 表示用户名，123456 表示密码</span><span class="token comment" spellcheck="true">// 定义要操作的数据库</span><span class="token keyword">const</span> dbName <span class="token operator">=</span> <span class="token string">'itying'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 连接数据库</span>MongoClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span> useUnifiedTopology<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>client<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 获取 db 对象 </span>  <span class="token keyword">const</span> db <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">db</span><span class="token punctuation">(</span>dbName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 操作完数据库后，一定要记得关闭</span>  client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="node-对数据进行增删改查"><a href="#node-对数据进行增删改查" class="headerlink" title="node 对数据进行增删改查"></a>node 对数据进行增删改查</h3><h4 id="Nodejs-查找-MongoDb-数据库的数据"><a href="#Nodejs-查找-MongoDb-数据库的数据" class="headerlink" title="Nodejs 查找 MongoDb 数据库的数据"></a>Nodejs 查找 MongoDb 数据库的数据</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span>MongoClient<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongodb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">'mongodb://localhost:27017'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// const url = 'mongodb://admin:123456@localhost:27017/'; 有密码连接方式 admin 表示用户名，123456 表示密码</span><span class="token comment" spellcheck="true">// 定义要操作的数据库</span><span class="token keyword">const</span> dbName <span class="token operator">=</span> <span class="token string">'itying'</span><span class="token punctuation">;</span>MongoClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span> useUnifiedTopology<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>client<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 获取 db 对象 </span>  <span class="token keyword">const</span> db <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">db</span><span class="token punctuation">(</span>dbName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 查找数据</span>  db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 操作完数据库后，一定要记得关闭</span>    client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Nodejs-给-MongoDb-增加数据"><a href="#Nodejs-给-MongoDb-增加数据" class="headerlink" title="Nodejs 给 MongoDb 增加数据"></a>Nodejs 给 MongoDb 增加数据</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span>MongoClient<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongodb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">'mongodb://localhost:27017'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// const url = 'mongodb://admin:123456@localhost:27017/'; 有密码连接方式 admin 表示用户名，123456 表示密码</span><span class="token comment" spellcheck="true">// 定义要操作的数据库</span><span class="token keyword">const</span> dbName <span class="token operator">=</span> <span class="token string">'itying'</span><span class="token punctuation">;</span>MongoClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span> useUnifiedTopology<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>client<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 获取 db 对象 </span>  <span class="token keyword">const</span> db <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">db</span><span class="token punctuation">(</span>dbName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 增加数据</span>  db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insertOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"测试者"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">17</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Nodejs-修改-MongoDb-数据"><a href="#Nodejs-修改-MongoDb-数据" class="headerlink" title="Nodejs 修改 MongoDb 数据"></a>Nodejs 修改 MongoDb 数据</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> MongoClient <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongodb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">'mongodb://localhost:27017'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// const url = 'mongodb://admin:123456@localhost:27017/'; 有密码连接方式 admin 表示用户名，123456 表示密码</span><span class="token comment" spellcheck="true">// 定义要操作的数据库</span><span class="token keyword">const</span> dbName <span class="token operator">=</span> <span class="token string">'itying'</span><span class="token punctuation">;</span>MongoClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span> useUnifiedTopology<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>client<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 获取 db 对象 </span>  <span class="token keyword">const</span> db <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">db</span><span class="token punctuation">(</span>dbName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 修改数据</span>  db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">updateOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"xiaoming"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>$<span class="token keyword">set</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Nodejs-删除-MongoDb-数据"><a href="#Nodejs-删除-MongoDb-数据" class="headerlink" title="Nodejs 删除 MongoDb 数据"></a>Nodejs 删除 MongoDb 数据</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> MongoClient <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongodb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">'mongodb://localhost:27017'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// const url = 'mongodb://admin:123456@localhost:27017/'; 有密码连接方式 admin 表示用户名，123456 表示密码</span><span class="token comment" spellcheck="true">// 定义要操作的数据库</span><span class="token keyword">const</span> dbName <span class="token operator">=</span> <span class="token string">'itying'</span><span class="token punctuation">;</span>MongoClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span> useUnifiedTopology<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>client<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 获取 db 对象 </span>  <span class="token keyword">const</span> db <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">db</span><span class="token punctuation">(</span>dbName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 删除一条数据</span>  db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">deleteOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"xiaoming"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 删除多条数据</span>  db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">deleteMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"设计者"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongo聚合管道</title>
      <link href="/2021/10/27/mongo%E9%AB%98%E7%BA%A7/"/>
      <url>/2021/10/27/mongo%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="mongodb高级"><a href="#mongodb高级" class="headerlink" title="mongodb高级"></a>mongodb高级</h2><h3 id="aggregate聚合管道"><a href="#aggregate聚合管道" class="headerlink" title="aggregate聚合管道"></a>aggregate聚合管道</h3><p>使用聚合管道可以对集合中的文档进行变换和组合。 </p><p>实际项目：表关联查询、数据的统计。</p><p>MongoDB 中使用 db.COLLECTION_NAME.aggregate([{},…]) 方法 来构建和使用聚合管道。。</p><h3 id="MongoDB-Aggregation-管道操作符与表达式"><a href="#MongoDB-Aggregation-管道操作符与表达式" class="headerlink" title="MongoDB Aggregation 管道操作符与表达式"></a>MongoDB Aggregation 管道操作符与表达式</h3><pre><code>管道操作符 Description $project 增加、删除、重命名字段$match 条件匹配。只满足条件的文档才能进入下 一阶段 $limit 限制结果的数量 $skip 跳过文档的数量 $sort 条件排序。$group 条件组合结果 统计 $lookup $lookup 操作符 用以引入其它集合的数据 （表关联查询）</code></pre><p>SQL 和 NOSQL 对比: </p><pre><code>WHERE         $match GROUP BY     $group HAVING         $matchSELECT         $project ORDER         BY $sort LIMIT         $limit SUM()         $sum COUNT()     $sum join         $looku</code></pre><h3 id="管道表达式"><a href="#管道表达式" class="headerlink" title="==管道表达式:=="></a>==管道表达式:==</h3><p>管道操作符作为“键”,所对应的“值”叫做管道表达式。 </p><p>例如{$match:{status:”A”}}，$match 称为管道操作符，而 status:”A”称为管道表达式， 是管道操作符的操作数(Operand)。 </p><p>每个管道表达式是一个文档结构，它是由字段名、字段值、和一些表达式操作符组成的。 </p><pre><code>常用表达式操作符 Description $addToSet 将文档指定字段的值去重 $max 文档指定字段的最大值 $min 文档指定字段的最小值 $sum 文档指定字段求和 $avg 文档指定字段求平均 $gt 大于给定值 $lt 小于给定值 $eq 等于给定</code></pre><h3 id="数据库的备份与恢复"><a href="#数据库的备份与恢复" class="headerlink" title="数据库的备份与恢复"></a>数据库的备份与恢复</h3><h4 id="数据库备份"><a href="#数据库备份" class="headerlink" title="数据库备份"></a>数据库备份</h4><p>1、常用命令格式</p><p>mongodump -h IP –port 端口 -u 用户名 -p 密码 -d 数据库 -c 表 -o 文件存放路径</p><p>参数说明：<br>-h 指明数据库宿主机的IP<br>–port 指明数据库的端口<br>-u 指明数据库的用户名<br>-p 指明数据库的密码<br>-d 指明数据库的名字<br>-c 指明collection的名字<br>-o 指明到要导出的文件名<br>-q 指明导出数据的过滤条件</p><p>2.、导出所有数据库</p><pre><code>mongodump -o D:\mongodump</code></pre><p>3、 导出指定数据库</p><pre><code>mongodump -h 127.0.0.1:27017 -d jackson_YingQi -o D:\mongodump</code></pre><h4 id="数据库恢复"><a href="#数据库恢复" class="headerlink" title="数据库恢复"></a>数据库恢复</h4><p>1、 常用命令格式</p><p>mongorestore -h IP –port 端口 -u 用户名 -p 密码 -d 数据库 –drop 文件存在路径</p><ul><li><p>–drop：</p><p>恢复的时候，先删除当前数据，然后恢复备份的数据。就是说，恢复后，备份后添加修改的数据都会被删除，慎用哦！</p></li><li><p><path>：</path></p><p>mongorestore 最后的一个参数，设置备份数据所在位置，例如：c:\data\dump\test。</p><p>你不能同时指定 <path> 和 –dir 选项，–dir也可以设置备份目录。</path></p></li><li><p>–dir：</p><p>指定备份的目录</p><p>你不能同时指定 <path> 和 –dir 选项。</path></p></li></ul><p>–drop：先删除所有的记录，然后恢复. 慎用</p><pre><code>mongorestore -h 127.0.0.1:27017 -d jackson_YingQi --drop D:\mongodump\jackson_YingQi #删除jackson_YingQi数据库 在恢复备份的数据 </code></pre><p>2、恢复所有数据库到mongodb中</p><pre><code>mongorestore D:\mongodump #所有库的备份路径</code></pre><p>3、恢复指定的数据库</p><pre><code>mongorestore -h 127.0.0.1:27017 -d jackson_YingQi --dir D:\mongodump\jackson_YingQi #jackson_YingQi 这个数据库的备份路径mongorestore -h 127.0.0.1:27017 -d jackson_YingQi_new --dir D:\mongodump\jackson_YingQi #将jackson_YingQi 备份数据还原到jackson_YingQi_new 数据库中</code></pre>]]></content>
      
      
      <categories>
          
          <category> mongo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongodb用户权限设置</title>
      <link href="/2021/10/23/mongo%E8%B6%85%E7%BA%A7%E7%94%A8%E6%88%B7%E8%AE%BE%E7%BD%AE/"/>
      <url>/2021/10/23/mongo%E8%B6%85%E7%BA%A7%E7%94%A8%E6%88%B7%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="mongo用户权限配置"><a href="#mongo用户权限配置" class="headerlink" title="mongo用户权限配置"></a>mongo用户权限配置</h1><p>1、启动 mongo</p><p>2、 进入数据库 use admin</p><p>3、 创建用户 </p><pre><code>db.createUser({    user:'admin',     pwd:'123456',     roles:[{role:'root',db:'admin'}]})</code></pre><p>4、 打开mongodb安装目录下的mongod.cfg文件 添加如下配置</p><pre><code>配置：注意缩进 不然后续可能出现重启服务失败security:    authorization: enabled </code></pre><p>5、 重启mongdb服务</p><pre><code>     win + r 输入 services.msc 找到对应服务重启</code></pre><p>6、 用超级管理员身份链接数据库</p><pre><code>mongo admin -u 用户名 -p 密码</code></pre><h1 id="为某数据库创建一个只能访问-本数据库的用户"><a href="#为某数据库创建一个只能访问-本数据库的用户" class="headerlink" title="为某数据库创建一个只能访问 本数据库的用户"></a>为某数据库创建一个只能访问 本数据库的用户</h1><pre><code>use eggcmsdb.createUser({    user: "eggadmin",    pwd: "123456",     roles:     [ { role: "dbOwner", db: "eggcms" } ]})</code></pre><h1 id="mongodb数据库角色"><a href="#mongodb数据库角色" class="headerlink" title="mongodb数据库角色"></a>mongodb数据库角色</h1><p>1.数据库用户角色：read、readWrite; </p><p>2.数据库管理角色：dbAdmin、dbOwner、userAdmin；</p><p> 3.集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager； </p><p>4.备份恢复角色：backup、restore； </p><p>5.所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、 dbAdminAnyDatabase</p><p> 6.超级用户角色：root</p><h1 id="Mongodb-账户权限配置中常用的命令"><a href="#Mongodb-账户权限配置中常用的命令" class="headerlink" title="Mongodb 账户权限配置中常用的命令"></a>Mongodb 账户权限配置中常用的命令</h1><pre><code>1、show users; #查看当前库下的用户2、db.dropUser("eggadmin") #删除用户3、db.updateUser( "admin",{pwd:"password"}); #修改用户密码4、db.auth("admin","password"); #密码认证</code></pre>]]></content>
      
      
      <categories>
          
          <category> mongo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongodb基本语法</title>
      <link href="/2021/10/22/mongodb%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2021/10/22/mongodb%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<ul><li><h3 id="命令行-终端-启动命令"><a href="#命令行-终端-启动命令" class="headerlink" title="命令行(终端)启动命令"></a>命令行(终端)启动命令</h3><ul><li>mongod : 运行服务端</li><li>mongo: 启动客户端</li></ul></li><li><p>查看帮助命令,默认端口,日志位置</p><ul><li>查看帮助：mongod –help</li><li>查看是否启动成功：ps ajx|grep mongod</li><li>默认端⼝：27017</li><li>日志的位置：/var/log/mongodb/mongod.log</li></ul></li><li><p>mongodb客户端</p><ul><li>启动本地客户端:mongo</li><li>查看帮助：mongo –help</li><li>退出：exit或者ctrl+c</li></ul></li></ul><h3 id="mongo中的数据类型"><a href="#mongo中的数据类型" class="headerlink" title="mongo中的数据类型"></a>mongo中的数据类型</h3><pre><code>Object ID： ⽂档IDString： 字符串， 最常⽤， 必须是有效的UTF-8Boolean： 存储⼀个布尔值， true或falseInteger： 整数可以是32位或64位， 这取决于服务器Double： 存储浮点值Arrays： 数组或列表， 多个值存储到⼀个键Object： ⽤于嵌⼊式的⽂档， 即⼀个值为⼀个⽂档Null： 存储Null值Timestamp： 时间戳， 表示从1970-1-1到现在的总秒数Date： 存储当前⽇期或时间的UNIX时间格式</code></pre><h3 id="操作数据库命令"><a href="#操作数据库命令" class="headerlink" title="操作数据库命令"></a>操作数据库命令</h3><pre class="line-numbers language-tex"><code class="language-tex">查看当前的数据库：db查看所有的数据库：show dbs /show databases切换数据库：use db_name删除当前的数据库：db.dropDatabase()切换到没有的数据库, 添加数据会自动创建显示当前数据库状态：db.stats()当前数据库版本：db.version()查看当前数据库的链接机器地址：db.getMongo()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="操作集合的命令"><a href="#操作集合的命令" class="headerlink" title="操作集合的命令"></a>操作集合的命令</h3><pre><code>不手动创建集合：向不存在的集合中第⼀次加⼊数据时， 集合会被创建出来手动创建结合：创建用户：db.createUser({user:"laowang",pwd:"123456",roles:[{role:"userAdmin",db:"stu"}]}) db.createCollection(name,options)db.createCollection("stu")db.createCollection("sub", { capped : true, size : 10 } )参数capped： 默认值为false表示不设置上限,值为true表示设置上限参数size： 当capped值为true时， 需要指定此参数， 表示上限⼤⼩,单位为字节当⽂档达到上限时， 会将之前的数据覆盖， 最早添加的数据移出, 其余上移, 最后添加在最后一条显示当前所以用户：show  users删除用户：db.removeUser("userName")查看集合：show collections删除集合：db.集合名称.drop()</code></pre><h3 id="文档增删改查"><a href="#文档增删改查" class="headerlink" title="文档增删改查"></a>文档增删改查</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 插入数据</span>db<span class="token punctuation">.</span>集合名称<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span>插⼊⽂档时， 如果不指定_id参数， MongoDB会为⽂档分配⼀个唯⼀的ObjectId类型的_iddb<span class="token punctuation">.</span>stu<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'gj'</span><span class="token punctuation">,</span>gender<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>stu<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>_id<span class="token punctuation">:</span><span class="token string">"20170101"</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">'gj'</span><span class="token punctuation">,</span>gender<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>插入单条指定为字典<span class="token punctuation">,</span> 插入多条指定为列表<span class="token comment" spellcheck="true">// 保存</span>db<span class="token punctuation">.</span>集合名称<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span>如果⽂档的_id已经存在则修改， 如果⽂档的_id不存在则添加区别于<span class="token punctuation">:</span> insert如果存在直接报错<span class="token comment" spellcheck="true">// 简单查询:</span>db<span class="token punctuation">.</span>集合名称<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 更新</span>语法<span class="token punctuation">:</span> db<span class="token punctuation">.</span>集合名称<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>query<span class="token operator">></span> <span class="token punctuation">,</span><span class="token operator">&lt;</span>update<span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">{</span>multi<span class="token punctuation">:</span> <span class="token operator">&lt;</span>boolean<span class="token operator">></span><span class="token punctuation">}</span><span class="token punctuation">)</span>参数query<span class="token punctuation">:</span>查询条件参数update<span class="token punctuation">:</span>更新操作符参数multi<span class="token punctuation">:</span>可选， 默认是<span class="token boolean">false</span>，表示只更新找到的第⼀条记录， 值为<span class="token boolean">true</span>表示把满⾜条件的⽂档全部更新举例<span class="token punctuation">:</span>注意：<span class="token string">"multi update only works with $ operators"</span> 更新全部<span class="token punctuation">,</span>必须使用$<span class="token keyword">set</span>db<span class="token punctuation">.</span>stu<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'hr'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'mnc'</span><span class="token punctuation">}</span><span class="token punctuation">)</span> 更新一条<span class="token punctuation">,</span>没有更新的字段会丢弃<span class="token punctuation">.</span>db<span class="token punctuation">.</span>stu<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'hr'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>$<span class="token keyword">set</span><span class="token punctuation">:</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'hys'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span> 更新一条db<span class="token punctuation">.</span>stu<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>$<span class="token keyword">set</span><span class="token punctuation">:</span><span class="token punctuation">{</span>gender<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>multi<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span> 更新全部<span class="token comment" spellcheck="true">// 删除</span>语法<span class="token punctuation">:</span> db<span class="token punctuation">.</span>集合名称<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>query<span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">{</span>justOne<span class="token punctuation">:</span> <span class="token operator">&lt;</span>boolean<span class="token operator">></span><span class="token punctuation">}</span><span class="token punctuation">)</span>参数query<span class="token punctuation">:</span>可选，删除的⽂档的条件参数justOne<span class="token punctuation">:</span>可选， 如果设为<span class="token boolean">true</span>或<span class="token number">1</span>， 则只删除⼀条， 默认<span class="token boolean">false</span>， 表示删除多条 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> mongo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>性能优化之强缓存</title>
      <link href="/2021/10/21/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2021/10/21/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是性能"><a href="#什么是性能" class="headerlink" title="什么是性能"></a>什么是性能</h1><p>从浏览器开启的那一刻，到代码运行起消耗的一切资源（浏览器，服务器，文件网络）的一切都是性能</p><p>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</p><h2 id="性能优化好处"><a href="#性能优化好处" class="headerlink" title="性能优化好处"></a>性能优化好处</h2><ul><li>提高用户体验</li><li>节约资源</li></ul><h1 id="如何优化-浏览器层面"><a href="#如何优化-浏览器层面" class="headerlink" title="如何优化(浏览器层面)"></a>如何优化(浏览器层面)</h1><h2 id="浏览器缓存策略"><a href="#浏览器缓存策略" class="headerlink" title="浏览器缓存策略"></a>浏览器缓存策略</h2><h3 id="1、-强缓存"><a href="#1、-强缓存" class="headerlink" title="1、 强缓存"></a>1、 强缓存</h3><p>特点<br>强缓存中，当请求再次发出时，浏览器会判断目标资源是否 “命中” 强缓存，如果命中则直接从缓存中获取资源，不会再与服务端发生通信。</p><p>在 Chrome 中，命中强缓存的情况下， Network 中显示的 HTTP 状态码是 200</p><h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><p>强制缓存的请求结果有两种情况：</p><ul><li>命中缓存</li><li>未命中缓存<br><img src="https://cdn.jsdelivr.net/gh/wqx8821/image-host/tyimg/202110121952153.png"></li></ul><p>是否强缓存由以下 3 个 Header 属性共同来控制：</p><p>Expires<br>Expires 的值是一个 HTTP 日期，当服务器返回响应时，在 Response Headers 中将过期时间写入 Expires 字段。</p><p>在浏览器发起请求时，会根据系统时间和 Expires 的值进行比较，如果系统时间超过了 Expires 的值，缓存失效，会继续从服务器获取资源</p><h4 id="Cache-Control（重点）"><a href="#Cache-Control（重点）" class="headerlink" title="==Cache-Control（重点）=="></a>==Cache-Control（重点）==</h4><p>是 HTTP 1.1 中新增的属性，为了弥补 Expires 缺陷提出的，提供了更精确细致的缓存功能。Cache-Control 在请求头和响应头中都可以使用</p><p>Pragma<br>Pragma 只有一个属性值，就是 no-cache ，效果和 Cache-Control 中的 no-cache 一致，不使用强缓存，需要与服务器验证缓存是否新鲜，在 3 个头部属性中的优先级最高。</p><h2 id="2、-协商缓存"><a href="#2、-协商缓存" class="headerlink" title="2、 协商缓存"></a>2、 协商缓存</h2>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm相关</title>
      <link href="/2021/10/19/npm%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/10/19/npm%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1、nvm"><a href="#1、nvm" class="headerlink" title="1、nvm"></a>1、nvm</h2><p><strong>1.1 Mac 安装 nvm</strong></p><pre><code>https://github.com/nvm-sh/nvm/blob/master/README.md</code></pre><p><strong>1.2 Windows 安装 nvm</strong></p><pre><code>nvm-windowsnodist</code></pre><h2 id="2、npm"><a href="#2、npm" class="headerlink" title="2、npm"></a>2、npm</h2><h4 id="2-1-全局安装package"><a href="#2-1-全局安装package" class="headerlink" title="2.1 全局安装package"></a>2.1 全局安装package</h4><pre><code>$ npm install forever --global (-g)$ forever$ npm uninstall forever --global$ forever</code></pre><p><strong>全局安装包的目录</strong></p><ul><li><p>Mac</p><pre><code>/Users/felix/.nvm/versions/node/nvm各个版本/bin/</code></pre></li><li><p>Windows</p><pre><code>C:\Users\你的用户名\AppData\Roaming\npm\node_modules</code></pre></li></ul><h4 id="2-2-本地安装package"><a href="#2-2-本地安装package" class="headerlink" title="2.2 本地安装package"></a>2.2 本地安装package</h4><pre><code>$ cd ~/desktop$ mkdir gp-project$ cd gp-project$ npm install underscore$ npm list (ls)</code></pre><h4 id="2-3-package-json初始化"><a href="#2-3-package-json初始化" class="headerlink" title="2.3 package.json初始化"></a>2.3 package.json初始化</h4><pre><code>$ pwd$ npm init -y$ ls$ cat package.json</code></pre><h4 id="2-4-使用package-json"><a href="#2-4-使用package-json" class="headerlink" title="2.4 使用package.json"></a>2.4 使用package.json</h4><pre><code>$ npm install underscore --save$ cat package.json$ npm install lodash --save-dev$ cat package.json$ rm -rf node_modules$ ls$ npm install$ npm uninstall underscore --save$ npm list | grep underscore$ cat package.json</code></pre><h4 id="2-5-安装指定版本的包"><a href="#2-5-安装指定版本的包" class="headerlink" title="2.5 安装指定版本的包"></a>2.5 安装指定版本的包</h4><pre><code>$ pwd$ npm list$ npm info underscore$ npm view underscore versions$ npm install underscore@1.8.0$ npm list$ npm uninstall underscore$ npm list</code></pre><h4 id="2-6-更新本地安装的包"><a href="#2-6-更新本地安装的包" class="headerlink" title="2.6 更新本地安装的包"></a>2.6 更新本地安装的包</h4><pre><code>$ npm info underscore$ npm view underscore versions$ npm install underscore@1.4.4 --save-dev$ npm list | grep gulp$ npm outdated //~2.0.0表示patch, ^2.0.0表示minor * 表示xx最新版本$ npm list | grep gulp$ npm update</code></pre><h4 id="2-7-清除缓存"><a href="#2-7-清除缓存" class="headerlink" title="2.7 清除缓存"></a>2.7 清除缓存</h4><pre><code>npm cache clean --force</code></pre><h4 id="2-8-上传自己的包"><a href="#2-8-上传自己的包" class="headerlink" title="2.8 上传自己的包"></a>2.8 上传自己的包</h4><h6 id="2-8-1-编写模块"><a href="#2-8-1-编写模块" class="headerlink" title="2.8.1 编写模块"></a>2.8.1 编写模块</h6><p>保存为index.js</p><pre class="line-numbers language-js"><code class="language-js">exports<span class="token punctuation">.</span>sayHello <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token string">'Hello World'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="2-8-2-初始化包描述文件"><a href="#2-8-2-初始化包描述文件" class="headerlink" title="2.8.2 初始化包描述文件"></a>2.8.2 初始化包描述文件</h6><p>$ npm init package.json</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>   <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"gp19-npm"</span><span class="token punctuation">,</span>   <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.1"</span><span class="token punctuation">,</span>   <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"gp19 self module"</span><span class="token punctuation">,</span>   <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>     <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"make test"</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token property">"repository"</span><span class="token operator">:</span> <span class="token punctuation">{</span>     <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"Git"</span><span class="token punctuation">,</span>     <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"git+https://github.com/lurongtao/gp19-npm.git"</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span>     <span class="token string">"demo"</span>   <span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"Felixlu"</span><span class="token punctuation">,</span>   <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>   <span class="token property">"bugs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>     <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://github.com/lurongtao/gp19-npm/issues"</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token property">"homepage"</span><span class="token operator">:</span> <span class="token string">"https://github.com/lurongtao/gp19-npm#readme"</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="2-8-3-注册npm仓库账号"><a href="#2-8-3-注册npm仓库账号" class="headerlink" title="2.8.3 注册npm仓库账号"></a>2.8.3 注册npm仓库账号</h6><pre><code>https://www.npmjs.com 上面的账号felix_lurt/qqmko09ijn$ npm adduser</code></pre><h6 id="2-8-4-上传包"><a href="#2-8-4-上传包" class="headerlink" title="2.8.4 上传包"></a>2.8.4 上传包</h6><pre><code>$ npm publish</code></pre><p>坑：403 Forbidden</p><pre><code>查看npm源：npm config get registry切换npm源方法一：npm config set registry http://registry.npmjs.org切换npm源方法二：nrm use npm</code></pre><h6 id="2-8-5-安装包"><a href="#2-8-5-安装包" class="headerlink" title="2.8.5 安装包"></a>2.8.5 安装包</h6><pre><code>$ npm install gp19-npm</code></pre><h6 id="2-8-6-卸载包"><a href="#2-8-6-卸载包" class="headerlink" title="2.8.6 卸载包"></a>2.8.6 卸载包</h6><pre><code>查看当前项目引用了哪些包 ：npm ls卸载包：npm unpublish --force</code></pre><h6 id="2-8-7-使用引入包"><a href="#2-8-7-使用引入包" class="headerlink" title="2.8.7 使用引入包"></a>2.8.7 使用引入包</h6><pre><code>var hello = require('gp19-npm')hello.sayHello()</code></pre><h4 id="2-9-npm-脚本"><a href="#2-9-npm-脚本" class="headerlink" title="2.9 npm 脚本"></a>2.9 npm 脚本</h4><p>Node 开发离不开 npm，而脚本功能是 npm 最强大、最常用的功能之一。</p><p><strong>一、什么是 npm 脚本？</strong></p><p>npm 允许在 package.json 文件里面，使用 scripts 字段定义脚本命令。</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  // ...  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"node build.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>二、执行顺序</strong></p><p>如果 npm 脚本里面需要执行多个任务，那么需要明确它们的执行顺序。</p><p>script1.js</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>script2.js</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token string">"script1"</span><span class="token punctuation">:</span> <span class="token string">"node script1.js"</span><span class="token punctuation">,</span>  <span class="token string">"script2"</span><span class="token punctuation">:</span> <span class="token string">"node script2.js"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是并行执行（即同时的平行执行），可以使用 <code>&amp;</code> 符号。</p><pre><code>$ npm run script1 &amp; npm run script2</code></pre><p>如果是继发执行（即只有前一个任务成功，才执行下一个任务），可以使用 <code>&amp;&amp;</code> 符号。</p><pre><code>$ npm run script1 &amp;&amp; npm run script2</code></pre><p><strong>三、简写形式</strong></p><p>常用的 npm 脚本简写形式。</p><pre><code>npm start 是 npm run start</code></pre><p><strong>四、变量</strong></p><p>npm 脚本有一个非常强大的功能，就是可以使用 npm 的内部变量。</p><p>首先，通过 <code>npm_package_</code> 前缀，npm 脚本可以拿到 package.json 里面的字段。比如，下面是一个 package.json。</p><blockquote><p>注意：一定要在 npm 脚本中运行（如：npm run view）才可以，直接在命令行中运行JS（如：node view.js）是拿不到值的</p></blockquote><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"foo"</span><span class="token punctuation">,</span>   <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.2.5"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"view"</span><span class="token operator">:</span> <span class="token string">"node view.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么，变量 npm_package_name 返回 foo，变量 npm_package_version 返回 1.2.5。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// view.js</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>npm_package_name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// foo</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>npm_package_version<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1.2.5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面代码中，我们通过环境变量 process.env 对象，拿到 package.json 的字段值。如果是 Bash 脚本，可以用$npm_package_name 和 $npm_package_version 取到这两个值。</p><p>npm<em>package</em>前缀也支持嵌套的package.json字段。</p><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"repository"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"git"</span><span class="token punctuation">,</span>  <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"xxx"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>scripts<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"view"</span><span class="token operator">:</span> <span class="token string">"echo $npm_package_repository_type"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中，repository 字段的 type 属性，可以通过 npm_package_repository_type 取到。</p><p>下面是另外一个例子。</p><pre><code>"scripts": {  "install": "foo.js"}</code></pre><p>上面代码中，npm_package_scripts_install 变量的值等于 foo.js。</p><p>然后，npm 脚本还可以通过 npm<em>config</em> 前缀，拿到 npm 的配置变量，即 npm config get xxx 命令返回的值。比如，当前模块的发行标签，可以通过 npm_config_tag 取到。</p><pre><code>"view": "echo $npm_config_tag",</code></pre><p>注意，package.json 里面的 config 对象，可以被环境变量覆盖。</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>   <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"foo"</span><span class="token punctuation">,</span>  <span class="token property">"config"</span> <span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"port"</span> <span class="token operator">:</span> <span class="token string">"8080"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span> <span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"start"</span> <span class="token operator">:</span> <span class="token string">"node server.js"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中，npm_package_config_port 变量返回的是 8080。这个值可以用下面的方法覆盖。</p><pre><code>$ npm config set foo:port 80</code></pre><p>最后，env命令可以列出所有环境变量。</p><p>“env”: “env”</p><h4 id="2-10-npm-安装-git-上发布的包"><a href="#2-10-npm-安装-git-上发布的包" class="headerlink" title="2.10 npm 安装 git 上发布的包"></a>2.10 npm 安装 git 上发布的包</h4><pre><code># 这样适合安装公司内部的git服务器上的项目npm install git+https://git@github.com:lurongtao/gp-project.git# 或者以ssh的方式npm install git+ssh://git@github.com:lurongtao/gp-project.git</code></pre><h4 id="2-11-cross-env-使用"><a href="#2-11-cross-env-使用" class="headerlink" title="2.11 cross-env 使用"></a>2.11 cross-env 使用</h4><h5 id="2-11-1-cross-env是什么"><a href="#2-11-1-cross-env是什么" class="headerlink" title="2.11.1 cross-env是什么"></a>2.11.1 cross-env是什么</h5><p>运行跨平台设置和使用环境变量的脚本</p><h5 id="2-11-2-出现原因"><a href="#2-11-2-出现原因" class="headerlink" title="2.11.2 出现原因"></a>2.11.2 出现原因</h5><p>当您使用 NODE_ENV=production, 来设置环境变量时，大多数 Windows 命令提示将会阻塞(报错)。（异常是Windows上的Bash，它使用本机Bash。）换言之，Windows 不支持 NODE_ENV=production 的设置方式。</p><h5 id="2-11-3-解决"><a href="#2-11-3-解决" class="headerlink" title="2.11.3 解决"></a>2.11.3 解决</h5><p>cross-env 使得您可以使用单个命令，而不必担心为平台正确设置或使用环境变量。这个迷你的包(cross-env)能够提供一个设置环境变量的 scripts，让你能够以 Unix 方式设置环境变量，然后在 Windows 上也能兼容运行。</p><h5 id="2-11-4-安装"><a href="#2-11-4-安装" class="headerlink" title="2.11.4 安装"></a>2.11.4 安装</h5><p>npm install –save-dev cross-env</p><h5 id="2-11-5-使用"><a href="#2-11-5-使用" class="headerlink" title="2.11.5 使用"></a>2.11.5 使用</h5><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"cross-env NODE_ENV=production webpack --config build/webpack.config.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>NODE_ENV环境变量将由 cross-env 设置 打印 process.env.NODE_ENV === ‘production’</p><h3 id="3、NRM-npm-registry-manager"><a href="#3、NRM-npm-registry-manager" class="headerlink" title="3、NRM: npm registry manager"></a>3、NRM: npm registry manager</h3><h4 id="3-1-手工切换源"><a href="#3-1-手工切换源" class="headerlink" title="3.1 手工切换源"></a>3.1 手工切换源</h4><h5 id="3-1-1-查看当前源"><a href="#3-1-1-查看当前源" class="headerlink" title="3.1.1 查看当前源"></a>3.1.1 查看当前源</h5><pre><code>npm config get registry</code></pre><h5 id="3-1-2-切换淘宝源"><a href="#3-1-2-切换淘宝源" class="headerlink" title="3.1.2 切换淘宝源"></a>3.1.2 切换淘宝源</h5><pre><code>npm config set registry https://registry.npm.taobao.org</code></pre><h4 id="3-2-NRM-管理源"><a href="#3-2-NRM-管理源" class="headerlink" title="3.2 NRM 管理源"></a>3.2 NRM 管理源</h4><p>NRM (npm registry manager)是npm的镜像源管理工具，有时候国外资源太慢，使用这个就可以快速地在 npm 源间切换。</p><h5 id="3-2-1-安装-nrm"><a href="#3-2-1-安装-nrm" class="headerlink" title="3.2.1 安装 nrm"></a>3.2.1 安装 nrm</h5><p>在命令行执行命令，npm install -g nrm，全局安装nrm。</p><h5 id="3-2-2-使用-nrm"><a href="#3-2-2-使用-nrm" class="headerlink" title="3.2.2 使用 nrm"></a>3.2.2 使用 nrm</h5><p>执行命令 nrm ls 查看可选的源。 其中，带*的是当前使用的源，上面的输出表明当前源是官方源。</p><h5 id="3-2-3-切换-nrm"><a href="#3-2-3-切换-nrm" class="headerlink" title="3.2.3 切换 nrm"></a>3.2.3 切换 nrm</h5><p>如果要切换到taobao源，执行命令nrm use taobao。</p><h5 id="3-2-4-测试速度"><a href="#3-2-4-测试速度" class="headerlink" title="3.2.4 测试速度"></a>3.2.4 测试速度</h5><p>你还可以通过 nrm test 测试相应源的响应时间。</p><pre><code>nrm test</code></pre><h3 id="4、NPX-npm-package-extention"><a href="#4、NPX-npm-package-extention" class="headerlink" title="4、NPX: npm package extention"></a>4、NPX: npm package extention</h3><p>npm 从5.2版开始，增加了 npx 命令。它有很多用处，本文介绍该命令的主要使用场景。</p><p>Node 自带 npm 模块，所以可以直接使用 npx 命令。万一不能用，就要手动安装一下。</p><pre><code>$ npm install -g npx</code></pre><h4 id="4-1-调用项目安装的模块"><a href="#4-1-调用项目安装的模块" class="headerlink" title="4.1 调用项目安装的模块"></a>4.1 调用项目安装的模块</h4><p>npx 想要解决的主要问题，就是调用项目内部安装的模块。比如，项目内部安装了Mocha。</p><pre><code>$ npm install -D mocha</code></pre><p>一般来说，调用 Mocha ，只能在项目脚本和 package.json 的scripts字段里面，如果想在命令行下调用，必须像下面这样。</p><pre><code># 项目的根目录下执行$ node-modules/.bin/mocha --version</code></pre><p>npx 就是想解决这个问题，让项目内部安装的模块用起来更方便，只要像下面这样调用就行了。</p><pre><code>$ npx mocha --version</code></pre><p>npx 的原理很简单，就是运行的时候，会到node_modules/.bin路径和环境变量$PATH里面，检查命令是否存在。</p><p>由于 npx 会检查环境变量$PATH，所以系统命令也可以调用。</p><pre><code># 等同于 ls$ npx ls</code></pre><p>注意，Bash 内置的命令不在$PATH里面，所以不能用。比如，cd是 Bash 命令，因此就不能用npx cd。</p><h4 id="4-2-避免全局安装模块"><a href="#4-2-避免全局安装模块" class="headerlink" title="4.2 避免全局安装模块"></a>4.2 避免全局安装模块</h4><p>除了调用项目内部模块，npx 还能避免全局安装的模块。比如，create-react-app 这个模块是全局安装，npx 可以运行它，而且不进行全局安装。</p><pre><code>$ npx create-react-app my-react-app</code></pre><p>上面代码运行时，npx 将 create-react-app 下载到一个临时目录，使用以后再删除。所以，以后再次执行上面的命令，会重新下载 create-react-app。</p><p>注意，只要 npx 后面的模块无法在本地发现，就会下载同名模块。比如，本地没有安装http-server模块，下面的命令会自动下载该模块，在当前目录启动一个 Web 服务。</p><pre><code>$ npx http-server</code></pre><h4 id="4-3-–no-install-参数和-–ignore-existing-参数"><a href="#4-3-–no-install-参数和-–ignore-existing-参数" class="headerlink" title="4.3 –no-install 参数和 –ignore-existing 参数"></a>4.3 –no-install 参数和 –ignore-existing 参数</h4><p>如果想让 npx 强制使用本地模块，不下载远程模块，可以使用–no-install参数。如果本地不存在该模块，就会报错。</p><pre><code>$ npx --no-install http-server</code></pre><p>反过来，如果忽略本地的同名模块，强制安装使用远程模块，可以使用–ignore-existing参数。比如，本地已经安装了http-server，但还是想使用远程模块，就用这个参数。</p><pre><code>$ npx --ignore-existing http-server</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git笔记</title>
      <link href="/2021/10/16/git%E7%9B%B8%E5%85%B3/"/>
      <url>/2021/10/16/git%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="Git笔记"><a href="#Git笔记" class="headerlink" title="Git笔记"></a>Git笔记</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><p>Git是分布式管理仓库，而SVN是集中式（CVS）管理的代表。CVS是保存文件修改的历史记录（文件变更的列表），Git是记录文件及其修改的快照并存储相应索引。</p><h2 id="2-命令"><a href="#2-命令" class="headerlink" title="2. 命令"></a>2. 命令</h2><h3 id="2-1-安装配置"><a href="#2-1-安装配置" class="headerlink" title="2.1 安装配置"></a>2.1 安装配置</h3><h4 id="2-1-1-安装好Git后先全局配置用户信息：用户名、邮箱。如果在某个项目中需要使用其他用户，可以在项目根目录下去掉’global’单独配置。"><a href="#2-1-1-安装好Git后先全局配置用户信息：用户名、邮箱。如果在某个项目中需要使用其他用户，可以在项目根目录下去掉’global’单独配置。" class="headerlink" title="2.1.1 安装好Git后先全局配置用户信息：用户名、邮箱。如果在某个项目中需要使用其他用户，可以在项目根目录下去掉’global’单独配置。"></a>2.1.1 安装好Git后先全局配置用户信息：用户名、邮箱。如果在某个项目中需要使用其他用户，可以在项目根目录下去掉’global’单独配置。</h4><pre class="line-numbers language-shell"><code class="language-shell">git config --global user.name "John Doe"git config --global user.email johndoe@example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-1-2-检查配置信息"><a href="#2-1-2-检查配置信息" class="headerlink" title="2.1.2 检查配置信息"></a>2.1.2 检查配置信息</h4><p>如果想要检查你的配置，可以使用 git config –list 命令来列出所有 Git 当时能找到的配置  </p><pre class="line-numbers language-shell"><code class="language-shell">git config --list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你可能会看到重复的变量名，因为 Git 会从不同的文件中读取同一个配置（例如：/etc/gitconfig 与 ~/.gitconfig）。 这种情况下，Git 会使用它找到的每一个变量的最后一个配置。</p><p>你可以通过输入 git config &lt;key&gt;： 来检查 Git 的某一项配置<br>可以根据key修改以上的值：git config &lt;key&gt; &lt;value&gt;  </p><h2 id="1-把本地代码推到远程仓库"><a href="#1-把本地代码推到远程仓库" class="headerlink" title="1. 把本地代码推到远程仓库"></a>1. 把本地代码推到远程仓库</h2><p>1.1 上github新建仓库，不选新建README，懒得再解决冲突<br>1.2 （先进入项目文件夹）通过命令 git init 把这个目录变成git可以管理的仓库，记得创建.gitignore文件忽略上传某些文件。  </p><pre class="line-numbers language-shell"><code class="language-shell">git init  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1.3 把文件添加到版本库中，使用命令 git add .添加到暂存区里面去，不要忘记后面的小数点“.”，意为添加文件夹下的所有文件  </p><pre class="line-numbers language-shell"><code class="language-shell">git add .  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1.4 用命令 git commit告诉Git，把文件提交到仓库。引号内为提交说明  </p><pre class="line-numbers language-shell"><code class="language-shell">git commit -m 'first commit'  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1.5 关联到远程库  </p><pre class="line-numbers language-shell"><code class="language-shell">git remote add origin 你的远程库地址  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1.6 获取远程库与本地同步合并（如果远程库不为空必须做这一步，否则后面的提交会失败）  </p><pre class="line-numbers language-shell"><code class="language-shell">git pull --rebase origin master  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1.7 把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程。执行此命令后会要求输入用户名、密码，验证通过后即开始上传。  </p><pre class="line-numbers language-shell"><code class="language-shell">git push -u origin main  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6入门学习</title>
      <link href="/2021/10/11/es6%E5%88%9D%E5%A7%8B%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/10/11/es6%E5%88%9D%E5%A7%8B%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="ES6标准入门学习总结"><a href="#ES6标准入门学习总结" class="headerlink" title="ES6标准入门学习总结"></a>ES6标准入门学习总结</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><h2 id="2-let和const"><a href="#2-let和const" class="headerlink" title="2. let和const"></a>2. let和const</h2><p>const申明的常量只是在内存中的地址不变，指针不变。如果常量是个复杂类型，依然可以修改。如果把一个常量再次赋值给新变量，再覆盖新变量，常量是不会修改的。  </p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> age<span class="token punctuation">:</span> <span class="token number">29</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span>  a<span class="token punctuation">;</span>b<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// a.age === b.age === 30</span>b <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// a依然是{ age: 30 }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-变量解构赋值"><a href="#3-变量解构赋值" class="headerlink" title="3. 变量解构赋值"></a>3. 变量解构赋值</h2><h2 id="4-字符串扩展"><a href="#4-字符串扩展" class="headerlink" title="4. 字符串扩展"></a>4. 字符串扩展</h2><h3 id="4-1-ES6前常用的方法"><a href="#4-1-ES6前常用的方法" class="headerlink" title="4.1 ES6前常用的方法"></a>4.1 ES6前常用的方法</h3><p>4.1.1 String.fromCharCode(Unicode1,Unicode2,…,Unicoden)是String静态方法，参数是至少一个Unicode码，返回所有参数对应的字符组成的字符串。<br>4.1.2 stringObject.indexOf(searchvalue[,fromindex])默认从首字符开始检索，返回某个指定的字符串值在字符串中首次出现的位置，没有返回-1。<br>4.1.3 stringObject.lastIndexOf(searchvalue,fromindex)  </p><p>字符串新增方法  </p><p>正则扩展  </p><p>数值的扩展  </p><p>函数的扩展  </p><p>数组的扩展  </p><p>对象的扩展  </p><p>对象新增的方法  </p><p>Symbol  </p><p>set和map  </p><p>Proxy  </p><p>Reflect  </p><p>Promise  </p><p>Iterator和for…of  </p><p>Generatore  </p><p>Generator 的异步应用  </p><p>async  </p><p>class</p><p>  ES6之前实现一个类一般是通过工厂函数，修改原型链实现类的继承。ES6提供classAPI，使用extends继承。<br>  子类必须在constructor中首先调用super否则会报错(新建子类实例时)，因为子类自己的this对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，加上子类自己的实例属性和方法。如果不调用super方法，子类就得不到this对象。<br>  ES5 的继承，实质是先创造子类的实例对象this，然后再将父类的方法添加到this上面（Parent.apply(this)）。ES6 的继承机制完全不同，实质是先将父类实例对象的属性和方法，加到this上面（所以必须先调用super方法），然后再用子类的构造函数修改this<br>  super表示父类的构造函数，但是返回的是子类<br>  类中无this，只有实例才有</p><p>super指向父类（不是实例哦），constuctor默认返回的是实例，也可手动返回其他对象<br>如果父类constructor有参数，子类必须调用super，并且传入指定参数：既子类的constructor的参数必须包括父类constructor的参数，且子类必须调用super传入这些参数  </p><h2 id="22-class的继承"><a href="#22-class的继承" class="headerlink" title="22. class的继承"></a>22. class的继承</h2><p>  class语法本身是es5构造函数的语法上塘，定义的类的方法(非静态方法)本身是在原型链上添加方法  </p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token function">somemethord</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">othermethord</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 等价于</span>Object<span class="token punctuation">.</span><span class="token function">asign</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token function">somemethord</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">othermethord</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  constructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有constructor方法，如果没有显式定义，一个空的constructor方法会被默认添加。constructor默认返回当前类的实例(this)，也可以返回指定上下文</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 等价于</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  如果有父类，还必须在constructor中调用super  </p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  在new一个类时，先调用constructor方法，如果是子类，必须在constructor内先调用super(接受全部父类需要的参数)，先创建父类上下文，再创建子类上下文<br>  class内的方法不需要加function,可以在constructor中绑定this或使用箭头函数，否则经过赋值后的方法会改变this  </p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token punctuation">{</span>say<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Uncaught TypeError: Cannot read property 'firstname' of undefined</span><span class="token keyword">const</span> <span class="token punctuation">{</span>text<span class="token punctuation">}</span> <span class="token operator">=</span> Parent<span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Uncaught TypeError: Cannot read property 'firstname' of undefined</span><span class="token comment" spellcheck="true">// 修改之后</span><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>say <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>say<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    say <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> username <span class="token operator">=</span> <span class="token string">'nothing'</span>    <span class="token keyword">static</span> text1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token punctuation">{</span>say<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'Parent'</span><span class="token keyword">const</span> <span class="token punctuation">{</span>text<span class="token punctuation">}</span> <span class="token operator">=</span> Parent<span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'nothing'wqwqsdfsdf</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  第二种情况，super作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。</p><p>module  </p><p>module的加载实现  </p><p>编程风格  </p><p>读懂规格  </p><p>异步遍历器  </p><p>ArrayBuffer  </p><p>Decorator</p><p>作用域  </p><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p>在函数、模块外申明的变量全局都可以访问。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// inde.html</span><span class="token comment" spellcheck="true">// 重点在type，如果是module，这段脚本就是es6module</span><span class="token operator">...</span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"./index.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">...</span><span class="token comment" spellcheck="true">// index.js</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 全局作用域</span>b<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用效果如上，他实际上是挂到window上，可以被删除，但是a却不能</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数-局部作用域"><a href="#函数-局部作用域" class="headerlink" title="函数/局部作用域"></a>函数/局部作用域</h3><p>在函数内申明的变量只能在函数内访问（可以访问上一级变量；module也是函数）</p><h3 id="动态作用域"><a href="#动态作用域" class="headerlink" title="动态作用域"></a>动态作用域</h3><p>this  </p><h3 id="块状作用域"><a href="#块状作用域" class="headerlink" title="块状作用域"></a>块状作用域</h3><p>{}中的代码；let、const</p><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>for…in…针对object（array是object，arr.name=122,也会被遍历）,for针对array，for…of…都可以  </p><h2 id="帮你彻底搞懂JS中的prototype、-proto-与constructor（图解）"><a href="#帮你彻底搞懂JS中的prototype、-proto-与constructor（图解）" class="headerlink" title="帮你彻底搞懂JS中的prototype、__proto__与constructor（图解）"></a><a href="https://blog.csdn.net/cc18868876837/article/details/81211729">帮你彻底搞懂JS中的prototype、__proto__与constructor（图解）</a></h2><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>普通函数的this，谁调用只想谁，非严格模式找不到就指向window。箭头函数是绑定的父级的作用域，如果父级也是箭头函数，那就继续晚上找。obj={fn(){}},这是obj={fn:fucntion(){}}的简写，而不是箭头函数。  </p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6入门学习</title>
      <link href="/2021/10/08/%E6%AD%A3%E5%88%99%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/10/08/%E6%AD%A3%E5%88%99%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="RegExp"><a href="#RegExp" class="headerlink" title="RegExp"></a>RegExp</h1><p><a href="https://tool.oschina.net/uploads/apidocs/jquery/regexp.html">正则表达式手册</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">MDN</a></p><p><a href="https://juejin.cn/post/6844903487155732494">JS 正则表达式完整教程（略长）</a></p><p><a href="https://cloud.tencent.com/developer/chapter/13619">腾讯云文档</a></p><h2 id="1-1-匹配标志"><a href="#1-1-匹配标志" class="headerlink" title="1.1 匹配标志"></a>1.1 匹配标志</h2><table><thead><tr><th>标志</th><th>描述</th></tr></thead><tbody><tr><td>g</td><td>全局搜索</td></tr><tr><td>m</td><td>多行匹配</td></tr><tr><td>i</td><td>忽略大小写</td></tr><tr><td>y</td><td>执行“粘性(<code>sticky</code>)”搜索,匹配从目标字符串的当前位置开始(lastIndex)</td></tr><tr><td>s</td><td>允许<code>.</code> 匹配换行符</td></tr><tr><td>u</td><td>使用 unicode 码的模式进行匹配</td></tr></tbody></table><ul><li>正则对象都有个 lastIndex 属性，只读（但是 js 没有严格语法限制，可以修改），只有正则使用了 global 标志才会在匹配成功是修改 lastIndex 的值，失败置 0。使用 sticky 标志，只会从正则的 lastIndex 开始匹配，但是不会修改它的值。</li><li>多行匹配只有在字符串中有换行符时才有意义，有换行符时^、$表示每行开头结尾，如果不使用^或$那么也没必要使用 m 标志。</li><li>除了 i，其他基本没使用过。</li></ul><h2 id="1-2-匹配模式"><a href="#1-2-匹配模式" class="headerlink" title="1.2 匹配模式"></a>1.2 匹配模式</h2><p>匹配字符或者匹配位置。</p><h2 id="1-3-RegExp-和-String-的一些常用方法"><a href="#1-3-RegExp-和-String-的一些常用方法" class="headerlink" title="1.3 RegExp 和 String 的一些常用方法"></a>1.3 RegExp 和 String 的一些常用方法</h2><p>String：</p><blockquote><p>replace<br>search<br>match<br>matchAll<br>split</p></blockquote><p>RegExp：</p><blockquote><p>test<br>exec<br>compile</p></blockquote><p>正则实际匹配结果看 match 和 matchAll，test 只是判断字符串是否满足正则要求。<br>search 相当于 indexOf 于 Array，找到满足正则的第一个字符集首字符位置，否则返回-1。<br>exec 开启 g 或 y 每次调用会修改 lastIndex。<br>matchAll 返回的是迭代器。</p><p>重点说 replace：str.replace(regexp|substr, newSubStr|function)</p><blockquote><p>第一个参数：可以使正则，会处理全部匹配的字符。可以使字符串，只处理第一个相等字符。<br>第二个参数：可以使特殊字符串，$&amp;表示被整个正则匹配到的字符，可以修饰字符串；$n 表示每个子表达式匹配的字符，可以重新组合或者提取字符串（子表达式没匹配到的会被忽略）；$`、$‘表示匹配字符左边、右边全部类容，可以修饰字符串。可以使函数，参数是[match 的字符，…子表达式匹配的结果,位置，输入值]，返回值替换匹配字符，如果开启 g 或 m 会多次调用。</p></blockquote><table><thead><tr><th>变量名</th><th>代表值</th></tr></thead><tbody><tr><td>$$</td><td>插入一个 “$”</td></tr></tbody></table><h2 id="1-4-问题"><a href="#1-4-问题" class="headerlink" title="1.4 问题"></a>1.4 问题</h2><ol><li><p>一道面试题<br>![一道面试题][reg_g]</p><details>  <summary><font color="#56b6a7">答案</font></summary>  <pre><code>  truetruefalsetrue// 在设置g或y模式，RegExp 对象是有状态的。他们会将上次成功匹配后的位置记录在 lastIndex 属性中。// 全局匹配会记录上次匹配到的位置，然后下一次从上一次的位置开始匹配，失败时会重置lastIndex为0。  </code></pre></details></li><li><p>一道面试题：使用正则实现 String.trim()</p><details>  <summary><font color="#56b6a7">答案</font></summary>  <pre><code>  String.prototype.trim=function(){return this.replace(/^\s+|\s+$/g,"")}  </code></pre></details></li><li><p>实现一个正则：不能以空白字符开头和结束，至少一个字符</p><details>  <summary><font color="#56b6a7">我的</font></summary>  <pre><code>   /^\S(.*\S)?$/ /^\S{1}$|^\S+.*\S+$/g  </code></pre></details></li><li><p>一道面试题：使用正则实现 String.trim()</p></li><li><p>不同系统换行符的区：windows：\n\r，mac：\r，Unix：\n。不同系统处理文件时要注意。</p></li><li><p>表达式里，有些特殊符号要在前面加\转义。比如：根据一个字符串生成一个正则，就需要转义正则里的全部特殊符号，不然直接生成正则是按转移后的字符生成的。</p></li><li><p>讲解两个正则：</p></li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 手机号</span><span class="token regex">/^((\+|00)86)?1((3[\d])|(4[5,6,7,9])|(5[0-3,5-9])|(6[5-7])|(7[0-8])|(8[\d])|(9[1,8,9]))\d{8}$/</span><span class="token comment" spellcheck="true">// 密码强度校验：最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符</span><span class="token regex">/^.*(?=.{6,})(?=.*\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&amp;*? ]).*$/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>1.5 总结</p><ol><li>与：/ppp/，或：/p|p|p/，非：/[^ppp]/。</li><li>正则终究匹配的是字符或者位置。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端总结</title>
      <link href="/2021/10/05/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E4%B8%80%E4%BA%9B/"/>
      <url>/2021/10/05/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E4%B8%80%E4%BA%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="H5移动端开发总结"><a href="#H5移动端开发总结" class="headerlink" title="H5移动端开发总结"></a>H5移动端开发总结</h1><h4 id="移动端一般会为了美观给html、body加统一样式，再用iScorll、betterScroll等"><a href="#移动端一般会为了美观给html、body加统一样式，再用iScorll、betterScroll等" class="headerlink" title="移动端一般会为了美观给html、body加统一样式，再用iScorll、betterScroll等"></a>移动端一般会为了美观给html、body加统一样式，再用iScorll、betterScroll等</h4><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">html,body</span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这有个问题：body或者html依旧不是相对屏幕固定的，上下滑动会造成背景图位移等(Safari)，以下可解决：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">html,body</span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span>fixed<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是在移动端输入时，软键盘弹起解决页面被隐藏或者被顶起时，会有副作用。</p><h4 id="适配一般选择动态计算根字体尺寸，rem为单位。当心有些安卓机型会根据系统设置字体大小修改webview的根字体大小，一般找原生端设置"><a href="#适配一般选择动态计算根字体尺寸，rem为单位。当心有些安卓机型会根据系统设置字体大小修改webview的根字体大小，一般找原生端设置" class="headerlink" title="适配一般选择动态计算根字体尺寸，rem为单位。当心有些安卓机型会根据系统设置字体大小修改webview的根字体大小，一般找原生端设置"></a>适配一般选择动态计算根字体尺寸，rem为单位。当心有些安卓机型会根据系统设置字体大小修改webview的根字体大小，一般找原生端设置</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 注意这里是100倍，因为一般除不尽，多取几位缩小误差。所以应该有个css单位变量是htmlFontsize*1/100</span>        <span class="token comment" spellcheck="true">// spa完全可以放到body尾部</span>        <span class="token keyword">var</span> htmlFontSize <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth <span class="token operator">/</span> <span class="token number">375</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> bodyFontSize <span class="token operator">=</span> <span class="token string">'16px'</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> styleDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        styleDom<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'html{font-size:'</span> <span class="token operator">+</span> htmlFontSize <span class="token operator">+</span> <span class="token string">'!important;}body{font-size:'</span> <span class="token operator">+</span> bodyFontSize <span class="token operator">+</span> <span class="token string">'!important;}'</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'head'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>styleDom<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="禁止缩放和双击放大（包括Safari）"><a href="#禁止缩放和双击放大（包括Safari）" class="headerlink" title="禁止缩放和双击放大（包括Safari）"></a>禁止缩放和双击放大（包括Safari）</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> lastTouchEnd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchstart'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>touches<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchend'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> lastTouchEnd <span class="token operator">&lt;=</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    lastTouchEnd <span class="token operator">=</span> now<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'gesturestart'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'dblclick'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Safari滚动到动态列表时滑动出问题"><a href="#Safari滚动到动态列表时滑动出问题" class="headerlink" title="Safari滚动到动态列表时滑动出问题"></a>Safari滚动到动态列表时滑动出问题</h4><p>动态创建的列表高度没有预设高度，在动态创建列表（ajax等）后，浏览器没有计算好，导致滚动失败。解决办法：设置需要滚动的容器的(min-)height，撑起容器。  </p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js高阶劝退</title>
      <link href="/2021/09/28/%E5%8A%9D%E9%80%80%E6%8C%87%E5%8D%97/"/>
      <url>/2021/09/28/%E5%8A%9D%E9%80%80%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.ruanyifeng.com/blog/2012/10/javascript_module.html">Javascript模块化编程（一）：模块的写法</a><br><a href="https://juejin.im/post/5aaa37c8f265da23945f365c">前端模块化：CommonJS,AMD,CMD,ES6</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li><p>图片分为banner（大图）、普通图片（需要压缩）、小图和图标(可以制作雪碧图、base64等)，所以都需要单独建目录针对处理。</p></li><li><p>样式分为公共和模块独有，公共部分又分common.less、variable.less、reset.less，其中common.less又可以单独拆分：比如常见的容器、整体布局可以分为一类，重置UI框架的样式可以分为一类。然后按序引入一个文件。variable.less可以使用插件。  </p></li><li><p>API可以根据需要分为url和method，配制成对象。常用的也可以封装成方法。  </p></li><li><p>项目中使用的正则全部统一管理，表单验证规则、提示语等根据UI框架设置成json。  </p></li><li><p>常用方法放到util目录。  </p></li><li><p>assets：静态文件目录，可以使用webpack’卓一些处理；static：静态文件，不用做处理；  </p></li><li><p>常用的一些前后端对接的变量：数据字典，单独存储。</p></li><li><p>先讲清楚需求，客户端兼容性，移动端还是PC端，客户端对数据持久化的程度要求，路由切换动效，全局或者局部loading，默认字体及其大小颜色、主题色等。后台数据缺省值，数据模型、名称尽量统一。</p></li><li><p>写详细设计：需求文档中的需求说明、原型、前端交互及数据交互的流程图、接口文档（请求体：报文、method、request，响应体：报文、data、status、message），需求及原型评审、UI评审、详设评审、接口文档评审。  </p></li><li><p>组件一般只解决交互、数据传递、数据通用转换等需求，页面才处理数据请求分发等业务。</p></li><li><p>约定大于大于配置，不要在某些问题上纠结，好的习惯变成约定以配置实现。  </p></li><li><p>与后台约定好接口的status、message，数据不要嵌套太深。  </p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端小白记</title>
      <link href="/2021/09/27/%E5%89%8D%E7%AB%AF%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/09/27/%E5%89%8D%E7%AB%AF%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML篇"><a href="#HTML篇" class="headerlink" title="HTML篇"></a>HTML篇</h1><p>+/*</p><h3 id="1-html概念"><a href="#1-html概念" class="headerlink" title="1.html概念/"></a>1.html概念/</h3><ul><li>html全称HyperText Markup Language,翻译为超文本标记语言,它不是一种编程语言,是一种描述性的标记语言,用于描述超文本内容的显示方式,比如字体,颜色,大小等</li><li>超文本 : 音频,视频,图片等称为超文本</li><li>标记:  &lt;一个英文字母或者单词&gt; 这种类型称之为标记</li><li><strong>作用</strong> : html是负责描述文档语义的语言</li><li><strong>注意</strong> : html语言不是编程语言(有编译过程),而是一个标记语言(没有编译过程),HTML页面直接由浏览器解析执行</li><li>html是一个纯文本文件(也就是txt文件改名而成),用一些标签来描述文字的语义,这些标签在浏览器中是看不到的,所以称为超文本,所以就是超文本语言了</li></ul><h3 id="2-html的网络术语"><a href="#2-html的网络术语" class="headerlink" title="2.html的网络术语"></a>2.html的网络术语</h3><ul><li>网页 ; 由各种标记组成的一个页面就是网页</li><li>主页(首页) ; 一个网站的起始页面或者导航页面</li><li>标记: &lt; p &gt; 称为开始标记,&lt;/ p&gt;称为结束标记,也叫标签,每个标签都规定好了特殊的含义</li><li>元素: 标记之间的内容就叫做元素</li><li>属性,标记中对没一个标签所做的辅助信息</li></ul><h3 id="3-html规范"><a href="#3-html规范" class="headerlink" title="3.html规范"></a>3.html规范</h3><ul><li>所有的标记都要正确的嵌套,不能交叉嵌套,就是一个标记的开始标记和结束标记之间不能存在单独的其他开始标记或结束标记,也就是不能交叉嵌套</li><li>所有标记必须小写</li><li>所有标记必须关闭<ul><li>双边标记 : &lt; span &gt;&lt; /span &gt;</li><li>单边标记 : <code>&lt;br&gt;</code> 转成 <code>&lt;br /&gt;</code> <code>&lt;hr&gt;</code> 转成 <code>&lt;hr /&gt;</code>，还有<code>&lt;img src=“URL” /&gt;</code></li><li>所有属性必须加引号&lt; h1 id = “head” &gt; &lt; /h1 &gt;</li><li>所有属性必须有值</li></ul></li></ul><h3 id="4-htmL的基本语法特征"><a href="#4-htmL的基本语法特征" class="headerlink" title="4.htmL的基本语法特征"></a>4.htmL的基本语法特征</h3><ul><li>对换行不敏感,对tab不敏感<ul><li>html只在乎标签的嵌套结构,嵌套的关系,换行和tab对页面结构不影响</li></ul></li><li>空白折叠现象<ul><li>html中所有的文字中间,如果有空格,换行,tab都将被折叠为一个空格显示</li></ul></li><li>标签严格封闭</li></ul><h3 id="5-html结构"><a href="#5-html结构" class="headerlink" title="5.html结构"></a>5.html结构</h3><ul><li><p>新建html文件,输入html:5 或者 ! 按下tab键后,自动生成默认的代码,如下</p><ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>文档声明头</p><ul><li>任何的标准的html页面,第一行一定是一个以&lt; !DOCTYPE html &gt;开头的一行,这就是文档声明头,DocType Declaration,简称DTD,此标签可以告知浏览器文档使用哪种html或xhtml规范</li></ul></li><li><p>头标签</p><ul><li><p>head标签都放在头部分之间,这里包含了&lt; title &gt; ,&lt; meta &gt;,&lt; link &gt; ,&lt; style &gt;</p><ul><li><p>&lt; title &gt; :指整个网页的标题,显示在浏览器的最上边</p><ul><li>主要是告诉用户和搜索引擎这个网页的主要内容是什么,搜索引擎可以通过网页标题,迅速的判断出当前网页的主题</li></ul></li><li><p>&lt; meta &gt; :提供有关页面的基本信息</p><ul><li><p>严肃可提供有关页面的元信息(mata-information),针对搜索引擎和更新频度的关键词</p></li><li><p>提供的信息用户不可见,分别有两个属性</p><ul><li><p>http_equiv属性</p><ul><li><p>它用来向浏览器传达一些有用的信息,帮助浏览器正确的显示网页的内容,与之对应的属性值为content,content中的内容就是各个参数的变量值</p></li><li><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--重定向 2秒后跳转到对应的网址，注意分号--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>refresh<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2;URL<span class="token punctuation">=</span>http://www.luffycity.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--指定文档的内容类型和编码类型 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--告诉IE浏览器以最高级模式渲染当前网页--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><pre><code>&lt;meta http-equiv="x-ua-compatible" content="IE=edge"&gt;</code></pre></li><li><p>name属性</p><ul><li><p>主要用于页面的关键字描述,写给搜索引擎看的,关键字之间可以用逗号隔开,与之对应的属性值为content,content中的内容主要是便于搜索引擎机器人查找信息和分类信息用的</p></li><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>网易,邮箱,游戏,新闻,体育,娱乐,女性,亚运,论坛,短信<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>这些关键词就是告诉搜索引擎,这个网页是干嘛的,能够提高搜索命中率,让别人能都通过搜索引擎搜索到</li></ul></li><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>网易是中国领先的互联网技术公司，为用户提供免费邮箱、游戏、搜索引擎服务，开设新闻、娱乐、体育等30多个内容频道，及博客、视频、论坛等互动交流，网聚人的力量。<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>只要设置Description页面描述,那么百度搜索结果,就能显示这些语句,这个技术叫做SEO(search engine optimization,搜索引擎优化</li></ul></li><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>viewport</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>上面这个标签,是让我们网页支持移动端,移动设备优先</li></ul></li></ul></li></ul></li><li><p>&lt; link &gt; :定义文档与外部资源的关系</p></li><li><p>&lt; style &gt; : 定义内部样式表与网页的关系</p></li></ul></li></ul></li><li><p>html颜色显示</p><ul><li>纯单词表示:red,green,blue,orange,gray等</li><li>十进制表示: rgb(255,0,0)</li><li>16进制表示 : #FF0000</li></ul></li></ul><h3 id="6-html标签"><a href="#6-html标签" class="headerlink" title="6.html标签"></a>6.html标签</h3><ul><li><p>标签分类</p></li><li><p><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\1565165927495.png" alt="1565165927495"></p><ul><li>html标签又叫html元素,它分为块级元素和内联元素(行内元素),都是html规范中的概念</li></ul></li><li><p>块级元素</p><ul><li><p>块级元素是指本身属性为display:block的元素,因为它自身的特点我们通常使用块级元素来进行大布局(大结构)的搭建</p><ul><li>特点</li><li>独占一行,每个块级元素都会从新的一行重新开始,从上到下排布<ul><li>可以和直接控制宽度,高度以及盒子模型相关的css属性</li><li>在不设置宽度的情况下,块级元素的宽度是它父级元素内容的宽度</li><li>在不设置高度的情况下,块级元素的高度是它本身内容的高度</li></ul></li></ul></li><li><p>内联元素</p><ul><li><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\1565165950629.png" alt="1565165950629"></li></ul></li><li><p>内联元素是指本身属性为display:inlline;的元素,他因为自身的特点,我们通常使用内联元素来进行文字,小图标(小结构)的搭建</p><ul><li>特点</li></ul></li><li><p>和其他内联元素从左到右一行显示</p><ul><li>不能直接控制宽度,高度以及盒子模型的相关css属性,但是直接设置内外边距的左右值是可以的</li><li>内联元素的宽度是由本身内容的大小决定的<ul><li>内联元素只能容纳文本或者其他内联元素(不要再内联元素中嵌套块级元素)</li></ul></li></ul></li></ul></li><li><p>文本及和容器级</p><ul><li>标签可分为文本级和容器级<ul><li>文本级标签:p,span,a,b,i,u,em</li><li>容器级 : dic,h系列,li,dt,dd</li></ul></li><li>文本级标签的意思是标签中只可以放文本,不可以放其他内容,出了p之外,所有的文本级标签都是行内元素,p是个文本及,但是个块级元素</li><li>p里面只能放文本,图片,表单元素,p里面不能放h和ul,p里面也不能放p</li></ul></li></ul><h3 id="7-html中的特殊字符"><a href="#7-html中的特殊字符" class="headerlink" title="7.html中的特殊字符"></a>7.html中的特殊字符</h3><ul><li><code>&amp;nbsp;</code>：空格 （non-breaking spacing，不断打空格）</li><li><code>&amp;lt;</code>：小于号（less than）</li><li><code>&amp;gt;</code>：大于号（greater than）</li><li><code>&amp;amp;</code>：符号<code>&amp;</code></li><li><code>&amp;quot;</code>：双引号</li><li><code>&amp;apos;</code>：单引号</li><li><code>&amp;copy;</code>：版权<code>©</code></li><li><code>&amp;trade;</code>：商标<code>™</code></li></ul><h2 id="HTML块级元素"><a href="#HTML块级元素" class="headerlink" title="HTML块级元素"></a>HTML块级元素</h2><h3 id="1-h1-h6"><a href="#1-h1-h6" class="headerlink" title="1.h1 - h6"></a>1.h1 - h6</h3><ul><li><p>标题使用&lt; h1 &gt; 至 &lt; h6 &gt;标签进行定义.具有align属性,属性值可以使left.center,right</p></li><li><pre class="line-numbers language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>一级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>二级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>三级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>四级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span>五级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span>六级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-列表"><a href="#2-列表" class="headerlink" title="2.列表"></a>2.列表</h3><ul><li><p>列表分为三种,有序列表ol,无序列表和定义类表dl,其中ol和ul必须结合li标签使用,而dl则必须结合dt,dd使用</p></li><li><p>ol ordered list    有序列表</p><ul><li>li list item，列表项</li></ul></li><li><p>ul unordered list 无序列表</p><ul><li>li list item，列表项</li></ul></li><li><p>dl definition list  定义列表</p></li><li><ul><li><code>&lt;dt&gt;</code>：definition title 列表的标题，这个标签是必须的</li><li><code>&lt;dd&gt;</code>：definition description 列表的列表项，如果不需要它，可以不加</li></ul></li><li><p>li不能单独存在,必须包裹在ul或者dl中</p></li></ul><h3 id="3-排版标签"><a href="#3-排版标签" class="headerlink" title="3.排版标签"></a>3.排版标签</h3><ul><li>段落标签<p></p></li><li>属性<ul><li>align = “属性值” : 对齐方式包括left,right,center</li><li>HTMl是分等级的,html将所有的标签分为两种<ul><li>文本级标签,p,span,a,b,i,u,em.文本级标签里只能放文字,图片,表单元素</li><li>容器级标签: div,h系列,li,dt,dd,容器级标签里可以放任何东西</li></ul></li></ul></li><li>div<ul><li>div和span是非常重要的标签1,div的语义是division”分割”</li><li>div : 把标签中的内容作为一个块儿来对待,必须单独占一行</li><li>div标签的属性:<ul><li>align = “属性值” ; 设置块儿的位置,属性值可以选择 ; left,right,center</li></ul></li><li>单独在网页中插入这个元素,不会对页面产生影响,这两个元素是撞门为定义css样式而生的,或者说,DIV+CSS可以实现各种样式,</li><li>div+css,div标签负责布局,负责结构,负责分块,css负责样式</li></ul></li></ul><h3 id="4-hr"><a href="#4-hr" class="headerlink" title="4.hr"></a>4.hr</h3><ul><li>水平分割线,可以在视觉上将文档分隔成各个部分</li></ul><h3 id="5-内容居中标签-lt-center-gt"><a href="#5-内容居中标签-lt-center-gt" class="headerlink" title="5.内容居中标签< center >"></a>5.内容居中标签&lt; center &gt;</h3><ul><li>此时center代表的是一个标签,不是一个属性值,只要是在这个标签里面内容,都会居于浏览器的中间</li><li>在H5中不建议使用center标签</li></ul><h3 id="6-预定义-预格式化-标签-lt-pre-gt"><a href="#6-预定义-预格式化-标签-lt-pre-gt" class="headerlink" title="6.预定义(预格式化)标签< pre >"></a>6.预定义(预格式化)标签&lt; pre &gt;</h3><ul><li>含义:将保留其中所有的空白字符(空格,换行符),原封不动的输出结果(高速浏览器不要忽略空格和空行)</li><li>说明: 真正排网页的过程中,&lt; pre &gt; 标签基本不用,但在PHP中用于打印一个数组时使用</li></ul><h3 id="7-table"><a href="#7-table" class="headerlink" title="7.table"></a>7.table</h3><ul><li><p>一个 表格标签用&lt; table &gt;表示,由&lt; table &gt; 由表头&lt; thead &gt;和表格内容&lt; tbody &gt;组成的.其中每一行是&lt; tr &gt;,每一格是由, &lt; td &gt;组成的</p></li><li><p>表格属性</p><ul><li>boder:边框&lt;像素为单位</li><li>style = “boder-collapse:collapse:”  :  单元格的线和表格边框线合并</li><li>width : 宽度,像素为单位</li><li>height : 高度,像素为单位</li><li>bordercolor : 表格的边框颜色</li><li>align:表格的水平对齐方式,属性值可以填 ;left right center<ul><li>这里的是水平对齐方式,不是表格内容的对齐方式,要想设置表格内容对齐方式,需要在&lt; td &gt;中添加</li></ul></li><li>cellpadding : 单元格内容到边的距离,像素为单位,默认情况下,文字是紧挨着左边那条线的,即默认情况下的值为0,默认是以到四边的左边那条线,如果设置属性dir = “rtl”,那么就是指内容到右边的那条线的距离</li><li>cellspacing : 单元格之间的距离(外边框),</li><li>bgcolor = “#99ccff” : 表格的背景颜色</li><li>backgrand = “路径src /“ : 背景图片<ul><li>图片的优先级大于颜色的优先级</li></ul></li></ul><h3 id="8-table行"><a href="#8-table行" class="headerlink" title="8.table行"></a>8.table行</h3><ul><li>dir ; 公有属性,设置这一行单元格的排列方式,可以取值,ltr : 从左到右(left 头right),rtl反之</li><li>bgcolor : 这一行单元格的背景色,没有backgrand属性,要想设置只能通过css实现</li><li>height : 一行的高度</li><li>align = “center” : 一行的内容水平居中显示,取值 : left ,center ,right</li><li>valign =”center” ;一行的内容垂直居中,取值 : top,middle,botto</li></ul><h3 id="9-table-单元格"><a href="#9-table-单元格" class="headerlink" title="9.table 单元格"></a>9.table 单元格</h3><ul><li>属性<ul><li>align ; 内容的横向对齐方式,left right center</li><li>valign : 纵向,top,middle bottom</li><li>width 绝对值或者相对值(%)</li><li>height : 单元格高低</li><li>bgcolor : 单元格背景色</li><li>&lt; th &gt;:加粗的单元格,相当于&lt; td &gt; +  &lt; b &gt;<ul><li>属性通&lt; td &gt; 标签</li></ul></li><li>&lt; caption &gt; 表格的标题,使用时和tr标签并列</li><li>&lt; thead &gt; ,&lt; thead &gt;,&lt; tfoot &gt;,决定表格的显示顺序,默认按照代码从上到下显示<ul><li>在表格内容非常大的时候,设置这三个属性属性可以变获取边显示,如果不写,则必须等表格的内容全部从服务器获取完成才能显示</li></ul></li></ul></li><li>操作<ul><li>colspan : 横向合并,colspan = “2”表示在当前单元格在水平方向上要占据两个单元的位置</li><li>rowspan ; 纵向合并,例如rowspan = “2”,表示在当前单元格在垂直方向上要占据两个单元格的位置</li></ul></li></ul></li></ul><h3 id="8-表单"><a href="#8-表单" class="headerlink" title="8.表单"></a>8.表单</h3><ul><li><p>表单功能</p><ul><li>表单用于向服务器传输数据,从而实现用户与web服务器的交互</li><li>表单能够包含input系列标签,比如文本字段,复选框,单选框,提交按钮等等</li><li>表单还能把汗textrea ,select,fledset,label标签</li></ul></li><li><p>表单属性</p><ul><li><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>accept-charset</td><td>规定在被提交表单中使用的字符集（默认：页面字符集）。</td></tr><tr><td>action</td><td>规定向何处提交表单的地址（URL）（提交页面）。</td></tr><tr><td>autocomplete</td><td>规定浏览器应该自动完成表单（默认：开启）。</td></tr><tr><td>enctype</td><td>规定被提交数据的编码（默认：url-encoded）。</td></tr><tr><td>method</td><td>规定在提交表单时所用的 HTTP 方法（默认：GET）。</td></tr><tr><td>name</td><td>规定识别表单的名称（对于 DOM 使用：document.forms.name）。</td></tr><tr><td>novalidate</td><td>规定浏览器不验证表单。</td></tr><tr><td>target</td><td>规定 action 属性中地址的目标（默认：_self）。</td></tr></tbody></table></li></ul></li><li><p>表单元素</p><ul><li>基本概念<ul><li>html表单是html元素中较为复杂的部分,表单往往和脚本,动态页面,数据处理等功能相结合</li><li>一般用收集用户的输入信息</li><li>表单工作原理:<ul><li>访问者在浏览有表单的网页时,可填写必须的信息,然后按某个按钮提交,这些信息通过intert传送到服务器上</li><li>服务器专门的程序对这些数据进行处理,有错误信息会返回错误信息,并要求纠正错误,当数据完整无误后,服务器反馈一个输入完成的信息</li></ul></li></ul></li></ul></li><li><p>属性</p><ul><li><p>name:表单的名称,用于js来操作或控制表单时使用,就想分组一样,可以重复</p></li><li><p>id: 表单的名称,用于js来操作或控制表单时使用,html中的唯一标识,不可重复</p></li><li><p>acton ; 指定表单数据的处理程序,一般是PHP,如action = “login.php”</p></li><li><p>method: 表单数据的提交方式,一般取值get(默认)和post</p><ul><li>get 和 post 的区别<ul><li>get将表单数据以”name=value”的形式追加到action指定的处理程序后面,两者之间用”?”隔开,每一个表单的”name=value”间用”&amp;”隔开<ul><li>特点 : 只适合提交少量的信息,并不天安全(不要提交敏感数据),提交的类型只限于</li></ul></li><li>post将表单数据直接发送(隐藏)到action指定的处理程序,post发送的数据不可见,action指定的处理程序可以获取到表单数据<ul><li>特点 : 可以提交海量信息,相对来说比较安全,提交的数据格式是多样的(word,Excel,rar,img等)</li></ul></li></ul></li></ul></li><li><p>Enctype</p><ul><li>表单数据的编码方式(加密方式)取值可以是 : application/x-www-form-urlencoded、multipart/form-data。Enctype只能在POST方式下使用。</li><li>application/x-www-form-urlencoded、multipart/form-data。Enctype只能在POST方式下使用。</li></ul></li><li><p>&lt; inpt &gt; 输入标签(文本框)(内联标签)</p><ul><li><table><thead><tr><th>type属性值</th><th>表现形式</th><th>对应代码</th></tr></thead><tbody><tr><td>text</td><td>单行输入文本</td><td>&lt;input type=text” /&gt;</td></tr><tr><td>password</td><td>密码输入框（不显示明文）</td><td><input type="password"></td></tr><tr><td>date</td><td>日期输入框</td><td><input type="date"></td></tr><tr><td>checkbox</td><td>复选框</td><td><input type="checkbox" checked="checked" name="x"></td></tr><tr><td>radio</td><td>单选框</td><td><input type="radio" name="x"></td></tr><tr><td>submit</td><td>提交按钮</td><td><input type="submit" value="提交"> #发送浏览器上输入标签中的内容，配合form表单使用，页面会刷新</td></tr><tr><td>reset</td><td>重置按钮</td><td><input type="reset" value="重置">  #页面不会刷新，将所有输入的内容清空</td></tr><tr><td>button</td><td>普通按钮</td><td><input type="button" value="普通按钮"></td></tr><tr><td>hidden</td><td>隐藏输入框</td><td><input type="hidden"></td></tr><tr><td>file</td><td>文本选择框</td><td><input type="file"></td></tr></tbody></table></li><li><p>type = “属性值”,文本类型,属性值可以是:</p><ul><li>text(默认)</li><li>password ; 密码类型</li><li>radio: 单选按钮,名字相同的按钮作为一组进行单选(单选按钮,天生是不能互斥的,如果想要互斥,必须要有相同的name属性,</li><li>checkbox : 多选按钮,名字相同的按钮作为一组选择</li><li>checked ; 将单选或者多选按钮默认处于选中状态</li><li>hidden : 隐藏框,在表单中包含不希望用户看见的信息</li><li>button ; 普通的按钮,结合js代码进行使用</li><li>submit ; 提交按钮,将当前表单数据给服务器或者其他程序进行处理</li><li>reset : 重置按钮,清空当前表单的内容,并设置为最初的默认值</li><li>image : 图片按钮,和提交按钮一样的功能,不过图片按钮可以显示图片</li><li>file: 文本选择框<ul><li>可配合js来实现验证,对上传的文件进行安全的检查,一是扩展名的检查,二是文件数据的检查</li></ul></li></ul></li><li><p>value = “内容” 文本框中默认的内容</p></li><li><p>size = “50” : 表示文本框内可以显示五十个字符,一个英文或者一个中文都算一个字符</p></li><li><p>readonly : 文本框只读,不能编辑,光标进不去,属性值可以不写</p></li></ul></li><li><p>&lt; select &gt; :下拉列表标签(内联标签)</p><ul><li>&lt; select &gt; 标签里的每一项都用&lt; option &gt; 表示,select 就是选择,option” 选项”</li><li>select 标签和ul,ol,dl一样,都是组标签</li><li>属性<ul><li>multiple : 可以对下拉列表中的选项进行多选,没有属性值,ctrl+鼠标点选</li><li>size = “3”,如果属性值大于1,则列表为滚动视图,默认属性值为1,即下拉列表</li></ul></li></ul></li><li><p>&lt; option &gt;标签的属性</p><ul><li>selected : 预选中,没有属性值</li></ul></li><li><p>&lt; textarea &gt;标签:多行文本输入框(内联标签)</p><ul><li>text就是文本,area就是区域</li><li>属性<ul><li>value : 提交给服务器的值</li><li>rows = “4” :指定文本区域的行数</li><li>cols = “20” :制定文本区域的列数</li><li>readonly: 只读</li></ul></li></ul></li><li><p>&lt; label&gt; 标签(内联标签)</p><ul><li><p>单选复选框只有点击小圆圈才能选中,可以用label解决,</p><ul><li><pre class="line-numbers language-html"><code class="language-html">input type="radio" name="sex" id="nan" /> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nan<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nv<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul></li></ul><h2 id="HTML内联元素"><a href="#HTML内联元素" class="headerlink" title="HTML内联元素"></a>HTML内联元素</h2><h3 id="1-字体标签"><a href="#1-字体标签" class="headerlink" title="1.字体标签"></a>1.字体标签</h3><ul><li>粗标签&lt; b &gt;或&lt; strong &gt; (已废弃)</li><li>斜体标记&lt; I &gt; 或&lt; em &gt;(已废弃)</li><li>上标 &lt; sup &gt; 下标 &lt; sub &gt; </li><li>下划线标记&lt; u &gt; 中划线标记&lt; s &gt; (已废弃) 和,&lt; del &gt;</li></ul><h3 id="2-排班标签"><a href="#2-排班标签" class="headerlink" title="2.排班标签"></a>2.排班标签</h3><h3 id="3超链接"><a href="#3超链接" class="headerlink" title="3超链接"></a>3超链接</h3><ul><li><p>外部链接</p><ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>new.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击进入到新网页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>也可直接点击链接进入</p></li><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>进入百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>锚链接</p><ul><li>给指定的超链接起一个名字,作用是在本页面或者其他页面的不同位置进行跳转,像回到顶部按钮一样,#top</li></ul></li><li><p>邮件链接</p><ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mailto:zhaoxu@tedu.cn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>联系我们<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>特殊链接 </p><ul><li><p>返回页面顶部</p><ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转到顶部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>与js有关</p><ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转到顶部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>javascrip:;表示什么都不执行,这样点击&lt; a &gt;没有任何响应</p></li><li><p>javastrip: 是表示在触发&lt; a &gt; 的时候执行一段JavaScript的代码</p></li></ul></li></ul></li><li><p>超链接的属性</p><ul><li>href : 目标URL</li><li>title : 悬停文本</li><li>name : 主要用于设置一个锚点的名称</li><li>target : 告诉浏览器用什么方式来打开目标页面<ul><li>-self :同一网页</li><li>-blank: 在新的窗口打开</li><li>-parent : 在父窗口中显示</li><li>-top ; 在顶级窗口显示</li></ul></li></ul></li></ul><h3 id="4-图片标签-lt-img-gt"><a href="#4-图片标签-lt-img-gt" class="headerlink" title="4.图片标签< img />"></a>4.图片标签&lt; img /&gt;</h3><ul><li>img : 代表的就是一张图片,且是单边标记,它是自封闭标签,也称为单标签</li><li>能插入的图片类型<ul><li>能插入: jpg(jpeg),gif,png,bmp</li><li>不能插入: psd,ai</li><li>html页面不是直接插入图片,而是插入图片的引入地址,所以要把图片上传到服务器上</li></ul></li><li>src属性:图片的相对路径和绝对路径<ul><li>相对路径:   . 代表当前目录,   ..代表父路径</li><li>绝对路径: 盘符开始的绝对路径和网络路径</li></ul></li><li>img标签常用属性<ul><li>width,height,宽度高度</li><li>title,提示性文本,也就是鼠标悬停时显示的文本</li><li>align : 指图片的对齐方式,属性值可以是left,center,right</li><li>alt : 当图片显示不出来的时候,代替图片显示的内容,</li><li>src属性,点击图片跳转到相应的链接</li></ul></li></ul><h2 id="CSS篇"><a href="#CSS篇" class="headerlink" title="CSS篇"></a>CSS篇</h2><h3 id="1-为什么学习css"><a href="#1-为什么学习css" class="headerlink" title="1.为什么学习css"></a>1.为什么学习css</h3><ul><li>​    html的缺陷<ul><li>不能够适应多种设备</li><li>要求浏览器必须足够智能足够庞大</li><li>数据和显示没有分开</li><li>功能不够强大</li></ul></li><li>css的优点<ul><li>使数据和显示分开</li><li>降低网络的流量</li><li>使整个网站视觉效果一致</li><li>使开发效率提高了(耦合性降低,一个负责写html,一个负责写css)</li></ul></li></ul><h3 id="2-css的引入方法"><a href="#2-css的引入方法" class="headerlink" title="2.css的引入方法"></a>2.css的引入方法</h3><ul><li><p>行内样式</p><ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> green</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是一个段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>接样式</p><ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token comment" spellcheck="true">/*写我们的css代码*/</span>         <span class="token selector">span</span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>外接样式-链接式</p><ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./index.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>外接样式-导入式</p><ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token atrule"><span class="token rule">@import</span> <span class="token url">url('./index.css')</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="3-css选择器"><a href="#3-css选择器" class="headerlink" title="3.css选择器"></a>3.css选择器</h3><ul><li><p>标签选择器(标签名)</p><ul><li>标签选择器可以选中所有的标签元素,比如div,ul,li,p等,不管标签隐藏的多深,都能选中所有的标签,</li></ul></li><li><p>类选择器</p><ul><li><p>类就是class,任何的标签都可以加类,类可以重复,适于归类的概念,同一个标签中可以携带多个类,用空格隔开</p><ul><li><pre><code>.lv{     color: green;  } .big{     font-size: 40px; } .line{    text-decoration: underline;  }</code></pre></li><li><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 公共类    共有的属性 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lv big<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>段落1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lv line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>段落2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line big<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>段落3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>id选择器</p><ul><li><p>同一个页面中id不能重复,任何的标签都可以设置id,id命名规范,要以数字,下划线大小写严格区分,aa和AA就是两个不一样的属性值</p></li><li><p>css</p><pre class="line-numbers language-html"><code class="language-html">#box{    background:green;}            #s1{    color: red;}#s2{    font-size: 30px;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>html</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>娃哈哈<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>s1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>爽歪歪<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>s2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>QQ星<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>高级选择器</p><ul><li><p>后代选择器</p><ul><li><p>用空格表示后代选择器</p></li><li><pre class="line-numbers language-html"><code class="language-html">.container p{    color: red;        }.container .item p{    color: yellow;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>子代选择器</p><ul><li><p>用&gt;表示子代选择器,比如div&gt;p,仅仅表示的是当前div元素选中的子代(不包括孙子)元素P</p></li><li><pre class="line-numbers language-html"><code class="language-html">.container>p{     color: yellowgreen;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>并集选择器</p><ul><li><pre class="line-numbers language-html"><code class="language-html">/*并集选择器*/h3,a{    color: #008000;    text-decoration: none;                }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><pre class="line-numbers language-html"><code class="language-html">body,h1,h2,h3,h4,h5,h6,hr,p,blockquote,dl,dt,dd,ul,ol,li,pre,form,fieldset,legend,button,input,textarea,th,td {      margin: 0;      padding: 0   }/*使用此并集选择器选中页面中所有的标签，页面布局的时候会使用*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>交集选择器</p><ul><li><p>使用 . 表示交集选择器,第一个标签名必须是标签选择器,第二个标签必须是类选择器,语法:div.active,比如有一个&lt; h4 class=’active’ &gt;&lt; h4&gt; 这样的标签,name它表示两者选中之后元素共有的特性</p></li><li><pre class="line-numbers language-html"><code class="language-html">h4{    width: 100px;    font-size: 14px;}.active{    color: red;    text-decoration: underline;}/* 交集选择器 */h4.active{    background: #00BFFF;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>更多选择器</p><ul><li><p>伪类选择器</p><ul><li><p>伪类悬着器一般会使用在超链接a标签中</p><pre class="line-numbers language-html"><code class="language-html">      /*link表示没有被访问的a标签的样式*/        .box ul li.item1 a:link{                        color: #666;        }        /*visited表示访问过后的a标签的样式*/        .box ul li.item2 a:visited{                        color: yellow;        }        /*hover表示鼠标悬停时a标签的样式*/        .box ul li.item3 a:hover{                        color: green;        }        /*active表示鼠标摁住的时候a标签的样式*/        .box ul li.item4 a:active{                        color: yellowgreen;        }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>伪标签选择器(伪元素选择器)</p><ul><li><pre class="line-numbers language-html"><code class="language-html">/*设置第一个首字母的样式*/     p:first-letter{            color: red;            font-size: 30px;        }        /* 在....之前 添加内容   这个属性使用不是很频繁 了解  使用此伪元素选择器一定要结合content属性*/        p:before{            content:'alex';        }                /*在....之后 添加内容，使用非常频繁 通常与咱们后面要讲到布局 有很大的关联（清除浮动）*/        p:after{            content:'&amp;';            color: red;            font-size: 40px;        }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>属性选择器</p><ul><li><pre class="line-numbers language-html"><code class="language-html">/*根据for属性查找，找到所有又for属性的，设置字体颜色为红色*/           /*[for]{               color: red;           }*/                      /*找到for属性的值等于username的元素 字体颜色设为黄色*/           /*[for='username']{               color: yellow;           }*/                      /*以....开头  ^*/            /*[for^='user']{               color: #008000;           }*/                      /*以....结尾   $*/           /*[for$='vvip']{               color: red;           }*/                      /*包含某元素的标签*/           /*[for*="vip"]{               color: #00BFFF;           }*/                      /*指定标签的for属性           其中for属性的值是以空格隔开的值列表，           user1是值列表中的一个独立值*/           label[for~='user1']{               color: red;           }                      input[type='text']{               background: red;           }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul><h3 id="4-选择器权重"><a href="#4-选择器权重" class="headerlink" title="4.选择器权重"></a>4.选择器权重</h3><ul><li><p>当同一个标签有多重样式,遇到重叠项的设置又该听谁的呢,这就涉及到权重的问题了,</p></li><li><p>行内样式 1000&gt;id选择器 100&gt;类选择器 10&gt;标签选择器 1&gt;继承样式</p></li><li><p>css的两大特性:继承性和层叠性</p><ul><li><p>继承性:给父级设置一些属性,子级继承父级的该属性,这就是css中的继承</p><ul><li><p>继承规则</p></li><li><pre class="line-numbers language-heml"><code class="language-heml">面向对象语言都会存在继承的概念，在面向对象语言中，继承的特点：继承了父类的属性和方法。那么我们现在主要研究css，css就是在设置属性的。不会牵扯到方法的层面。记住：有一些属性是可以继承下来 ： color 、 font-*、 text-*、line-* 。主要是文本级的标签元素。但是像一些盒子元素属性，定位的元素（浮动，绝对定位，固定定位）不能继承<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>层叠性:权重大的标签覆盖掉权重小的标签,谁的权重大就显示谁的标签</p></li></ul></li><li><p>权重比较</p><ul><li>权重一样的时候,是以后来设置的属性为准,</li><li>权重都是0,那么就遵循就近原则,谁描述的近,就使用谁的属性,谁描述的近,就是选中到最内层的距离越近</li></ul></li><li><p>! import:设置为权重无限大</p><ul><li>它不影响继承来的权重,只影响选中的元素,不要随便使用,以为他会影响页面的布局</li></ul></li><li><p>使用什么选择器?</p><ul><li>不要试图用一个类将页面写完,这个标签要携带多个类,共同设置样式</li><li>每个类尽可能的小,要有公共的概念,能让更多的标签使用.</li><li>在css中尽可能的使用classs,除非一些特殊的情况可以用id,id一般是用在js中的,也就是说js是通过id来获取到标签</li></ul></li><li><p>选择器的选择</p><ul><li>先看标签元素有没有被选中,如果被选中了,就数数(id,class,标签的数量) 谁的权重大,就显示谁的属性,权重一样大,后来者居上</li><li>如果没有被选中标签,权重为0</li><li>如果属性都是被继承下来的,权重都是0,就近原则,谁描述的近就显示谁的属性</li></ul></li></ul><h3 id="5-盒模型"><a href="#5-盒模型" class="headerlink" title="5.盒模型"></a>5.盒模型</h3><ul><li><p>在css中,box model这一术语是用来设计和布局时使用的,在网页中显示一些方方正正的盒子,这种盒子就叫盒模型</p></li><li><p>盒模型有两种: 标准模型和IE模型(了解)</p></li><li><p>盒模型属性</p><ul><li><p>width : 内容的宽度</p></li><li><p>height : 内容的高度</p></li><li><p>padding : 内边距,边框到内容的距离,padding区域是有背景颜色的,且背景颜色和内容的颜色一样,也就是说background-color这个属性将填充所有的border以内的区域</p><ul><li><pre class="line-numbers language-html"><code class="language-html">padding-top: 30px;padding-right: 30px;padding-bottom: 30px;padding-left: 30px;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>border : 边框 ,盒子的宽度</p><ul><li><pre class="line-numbers language-html"><code class="language-html">/*上 右 下 左*/padding: 20px 30px 40px 50px ;/*上 左右  下*/padding: 20px 30px 40px;/* 上下 左右*/padding: 20px 30px;            /*上下左右*/padding: 20px;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>边框有三个要素,粗细,线性样式,颜色,(如不写粗细不显示边框,不写颜色默认黑色,只写线性样式,默认有上下左右 3px宽度的实体黑色边框</p></li><li><p>按照三要素来写border</p><ul><li><pre class="line-numbers language-html"><code class="language-html">border-width: 3px;border-style: solid;border-color: red;/*border-width: 5px 10px;border-style: solid dotted double dashed;border-color: red green yellow;*//*设置顺序 ：上 右 左 下*//*border-style: 实线，点状，双线，虚线*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>按照方向划分设置小属性</p><ul><li><pre><code>border-top-width: 10px;border-top-color: red;border-top-style: solid;border-right-width: 10px;border-right-color: red;border-right-style: solid;border-bottom-width: 10px;border-bottom-color: red;border-bottom-style: solid;border-left-width: 10px;border-left-color: red;border-left-style:solid;</code></pre></li></ul></li><li><p>按照方向设置</p><ul><li><pre><code>border-top: 10px solid red;border-right: 10px solid red;border-bottom: 10px solid red;border-left: 10pxb solid red;</code></pre></li></ul></li><li><p>设置border没有样式</p><ul><li><pre><code>border:none；border：0；表示border没有设置样式。</code></pre></li></ul></li><li><p>border-radius属性</p><ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">div<span class="token class">.box1</span></span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#f0809d</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">div<span class="token class">.box2</span></span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#7ef0c2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">div<span class="token class">.box3</span></span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">border-top-left-radius</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">border-bottom-right-radius</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>            <span class="token property">border-bottom-left-radius</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#b589f0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>利用border画三角形</p></li></ul></li></ul></li><li><p>margin : 外边框,盒子边框到附近盒子的距离</p><ul><li><p>在写网页的时候,一般要清除页面标签中的padding和margin,以便我们更好的去调整元素的位置</p><ul><li><pre class="line-numbers language-html"><code class="language-html">{  padding:0;  margin:0;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>效率不高,所以我们要是用并集选择器选中页面中应有的标签,搜索reset.css,可找到方法</p></li></ul></li><li><p>设置margin</p><ul><li><pre class="line-numbers language-html"><code class="language-html">/*表示四个方向的外边距离为20px*/margin: 20px;/*表示盒子向下移动了30px*/margin-top: 30px;/*表示盒子向右移动了50px*/margin-left: 50px;/*表示盒子距离右面的盒子100px*/margin-right: 100px;/*表示盒子距离下面的盒子100px*/margin-bottom: 100px;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>margin的塌陷</p><ul><li><pre class="line-numbers language-html"><code class="language-html">html:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>css:    *{            padding: 0;            margin: 0;        }        .father{            width: 400px;            border: 1px solid gray;            /*float: left;*/        }        .box1{            width: 300px;            height: 200px;            background-color: red;            margin-bottom: 20px;            /*float: left;*/        }        .box2{            width: 400px;            height: 300px;            background-color: green;            margin-top: 50px;            /*float: left;*/        }/*当给两个标准流下兄弟盒子 设置垂直方向上的margin时，那么以较大的为准，那么我们称这种现象叫塌陷。没法解决，我们称为这种技巧叫“奇淫技巧”。记住这种现象，在布局垂直方向盒子的时候注意margin的用法。当我们给两个标准流下的兄弟盒子设置浮动之后，就不会出现margin塌陷的问题。*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>margin : 0 auto;</p><ul><li><pre class="line-numbers language-html"><code class="language-html">div{            width: 780px;            height: 50px;            background-color: red;            /*水平居中盒子*/            margin: 0px auto;                        /*水平居中文字*/            text-align: center;        }/*当一个div元素设置margin：0 auto;时就会居中盒子，那我们知道margin:0 auto;表示上下外边距离为0，左右为auto的距离，那么auto是什么意思呢？设置margin-left:auto；我们发现盒子尽可能远离左侧，当设置margin-right:auto；我们发现盒子尽可能远离右侧。当两条语句并存的时候，我们发现盒子尽可能远离两侧，此时盒子就居中了。如果给盒子设置浮动，那么margin:0 auto失效。使用margin：0 auto;注意点：1.使用margin: 0 auto;水平居中盒子必须有width，要有明确width，文字水平居中使用text-align: center;2.只有标准流下的盒子 才能使用margin:0 auto; 当一个盒子浮动了，固定定位，绝对定位(后面会讲)，margin:0 auto; 不能用了3.margin：0 auto;居中盒子。而不是居中文本，文字水平居中使用text-align: center;*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>善于使用父亲的padding,而不是margin</p><ul><li>margin属性是描述兄弟盒子的关系,而padding描述的是父子盒子的关系</li><li>给父盒子设定border,或者padding,那么父盒子就不会因为子盒子的原因掉下来</li></ul></li></ul></li></ul><h3 id="6-标准文档流"><a href="#6-标准文档流" class="headerlink" title="6.标准文档流"></a>6.标准文档流</h3><ul><li>web网页的制作,从上往下设计,</li><li>空白折叠现象</li><li>高矮不齐,底边对齐<ul><li>图片文档的大小不一都会让页面出现高矮不齐的现象,但是遵循底边对齐</li></ul></li><li>自动换行,一行写不满,换行写</li></ul><h3 id="7-块级元素和行内元素的转换"><a href="#7-块级元素和行内元素的转换" class="headerlink" title="7.块级元素和行内元素的转换"></a>7.块级元素和行内元素的转换</h3><ul><li>行内元素<ul><li>与其他行内元素并排</li><li>不能设置宽高,默认的宽度就是文字的宽度</li></ul></li><li>块级元素<ul><li>霸占一行,不能与其他元素并列</li><li>能设置宽高,如果不设置宽高,那么宽度将默认变为父亲的100%</li></ul></li><li>相互转换<ul><li>可以通过display属性将会计元素和行内元素进行互相转换,display即”显示模式”</li><li>块级元素转换为行内元素<ul><li>display: inline;</li></ul></li><li>行内元素转换为块级元素<ul><li>display: block;</li></ul></li></ul></li></ul><h3 id="8-css脱离标准文档流的三种方式"><a href="#8-css脱离标准文档流的三种方式" class="headerlink" title="8.css脱离标准文档流的三种方式"></a>8.css脱离标准文档流的三种方式</h3><ul><li><p>浮动 ; float</p><ul><li><p>属性</p><ul><li>none:表示不浮动,默认</li><li>left,左浮动</li><li>right,右浮动</li></ul></li><li><p>四大特性</p><ul><li>浮动的元素会脱离标准文档流</li><li>浮动的元素互相贴靠</li><li>浮动的元素有”子围”效果<ul><li>当div浮动,p不浮动,div遮盖了p,div的层级提高,但是p中的文字不会被遮盖,此时就形成了子围效果</li></ul></li><li>收缩的效果<ul><li>一个浮动的元素,如果没有设置width,那么就自动收缩为文字的高度</li></ul></li></ul></li><li><p>清除浮动</p><ul><li><p>给父盒子设定高度,但是使用不灵活,常用于页面中固定高度,且子元素并排显示的布局,比如导航栏</p></li><li><p>clear:both</p><ul><li>left:当前元素的左边不许有浮动的元素</li><li>right: 当前元素的有边不许有浮动的元素</li><li>both:两边都不许有</li></ul></li><li><p>伪元素清除法(常用)</p><ul><li><p>给浮动子元素的父盒子,也就是不浮动元素,添加一个clearfix类,然后设置</p><ul><li><pre class="line-numbers language-html"><code class="language-html">.clearfix:after{    /*必须要写这三句话*/    content: '.';    clear: both;    display: block;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul></li><li><p>overflow:hidden</p><ul><li><p>overflow属性规定当内容溢出元素框时发生的事情。</p><p>说明：</p><p>这个属性定义溢出元素内容区的内容会如何处理。如果值为 scroll，不论是否需要，用户代理都会提供一种滚动机制。因此，有可能即使元素框中可以放下所有内容也会出现滚动条。</p><p>有五个值：</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>visible</td><td>默认值。内容不会被修剪，会呈现在元素框之外。</td></tr><tr><td>hidden</td><td>内容会被修剪，并且其余内容是不可见的。</td></tr><tr><td>scroll</td><td>内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</td></tr><tr><td>auto</td><td>如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</td></tr><tr><td>inherit</td><td>规定应该从父元素继承 overflow 属性的值。</td></tr></tbody></table></li></ul></li></ul></li><li><p>定位</p><ul><li><p>定位分为三种:决定定位,相对定位,固定定位</p></li><li><p>相对定位</p><ul><li><p>现象和使用：</p><p>1.如果对当前元素仅仅设置了相对定位，那么与标准流的盒子什么区别。</p><p>2.设置相对定位之后，我们才可以使用四个方向的属性： top、bottom、left、right</p><p>特性：1.不脱标  2.形影分离  3.老家留坑（占着茅房不拉屎，恶心人）</p><p>所以说相对定位在页面中没有什么太大的作用。影响我们页面的布局。我们不要使用相对定位来做压盖效果</p><p>用途：</p><p>1.微调元素位置</p><p>2.做绝对定位的参考（父相子绝）绝对定位会说到此内容。</p></li></ul></li><li><p>绝对定位</p><ul><li><p>特性：1.脱标  2.做遮盖效果，提成了层级。设置绝对定位之后，不区分行内元素和块级元素，都能设置宽高。</p><p>参考点(重点)：</p><p>一、单独一个绝对定位的盒子</p><p>1.当我使用top属性描述的时候 是以页面的左上角（跟浏览器的左上角区分）为参考点来调整位置<br>2.当我使用bottom属性描述的时候。是以首屏页面左下角为参考点来调整位置。</p><p>二、以父辈盒子作为参考点</p><p>1.父辈元素设置相对定位，子元素设置绝对定位，那么会以父辈元素左上角为参考点，这个父辈元素不一定是爸爸，它也可以是爷爷，曾爷爷。</p><p>2.如果父亲设置了定位，那么以父亲为参考点。那么如果父亲没有设置定位，那么以父辈元素设置定位的为参考点</p><p>3.不仅仅是父相子绝，父绝子绝 ，父固子绝,都是以父辈元素为参考点</p><p>注意了：父绝子绝，没有实战意义，做站的时候不会出现父绝子绝。因为绝对定位脱离标准流，影响页面的布局。相反‘父相子绝’在我们页面布局中，是常用的布局方案。因为父亲设置相对定位，不脱离标准流，子元素设置绝对定位，仅仅的是在当前父辈元素内调整该元素的位置。</p><p>还要注意，绝对定位的盒子无视父辈的padding</p><p><strong>作用：页面布局常见的“父相子绝”，一定要会！！！！</strong></p></li></ul></li><li><p>固定定位</p><ul><li><p>固定当前的元素不会随着页面滚动而滚动</p><p>特性: 1.脱标 2.遮盖，提升层级 3.固定不变</p><p>参考点：</p><p>设置固定定位，用top描述。那么是以浏览器的左上角为参考点<br>如果用bottom描述，那么是以浏览器的左下角为参考点</p><p>作用： 1.返回顶部栏 2.固定导航栏 3.小广告</p></li></ul></li><li><p>z-index</p><ul><li><p>指的就是各个盒子重叠在一起谁上谁下的问题。</p><p>四大特性，只要你记住了，页面布局就不会出现找不到盒子的情况。</p><ul><li><ul><li><ul><li>z-index 值表示谁压着谁，数值大的压盖住数值小的，</li><li>只有定位了的元素，才能有z-index,也就是说，不管相对定位，绝对定位，固定定位，都可以使用z-index，而浮动元素不能使用z-index</li><li>z-index值没有单位，就是一个正整数，默认的z-index值为0如果大家都没有z-index值，或者z-index值一样，那么谁写在HTML后面，谁在上面压着别人，定位了元素，永远压住没有定位的元素。</li><li>从父现象：父亲怂了，儿子再牛逼也没用</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="8-文本属性和字体属性"><a href="#8-文本属性和字体属性" class="headerlink" title="8.文本属性和字体属性"></a>8.文本属性和字体属性</h3><ul><li><p>文本属性</p><ul><li><table><thead><tr><th>属性</th><th>描述</th><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>text-align</td><td>文本对齐方式</td><td>nonecenterleftrightjustify</td><td></td></tr><tr><td>color</td><td>文本颜色</td><td></td><td></td></tr><tr><td>text-indent</td><td>首行缩进，单位建议em</td><td></td><td></td></tr><tr><td>text-decoration</td><td>规定文本修饰的样式</td><td>none   underline  overline  line-throughinherit</td><td>默认下划线定义文本上的一条线定义穿过文本下的一条线继承父元素text-decoration属性的值</td></tr><tr><td>line-height</td><td>行高</td><td></td><td>针对单行文本垂直居中公式：行高=盒子高度，使文本垂直居中，只适用单行文本。针对多行文本垂直居中行高不能小于字体，不然字会紧挨一起。</td></tr><tr><td>text-shadow</td><td>阴影</td><td>5px 5px 5px #FF0000</td><td>水平方向偏移量垂直方向偏移量模糊度阴影颜色</td></tr><tr><td>text-overflow</td><td>文字溢出</td><td>clipellipsis</td><td>修剪文本显示省略号代表被修剪文本</td></tr><tr><td>white-space</td><td>处理元素内的空白</td><td>normalprenowrappre-wrappre-lineinherit</td><td>默认。空白被浏览器忽略。空白会被浏览器保留文本不换行，直到遇到 <br>保留空白符序列，但正常地进行换行合并空白符序列，但是保留换行符继承父元素 white-space 属性的值</td></tr></tbody></table></li></ul></li><li><p>字体属性</p><ul><li><table><thead><tr><th>属性</th><th>描述</th><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>text-align</td><td>文本对齐方式</td><td>nonecenterleftrightjustify</td><td></td></tr><tr><td>color</td><td>文本颜色</td><td></td><td></td></tr><tr><td>text-indent</td><td>首行缩进，单位建议em</td><td></td><td></td></tr><tr><td>text-decoration</td><td>规定文本修饰的样式</td><td>none   underline  overline  line-throughinherit</td><td>默认下划线定义文本上的一条线定义穿过文本下的一条线继承父元素text-decoration属性的值</td></tr><tr><td>line-height</td><td>行高</td><td></td><td>针对单行文本垂直居中公式：行高=盒子高度，使文本垂直居中，只适用单行文本。针对多行文本垂直居中行高不能小于字体，不然字会紧挨一起。</td></tr><tr><td>text-shadow</td><td>阴影</td><td>5px 5px 5px #FF0000</td><td>水平方向偏移量垂直方向偏移量模糊度阴影颜色</td></tr><tr><td>text-overflow</td><td>文字溢出</td><td>clipellipsis</td><td>修剪文本显示省略号代表被修剪文本</td></tr><tr><td>white-space</td><td>处理元素内的空白</td><td>normalprenowrappre-wrappre-lineinherit</td><td>默认。空白被浏览器忽略。空白会被浏览器保留文本不换行，直到遇到 <br>保留空白符序列，但正常地进行换行合并空白符序列，但是保留换行符继承父元素 white-space 属性的值</td></tr></tbody></table></li></ul></li></ul><h3 id="9-background"><a href="#9-background" class="headerlink" title="9.background"></a>9.background</h3><ul><li><p>background-color : 背景颜色</p></li><li><p>background-image : 背景图片</p><ul><li><table><thead><tr><th>background-repeat：设置背景图像的平铺方式</th><th></th></tr></thead><tbody><tr><td>repeatrepeat-xrepeat-yno-repeateinherit</td><td>默认。背景图像将在垂直方向和水平方向重复背景图像将在水平方向重复背景图像将在垂直方向重复背景图像将仅显示一次规定应该从父元素继承 background-repeat 属性的设置</td></tr><tr><td>background-position：设置背景图像的起始位置</td><td></td></tr><tr><td>垂直位置 水平位置</td><td>可以从两个纬度上设定关键词：上中下 左中右垂直位置：top center bottom水平位置：left center right如仅规定了一个关键词，那么第二个值将是”center”。默认值：0 0；这两个值必须挨在一起。</td></tr><tr><td>background-attachment：设置固定的背景图像</td><td></td></tr><tr><td>scrollfixedinherit</td><td>默认值。背景图像会随着页面其余部分的滚动而移动。当页面的其余部分滚动时，背景图像不会移动。规定应该从父元素继承 background-attachment 属性的设置。</td></tr></tbody></table></li></ul></li></ul><h1 id="JavaScript篇"><a href="#JavaScript篇" class="headerlink" title="JavaScript篇"></a>JavaScript篇</h1><h2 id="ECMAScript-语法标准"><a href="#ECMAScript-语法标准" class="headerlink" title="ECMAScript:语法标准"></a>ECMAScript:语法标准</h2><h3 id="1-js介绍"><a href="#1-js介绍" class="headerlink" title="1.js介绍"></a>1.js介绍</h3><ul><li>JavaScript分为三层<ul><li>ECMAScript : JavaScript的语法标准,包括变量,表达式,运算符,函数,if语句,for语句等</li><li>DOM : 文档对象模型,操作网页上的元素的API,比如让盒子移动变色轮播图等</li><li>BOM : 浏览器对象模型,操作浏览器功能的部分API,比如让浏览器自动滚动</li></ul></li><li>优点<ul><li>JavaScript对初学者比较友好</li><li>JavaScript是有界面效果的(比如C语言就只有白底黑字)</li><li>JavaScript是弱变量型的语言,变量只需要用var来声明,而java中的变量的声明,要根据变量的类型来定义</li></ul></li><li>特点<ul><li>简单易用:可以使用任何的文本编辑器编写,只需要浏览器就能执行程序</li><li>解释执行(解释语言) ; 事先不编译,逐行执行,无需进行严格的变量声明</li></ul></li><li>语法要求<ul><li>JavaScript对换行缩进空格不敏感</li><li>所有的符号都是英文的</li></ul></li><li>js代码的引入<ul><li>在页面中，我们可以在body标签中放入<code>&lt;script type=”text/javascript”&gt;&lt;/script&gt;</code>标签对儿，<code>&lt;script type=”text/javascript”&gt;&lt;/script&gt;</code>标签对儿</li></ul></li></ul><h3 id="2-js变量和复制"><a href="#2-js变量和复制" class="headerlink" title="2.js变量和复制"></a>2.js变量和复制</h3><ul><li>变量<ul><li>变量有命名规范: 只能有字母数字下划线,美元符号$构成,且不能以数字开头,并且不能是JavaScript中的保留字,变量区分大小写</li></ul></li><li>赋值<ul><li>将等号右边的值,赋值给左边的变量,等号右边的变量的值不变</li></ul></li><li>注释<ul><li>单行注释(//)是ctrl + /,多汗注释(/*   */)是ctrl + shift +/</li></ul></li></ul><h3 id="3-输入输出信息"><a href="#3-输入输出信息" class="headerlink" title="3.输入输出信息"></a>3.输入输出信息</h3><ul><li>弹出警告框 : alert语句</li><li>控制台输出console.log(“”)和输入框prompt()</li></ul><h3 id="4-基础数据类型"><a href="#4-基础数据类型" class="headerlink" title="4.基础数据类型"></a>4.基础数据类型</h3><ul><li><p>number</p><ul><li>JavaScript中只要是数就是数值型的(number),无论整数,浮点数,无论大小,无论正负,都是number类型的</li></ul></li><li><p>string ; 字符串类型</p><ul><li><p>常用方法</p><ul><li><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>.length   #不加括号的是属性</td><td>返回长度</td></tr><tr><td>.trim()    #得到一个新值</td><td>移除空白</td></tr><tr><td>.trimLeft()</td><td>移除左边的空白</td></tr><tr><td>.trimRight()</td><td>移除右边的空白</td></tr><tr><td>.concat(value, …) #s1=’hello’;s.concat(‘xx’);得到helloxx</td><td>拼接</td></tr><tr><td>.charAt(n) #n类似索引，从0开始，超过最大值返回’’空字符串</td><td>返回第n个字符</td></tr><tr><td>.indexOf(substring, start) #这个start是从索引几开始找，没有返回-1</td><td>子序列位置</td></tr><tr><td>.substring(from, to) #不支持负数，所以一般都不用它，了解一下就行了</td><td>根据索引获取子序列</td></tr><tr><td>.slice(start, end) #var s1=’helloworld’;s1.slice(0,-5)看结果，就用它</td><td>切片</td></tr><tr><td>.toLowerCase() #全部变小写</td><td>小写</td></tr><tr><td>.toUpperCase()  #全部变大写</td><td>大写</td></tr><tr><td>.split(delimiter, limit)#分隔,s1.splite(‘ ‘),后面还可以加参数s1.split(‘ ‘，2),返回切割后的元素个数</td><td>分割</td></tr></tbody></table></li></ul></li></ul></li><li><p>布尔值 : boolean</p></li><li><p>空元素 : null</p></li><li><p>未定义 : undefined</p></li></ul><h3 id="5-内置数据类型"><a href="#5-内置数据类型" class="headerlink" title="5.内置数据类型"></a>5.内置数据类型</h3><ul><li><p>数组.Array</p><ul><li><p>数组的创建</p><ul><li><pre class="line-numbers language-html"><code class="language-html">var colors = ['red','color','yellow']; //字面量方式创建（推荐）var colors2 = new Array();//使用构造函数（后面会讲）的方式创建 使用new关键词对构造函数进行创建对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>数组的赋值</p><ul><li><pre class="line-numbers language-html"><code class="language-html">var arr = [];//通过下标进行一一赋值arr[0] = 123;arr[1] = '哈哈哈';arr[2] = '嘿嘿嘿'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>数组的常用方法</p><ul><li><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>.length</td><td>数组的大小</td></tr><tr><td>.push(ele)</td><td>尾部追加元素</td></tr><tr><td>.pop()</td><td>获取尾部的元素</td></tr><tr><td>.unshift(ele)</td><td>头部插入元素</td></tr><tr><td>.shift()</td><td>头部移除元素</td></tr><tr><td>.slice(start, end)</td><td>切片</td></tr><tr><td>.reverse() #在原数组上改的</td><td>反转</td></tr><tr><td>.join(seq)#a1.join(‘+’)，seq是连接符</td><td>将数组元素连接成字符串</td></tr><tr><td>.concat(val, …) #连个数组合并,得到一个新数组，原数组不变</td><td>连接数组</td></tr><tr><td>.sort()</td><td>排序</td></tr><tr><td>.forEach() #讲了函数再说</td><td>将数组的每个元素传递给回调函数</td></tr><tr><td>.splice() #参数：1.从哪删(索引), 2.删几个  3.删除位置替换的新元素(可多个元素)</td><td>删除元素，并向数组添加新元素。</td></tr><tr><td>.map()  #讲了函数再说</td><td>返回一个数组元素调用函数处理后的值的新数组</td></tr></tbody></table></li></ul></li><li><p>json对象</p><ul><li><pre class="line-numbers language-html"><code class="language-html">var str1 = '{"name": "chao", "age": 18}';var obj1 = {"name": "chao", "age": 18};// JSON字符串转换成对象var obj = JSON.parse(str1); // 对象转换成JSON字符串var str = JSON.stringify(obj1);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>日期: Date</p><ul><li><p>定义</p><ul><li><p>创建日期对象只有构造函数一种方式,使用关键字new</p></li><li><pre class="line-numbers language-html"><code class="language-html">var myDate = new Date();  //创建了一个date对象<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>常用方法</p><ul><li><img src="https://images2018.cnblogs.com/blog/1364810/201805/1364810-20180527115655555-1984356276.png" alt="img"></li></ul></li></ul></li><li><p>RegExp对象</p><ul><li><pre class="line-numbers language-html"><code class="language-html">//RegExp对象//创建正则对象方式1// 参数1 正则表达式(不能有空格)// 参数2 匹配模式：常用g(全局匹配;找到所有匹配，而不是在第一个匹配后停止)和i(忽略大小写)// 用户名只能是英文字母、数字和_，并且首字母必须是英文字母。长度最短不能少于6位 最长不能超过12位。// 创建RegExp对象方式（逗号后面不要加空格），假如匹配用户名是只能字母开头后面是字母加数字加下划线的5到11位的var reg1 = new RegExp("^[a-zA-Z][a-zA-Z0-9_]{5,11}$"); //注意，写规则的时候，里面千万不能有空格，不然匹配不出来你想要的内容，除非你想要的内容本身就想要空格，比如最后这个{5,11},里面不能有空格// 匹配响应的字符串var s1 = "bc123";//RegExp对象的test方法，测试一个字符串是否符合对应的正则规则，返回值是true或false。reg1.test(s1);  // true// 创建方式2，简写的方式// /填写正则表达式/匹配模式（逗号后面不要加空格）var reg2 = /^[a-zA-Z][a-zA-Z0-9_]{5,11}$/; reg2.test(s1);  // true注意，此处有坑：如果你直接写一个reg2.test()，test里面啥也不传，直接执行，会返回一个true，用其他的正则规则，可能会返回false，是因为，test里面什么也不传，默认传的是一个undefined，并且给你变成字符串undefined，所以能够匹配undefined的规则，就能返回true，不然返回false// String对象与正则结合的4个方法var s2 = "hello world";s2.match(/o/g);         // ["o", "o"]             查找字符串中 符合正则 的内容 ，/o/g后面这个g的意思是匹配所有的o,s2.search(/h/g);        // 0                      查找字符串中符合正则表达式的内容位置，返回第一个配到的元素的索引位置，加不加g效果相同s2.split(/o/g);         // ["hell", " w", "rld"]  按照正则表达式对字符串进行切割，得到一个新值，原数据不变s2.replace(/o/g, "s");  // "hells wsrld"          对字符串按照正则进行替换// 关于匹配模式：g和i的简单示例var s1 = "name:Alex age:18";s1.replace(/a/, "哈哈哈");      // "n哈哈哈me:Alex age:18"s1.replace(/a/g, "哈哈哈");     // "n哈哈哈me:Alex 哈哈哈ge:18"      全局匹配s1.replace(/a/gi, "哈哈哈");    // "n哈哈哈me:哈哈哈lex 哈哈哈ge:18"  不区分大小写// 注意事项1：// 如果regExpObject带有全局标志g，test()函数不是从字符串的开头开始查找，而是从属性regExpObject.lastIndex所指定的索引处开始查找。// 该属性值默认为0，所以第一次仍然是从字符串的开头查找。// 当找到一个匹配时，test()函数会将regExpObject.lastIndex的值改为字符串中本次匹配内容的最后一个字符的下一个索引位置。// 当再次执行test()函数时，将会从该索引位置处开始查找，从而找到下一个匹配。// 因此，当我们使用test()函数执行了一次匹配之后，如果想要重新使用test()函数从头开始查找，则需要手动将regExpObject.lastIndex的值重置为 0。// 如果test()函数再也找不到可以匹配的文本时，该函数会自动把regExpObject.lastIndex属性重置为 0。var reg3 = /foo/g;// 此时 regex.lastIndex=0reg3.test('foo'); // 返回true// 此时 regex.lastIndex=3reg3.test('xxxfoo'); // 还是返回true// 所以我们在使用test()方法校验一个字符串是否完全匹配时，一定要加上^和$符号，把匹配规则写的确定一些，尽量不用上面这种的写法/xxx/。// 注意事项2(说出来你可能不信系列)：// 当我们不加参数调用RegExpObj.test()方法时, 相当于执行RegExpObj.test(undefined)，然后将这个undefined又转为字符串"undefined",去进行匹配了, 并且/undefined/.test()默认返回true。var reg4 = /^undefined$/;reg4.test(); // 返回truereg4.test(undefined); // 返回truereg4.test("undefined"); // 返回true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>数学相关 Math</p><ul><li>常用方法</li><li><img src="https://images2018.cnblogs.com/blog/1364810/201805/1364810-20180527115730266-1931075271.png" alt="img"></li></ul></li></ul></li></ul><h3 id="6-数据类型之间的转换"><a href="#6-数据类型之间的转换" class="headerlink" title="6.数据类型之间的转换"></a>6.数据类型之间的转换</h3><ul><li><p>parseint() : 字符串转数字</p></li><li><p>parseFloat() : 字符串转小数</p></li><li><p>String() 和.toString() : 转字符串</p><ul><li><pre class="line-numbers language-html"><code class="language-html">var n1 = 123;var str1 = String(n1);console.log(typeof str1);var num = 234;console.log(num.toString())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>Boolean() : 任何数据类型都可以转成布尔值</p><ul><li><pre class="line-numbers language-html"><code class="language-html">var b1 = '123';  // truevar b3 = -123;  // truevar b4 = Infinity; //表示正无穷大 truevar b2 = 0;       // falsevar b5 = NaN;     //falsevar b6;              //表示undefined //falsevar b7 = null;    //false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="7-运算符"><a href="#7-运算符" class="headerlink" title="7.运算符"></a>7.运算符</h3><ul><li>字符串可以相加,数字也可以相加,字符串和数字也可以相加,但是会自动把结果转换成字符串</li><li>字符串 - 数值 = 数值</li></ul><h3 id="8-流程控制"><a href="#8-流程控制" class="headerlink" title="8.流程控制"></a>8.流程控制</h3><ul><li><p>if单分支</p></li><li><p>if…else…</p></li><li><p>if…else if…else</p></li><li><p>case语句</p><ul><li><pre class="line-numbers language-html"><code class="language-html">var gameScore = 'better';switch(gameScore){//case表示一个条件 满足这个条件就会走进来 遇到break跳出。如果某个条件中不写 break，那么直到该程序遇到下一个break停止    case 'good':    console.log('玩的很好')    //break表示退出    break;    case  'better':    console.log('玩的老牛逼了')    break;    case 'best':    console.log('恭喜你 吃鸡成功')    break;    default:    console.log('很遗憾')}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>while循环</p></li><li><p>do-while循环</p><ul><li><pre class="line-numbers language-html"><code class="language-html">//不管有没有满足while中的条件do里面的代码都会走一次var i = 3;//初始化循环变量do{    console.log(i)    i++;//更新循环条件}while (i&lt;10) //判断循环条件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>for循环</p></li><li><p>三元运算符</p><ul><li><pre class="line-numbers language-html"><code class="language-html">var a = 1var b =2var c = a>b ? a:b  //如果a>b成立返回a，否则返回bconsole.log(c)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="9-函数"><a href="#9-函数" class="headerlink" title="9.函数"></a>9.函数</h3><ul><li><p>函数的定义</p><ul><li><pre class="line-numbers language-html"><code class="language-html">function 函数名字(){    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>函数的调用</p><ul><li>函数名();</li></ul></li><li><p>函数的参数和返回值:形参和实参</p><ul><li>注意: 实际参数和形式参数的个数,要相同</li><li>注意: 函数只能返回一个值,如果要返回多个值,只能将其放在数组或者对象中返回</li></ul></li><li><p>伪数组 : arguments</p><ul><li>arguments代表的是实参,arguments只在函数中使用</li><li>返回函数实参的个数 : arguments.length</li><li>获取形参的个数 : 函数名.length</li><li>之所以说arguments是伪数组,是因为; arguments可以修改元素,但是不能改变数组的长短</li></ul></li><li><p>匿名函数</p><ul><li><pre class="line-numbers language-html"><code class="language-html">// 匿名函数方式，多和其他函数配合使用，后面我们就会用到了var sum = function(a, b){  //在es6中，使用var，可能会飘黄，是因为在es6中，建议你使用let来定义变量，不过不影响你使用  return a + b;  }sum(1, 2);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>自执行函数</p><ul><li><pre class="line-numbers language-html"><code class="language-html">// 立即执行函数，页面加载到这里，这个函数就直接执行了，不需要被调用执行(function(a, b){  return a + b;})(1, 2);  //python中写可以这么写：ret=(lambda x,y:x+y)(10,20) 然后print(ret)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>函数的全局变量和局部变量</p><ul><li>局部变量: 在函数内部使用var声明的是局部变量,只有函数内部能访问它,函数运行完毕就会消失</li><li>全局变量: 在函数外部声明的变量是全局变量,网页上的所有脚本和函数都鞥呢访问它,全局变量会在页面关闭后删除</li></ul></li><li><p>作用域</p><ul><li>函数内部查找变量,如果找不到会再到外部查找,逐步找到最外层</li></ul></li></ul><h3 id="10-面向对象-了解"><a href="#10-面向对象-了解" class="headerlink" title="10.面向对象(了解)"></a>10.面向对象(了解)</h3><ul><li>创建对象的几种常用方式<ul><li>使用object或对象字面量创建对象</li><li>工厂模式创建对象</li><li>构造函数模式创建对象</li><li>原型模式创建对象</li></ul></li></ul><h3 id="11正则的用法"><a href="#11正则的用法" class="headerlink" title="11正则的用法"></a>11正则的用法</h3><ul><li><pre class="line-numbers language-html"><code class="language-html">创建一个正则:var reg = RegExp('正则表达式')  //注意,写在字符串中所有带\的元字符都会被转义,应该写作\\var reg2 = /正则表达式/  //内部的元字符就不会转义了reg.test('待检测的字符串') //如果字符串中含有符合表达式规则的内容就返回true,否则返回false在字符串中应用正则var exp = 'alex3714'exp.match(/\d/)    //只匹配从左到右的第一个exp.match(/\d/g)   //匹配所有符合规则的 返回一个数组var exp2 = 'Alex is a big sb'exp2.match(/a/) //只匹配小写aexp2.match(/a/i) //i表示不区分大小写 A也会被匹配出来exp2.match(/a/ig) //不区分大小写并匹配所有exp.search(/正则表达式/i) //不区分大小写,从exp字符串中找出符合条件的子串的第一个索引位置exp.split(/正则表达式/i,n) //不区分大小写,根据正则切割,返回前n个结果exp.replace(/正则/gi,'新的值') //i表示不区分大小写,g表示替换所有,将符合正则条件的内容替换成新的值小问题1var reg2 = /\d/g     //正则表示要匹配多个值reg2.test('a1b2c3')  //多次test会的到true true true false 继续test会循环之前的结果小问题2var reg3 = /\w{5,10}/reg3.test() //如果什么都不写,那么默认test中传递undefined参数,刚好可以符合9位字符串的规则<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="DOM-文档对象模型"><a href="#DOM-文档对象模型" class="headerlink" title="DOM:文档对象模型"></a>DOM:文档对象模型</h2><h3 id="1-DOM"><a href="#1-DOM" class="headerlink" title="1.DOM"></a>1.DOM</h3><ul><li><p>DOM:文档对象模型,DOM为文档提供了结构化表示,并定义了如何通过脚本来访问文档结构,目的其实是为了能让js操作heml元素而制定的一个规范</p></li><li><p>DOM就是由节点组成: heml加载完毕,渲染引擎会在内存中把HTML文档生成一个DOM树<img src="https://images2018.cnblogs.com/blog/1364810/201805/1364810-20180528220440235-730879308.png" alt="img"></p></li><li><p>由上图可知,在HTML中一切都是节点<font color="red">非常重要</font></p><ul><li>元素节点: HTML标签</li><li>文本节点: 标签中的文字(比如标签之间的空格,换行)</li><li>属性节点: 标签的属性</li><li>整个html文档就是一个文档节点所有节点都是Object</li></ul></li><li><p>利用DOM可以完成</p><ul><li>找对象(元素节点)</li><li>设置元素的属性值</li><li>设置元素的样式</li><li>动态创建和删除元素</li><li>事件的触发响应: 事件源,事件,事件的驱动程序</li></ul></li></ul><h3 id="2-节点查找"><a href="#2-节点查找" class="headerlink" title="2.节点查找"></a>2.节点查找</h3><ul><li><p>DOM节点的获取方式其实就是获取事件源的方式</p></li><li><p>直接查找:</p><ul><li><pre class="line-numbers language-html"><code class="language-html">var div1 = document.getElementById("box1");      //方式一：通过id获取单个标签var arr1 = document.getElementsByTagName("div1");     //方式二：通过 标签名 获得 标签数组，所以有svar arr2 = document.getElementsByClassName("hehe");  //方式三：通过 类名 获得 标签数组，所以有s//其中方式二、方式三获取的是标签数组，那么习惯性是先遍历之后再使用。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>特殊情况,只有一个元素</p></li><li><pre class="line-numbers language-html"><code class="language-html">即便如此，这一个值也是包在数组里的。这个值的获取方式如下：document.getElementsByTagName("div1")[0];    //取数组中的第一个元素document.getElementsByClassName("hehe")[0];  //取数组中的第一个元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>间接查找</p><ul><li><p>DOM的节点并不是孤立的,因此可以通过DOM节点之间的相对关系对他们进行访问,节点的访问呢关系是以属性的方式存在的<img src="https://images2018.cnblogs.com/blog/1364810/201805/1364810-20180528220938094-853745001.png" alt="img"></p></li><li><p>获取父节点</p><ul><li><pre class="line-numbers language-html"><code class="language-html">节点.parentNode<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>获取兄弟节点</p><ul><li><p><strong>总结</strong>：为了获取下一个<strong>元素节点</strong>，我们可以这样做：在IE678中用nextSibling，在火狐谷歌IE9+以后用nextElementSibling</p></li><li><p>为了获取前一个<strong>元素节点</strong>，我们可以这样做：在IE678中用previousSibling，在火狐谷歌IE9+以后用previousElementSibling</p></li><li><p>随意兄弟节点</p><ul><li><pre class="line-numbers language-html"><code class="language-html">节点自己.parentNode.children[index];  //随意得到兄弟节点<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li><li><p>获取子节点</p><ul><li><p>单个子节点</p><ul><li><strong>总结</strong>：为了获取第一个<strong>子元素节点</strong>，我们可以这样做：在IE678中用firstChild，在火狐谷歌IE9+以后用firstElementChild</li><li><strong>总结</strong>：为了获取最后一个<strong>子元素节点</strong>，我们可以这样做：在IE678中用lastChild，在火狐谷歌IE9+以后用lastElementChild</li></ul></li><li><p>所有子节点</p><ul><li><pre class="line-numbers language-html"><code class="language-html">子节点数组 = 父节点.childNodes;   //获取所有节点。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><pre class="line-numbers language-html"><code class="language-html">子节点数组 = 父节点.children;   //获取所有节点。用的最多。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><pre class="line-numbers language-html"><code class="language-html">nodeType == 1 表示的是元素节点（标签） 。记住：元素就是标签。nodeType == 2 表示是属性节点 了解nodeType == 3 是文本节点 了解<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul></li></ul><h3 id="3-节点操作"><a href="#3-节点操作" class="headerlink" title="3.节点操作"></a>3.节点操作</h3><ul><li><p>节点本身操作</p><ul><li><p>创建节点</p><ul><li><pre class="line-numbers language-html"><code class="language-html">新的标签(元素节点) = document.createElement("标签名");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>比如,创建一个li标签,或者创建一个不存在的adg标签,可以这样做</p><ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> a1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//创建一个li标签</span>    <span class="token keyword">var</span> a2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"adbc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//创建一个不存在的标签</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>插入节点</p><pre><code>父节点.appendChild(新的子节点);//方式1：父节点的最后插入一个新的子节点。 父节点.insertBefore(新的子节点,作为参考的子节点);//方式2：在参考节点前插入一个新的节点。如果参考节点为null，那么他将在父节点最后插入一个子节点。</code></pre></li><li><p>删除节点</p><pre><code>父节点.removeChild(子节点);//用父节点删除子节点。必须要指定是删除哪个子节点。node1.parentNode.removeChild(node1);//删除自己这个节点</code></pre></li><li><p>复制节点（克隆节点）</p><pre><code>要复制的节点.cloneNode();       //括号里不带参数和带参数false，效果是一样的。不带参数/带参数false：只复制节点本身，不复制子节点。要复制的节点.cloneNode(true);   //带参数true：既复制节点本身，也复制其所有的子节点。</code></pre></li><li><p>替换节点</p><pre class="line-numbers language-html"><code class="language-html">父节点.replaceChild(newnode, 某个节点);   //找到这个父标签里面的要被替换的子标签，然后用新的标签将该子标签替换掉<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>节点的属性操作</p><ul><li><p>获取节点属性值</p><ul><li><pre class="line-numbers language-html"><code class="language-html">元素节点.属性;元素节点[属性];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><pre class="line-numbers language-html"><code class="language-html">元素节点.getAttribute("属性名称");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>设置节点属性值</p><ul><li><pre class="line-numbers language-html"><code class="language-html">    myNode.src = "images/2.jpg"   //修改src的属性值    myNode.className = "image2-box";  //修改class的name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><pre class="line-numbers language-html"><code class="language-html">元素节点.setAttribute(属性名, 新的属性值);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>删除节点的属性</p><ul><li><pre class="line-numbers language-html"><code class="language-html">元素节点.removeAttribute(属性名);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li><li><p>节点文本操作</p><ul><li><p>获取文本节点的值</p><ul><li><pre class="line-numbers language-html"><code class="language-html">var divEle = document.getElementById("d1")divEle.innerText  #输入这个指令，一执行就能获取该标签和内部所有标签的文本内容divEle.innerHTML  #获取的是该标签内的所有内容，包括文本和标签<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>设置文本节点的值</p><ul><li><pre class="line-numbers language-html"><code class="language-html">var divEle = document.getElementById("d1")divEle.innerText="1"  divEle.innerHTML="<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>" #能识别成一个p标签<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>获取值的操作</p><ul><li><p>elemenNode.value  ; 适用于以下标签 ,用户输入或者选择类型的标签: input,select,textarea</p><ul><li><pre class="line-numbers language-html"><code class="language-html">var iEle = document.getElementById("i1");console.log(iEle.value);var sEle = document.getElementById("s1");console.log(sEle.value);var tEle = document.getElementById("t1");console.log(tEle.value);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>class的操作</p><ul><li><pre class="line-numbers language-html"><code class="language-html">className  获取所有样式类名(字符串)首先获取标签对象标签对象.classList.remove(cls)  删除指定类classList.add(cls)  添加类classList.contains(cls)  存在返回true，否则返回falseclassList.toggle(cls)  存在就删除，否则添加，toggle的意思是切换，有了就给你删除，如果没有就给你加一个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>指定css的操作</p><ul><li><pre class="line-numbers language-html"><code class="language-html">obj.style.backgroundColor="red"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>对于没有中横线的css属性直接用style.属性名即可,如:</p><ul><li><pre class="line-numbers language-html"><code class="language-html">obj.style.marginobj.style.widthobj.style.leftobj.style.position<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>对于含有中横线的css属性,将中横线后面的第一个字母换成大写即可,如</p><ul><li><pre class="line-numbers language-html"><code class="language-html">obj.style.marginTopobj.style.borderLeftWidthobj.style.zIndexobj.style.fontFamily<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul><h3 id="4-事件"><a href="#4-事件" class="headerlink" title="4.事件"></a>4.事件</h3><ul><li><p>JS是以事件驱动为核心的一门语言</p></li><li><p>事件三要素</p><ul><li>事件源,事件,事件驱动程序</li></ul></li><li><p>代码书写步骤</p><ul><li><pre class="line-numbers language-html"><code class="language-html">（1）获取事件源：document.getElementById(“box”); //类似与ios语言的 UIButton *adBtn = [UIButton buttonWithType:UIButtonTypeCustom];（2）绑定事件： 事件源box.事件onclick = function(){ 事件驱动程序 };（3）书写事件驱动程序：关于DOM的操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>常见事件如下<img src="https://images2018.cnblogs.com/blog/1364810/201805/1364810-20180528212850888-1985583768.png" alt="img"></p></li><li><p>获取事件源</p><ul><li><pre class="line-numbers language-html"><code class="language-html">var div1 = document.getElementById("box1");      //方式一：通过id获取单个标签var arr1 = document.getElementsByTagName("div1");     //方式二：通过 标签名 获得 标签数组，所以有svar arr2 = document.getElementsByClassName("hehe");  //方式三：通过 类名 获得 标签数组，所以有s　<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>绑定事件的方式</p><ul><li><p>直接绑定匿名函数</p></li><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> div1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//绑定事件的第一种方式</span>    div1<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是弹出的内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>先单独定义函数,再绑定</p></li><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> div1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//绑定事件的第二种方式</span>    div1<span class="token punctuation">.</span>onclick <span class="token operator">=</span> fn<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//注意，这里是fn，不是fn()。fn()指的是返回值。</span>    <span class="token comment" spellcheck="true">//单独定义函数</span>    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是弹出的内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><font color="yellow">注意上方代码的注释,绑定的时候,是fn,不是写fn(),fn代表的是整个函数,fn()代表的是返回值</font></li></ul></li><li><p>行内绑定</p></li><li><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--行内绑定--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fn()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是弹出的内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>事件驱动程序</p><ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token id">#box</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>            <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> oDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//点击鼠标时，原本粉色的div变大了，背景变红了</span>    oDiv<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        oDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">"200px"</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//属性值要写引号</span>        oDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">"200px"</span><span class="token punctuation">;</span>        oDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//属性名是backgroundColor，不是background-Color</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><font color="yellow">注意事项:</font></p><ul><li>在js里写属性值时，要用引号</li><li>在js里写属性名时，是<code>backgroundColor</code>，不是CSS里面的<code>background-Color</code>。记得所有的像css属性的text-*，line-*、backgroun-*等在js中都写成驼峰</li></ul></li></ul></li><li><p>onload事件</p><ul><li><p>当页面加载文本和图片完毕后,触发onload事件</p></li><li><p>有一点我们要知道：<strong>js的加载是和html同步加载的</strong>。因此，如果使用元素在定义元素之前，容易报错。这个时候，onload事件就能派上用场了，我们可以把使用元素的代码放在onload里，就能保证这段代码是最后执行。</p><p>建议是：整个页面上所有元素加载完毕在执行js内容。所以，window.onload可以预防使用标签在定义标签之前。</p></li><li><p>onload事件(屏幕可视区域)</p><ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">                <span class="token comment" spellcheck="true">// 屏幕的可视区域</span>        window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// document.documentElement 获取的是html标签</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 窗口大小发生变化时，会调用此方法</span>            window<span class="token punctuation">.</span>onresize <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                           <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>onload事件(offset系列)</p><ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token selector">*</span><span class="token punctuation">{</span>                <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">2000</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"> <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> green</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">5</span>px solid red<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span><span class="token number">50</span>px<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">/*             offsetWidth占位宽  内容+padding+border             offsetHeight占位高              * offsetTop: 如果盒子没有设置定位 到body的顶部的距离,如果盒子设置定位，那么是以父辈为基准的top值             * offsetLeft： 如果盒子没有设置定位 到body的左部的距离，如果盒子设置定位，那么是以父辈为基准的left值                          * */</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>offsetTop<span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">)</span>                    <span class="token punctuation">}</span>            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>onscroll事件</p><ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token selector">*</span><span class="token punctuation">{</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">2000</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">2000</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        &lt;div id = 'scroll' style="width: 200px;height: 200px;border: 1px solid red;overflow: auto;padding: 10px;margin: 5px 0px 0px 0px;">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城                路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城                路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城                路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">                window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//实施监听滚动事件</span>            window<span class="token punctuation">.</span>onscroll <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//                console.log(1111)</span><span class="token comment" spellcheck="true">//                console.log('上'+document.documentElement.scrollTop)</span><span class="token comment" spellcheck="true">//                console.log('左'+document.documentElement.scrollLeft)</span><span class="token comment" spellcheck="true">//                console.log('宽'+document.documentElement.scrollWidth)</span><span class="token comment" spellcheck="true">//                console.log('高'+document.documentElement.scrollHeight)</span>                                            <span class="token punctuation">}</span>                        <span class="token keyword">var</span> s <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        s<span class="token punctuation">.</span>onscroll <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            scrollHeight : 内容的高度+padding  不包含边框</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'上'</span><span class="token operator">+</span>s<span class="token punctuation">.</span>scrollTop<span class="token punctuation">)</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'左'</span><span class="token operator">+</span>s<span class="token punctuation">.</span>scrollLeft<span class="token punctuation">)</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'宽'</span><span class="token operator">+</span>s<span class="token punctuation">.</span>scrollWidth<span class="token punctuation">)</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'高'</span><span class="token operator">+</span>s<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="BOM-浏览器对象模型"><a href="#BOM-浏览器对象模型" class="headerlink" title="BOM:浏览器对象模型"></a>BOM:浏览器对象模型</h2><h3 id="1-BOM-Browser-Object-Model-浏览器对象模型"><a href="#1-BOM-Browser-Object-Model-浏览器对象模型" class="headerlink" title="1.BOM: Browser Object Model,浏览器对象模型"></a>1.BOM: Browser Object Model,浏览器对象模型</h3><ul><li>结构图<ul><li><img src="https://images2018.cnblogs.com/blog/1364810/201805/1364810-20180529172315923-104404745.png" alt="img"></li><li>window对象是BOM的顶层(核心)对象,所有对象都是通过它延伸出来的,也可以成为window的子对象</li><li>DOM是BOM的一部分</li></ul></li></ul><h3 id="2-BOM常见的内置方法和内置对象"><a href="#2-BOM常见的内置方法和内置对象" class="headerlink" title="2.BOM常见的内置方法和内置对象"></a>2.BOM常见的内置方法和内置对象</h3><ul><li><p>window对象</p><ul><li><p>弹出系统对话框</p><ul><li><pre class="line-numbers language-html"><code class="language-html">alert();    //不同浏览器中的外观是不一样的confirm();  //兼容不好prompt();   //不推荐使用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>打开窗口,关闭窗口</p><ul><li><p>打开窗口</p><ul><li><pre class="line-numbers language-html"><code class="language-html">window.open(url,target)//url：要打开的地址。//target：新窗口的位置。可以是：_blank 、_self、 _parent 父框架。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>关闭窗口</p><ul><li><pre class="line-numbers language-html"><code class="language-html">window.close() - 关闭当前窗口 (只能关闭用js的window.open()打开的页面，了解一下就行了)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li><li><p>获取窗口宽高</p><ul><li><pre class="line-numbers language-html"><code class="language-html">window.innerHeight - 浏览器窗口的内部高度window.innerWidth - 浏览器窗口的内部宽度 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>定时器</p><ul><li><p>setTimeOut():在指定时间后执行一次</p><ul><li><pre class="line-numbers language-html"><code class="language-html">/定时器 异步运行  function hello(){  alert("hello");  }  //使用方法名字执行方法  var t1 = window.setTimeout(hello,1000);  var t2 = window.setTimeout("hello()",3000);//使用字符串执行方法  window.clearTimeout(t1);//去掉定时器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>setInterval():指定时间为周期循环执行</p><ul><li><pre class="line-numbers language-html"><code class="language-html">/实时刷新  时间单位为毫秒  var t = setInterval('refreshQuery()',8000);   /* 刷新查询 */  function refreshQuery(){    console.log('每8秒调一次') }window.clearInterval(t)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul></li><li><p>location对象</p><ul><li><p>window.location可以简写成location,location相当于浏览器的地址栏,可以将url解析成独立的片段</p></li><li><p>属性</p><ul><li><p>href:跳转</p><ul><li><p>页面不存在时5秒后跳转到指定页面,可以用location</p></li><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"http://www.baidu.com"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>点击盒子时进行跳转</p></li><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>smyhvae<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"http://www.baidu.com"</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//点击div时，跳转到指定链接</span> <span class="token comment" spellcheck="true">//     window.open("http://www.baidu.com","_blank");  //方式二</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>location.reload()重新加载:</p></li><li><pre class="line-numbers language-html"><code class="language-html">setTimeout(function(){         //3秒之后让网页整个刷新    window.location.reload();                        },3000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>hash 返回url中#后面的内容,包含#</p></li><li><p>host 主机名,包括端口</p></li><li><p>hostname 主机名</p></li><li><p>pathname url中的路径部分</p></li><li><p>protocal 协议,一般是http,https</p></li><li><p>search 查询字符串</p></li></ul></li></ul></li><li><p>navigator对象</p><ul><li><p>window.navigator的一些属性可以获取客户端的一些信息</p><ul><li>userAgent:系统,浏览器</li><li>platform : 浏览器支持的系统,win/mac/linux</li></ul></li><li><p>例子</p><ul><li><pre class="line-numbers language-html"><code class="language-html">console.log(navigator.userAgent);console.log(navigator.platform);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>history对象</p><ul><li><p>后退</p><ul><li><pre class="line-numbers language-html"><code class="language-html">history.back()history.go(-1)：0是刷新<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>前进</p><ul><li><pre class="line-numbers language-html"><code class="language-html">history.forward()history.go(1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>screen对象(了解)</p><ul><li><p>屏幕对象,不常用</p></li><li><pre class="line-numbers language-html"><code class="language-html">screen.availWidth - 可用的屏幕宽度screen.availHeight - 可用的屏幕高度<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul><h1 id="jQuery篇"><a href="#jQuery篇" class="headerlink" title="jQuery篇"></a>jQuery篇</h1><h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><h3 id="1-为什么使用jQuery"><a href="#1-为什么使用jQuery" class="headerlink" title="1.为什么使用jQuery?"></a>1.为什么使用jQuery?</h3><ul><li><p>js中window onload事件只能出现一次,如果出现多次,后面的事件会覆盖掉前面的事件</p></li><li><p>js代码容错差</p></li><li><p>简单的动画效果实现很繁琐,例如简单的动画渐变效果</p></li><li><p>jQuery的两大特点</p><ul><li>链式编程:比如 .show() 和. html()可以连写为.show().html().</li><li>隐式迭代 : 隐式对应的是显式,隐式迭代的意思是: 在方法的内部循环遍历,而不用我们自己再进行循环,简化我们的操作,方便我们调用</li></ul></li></ul><h3 id="2-什么是Jquery"><a href="#2-什么是Jquery" class="headerlink" title="2.什么是Jquery"></a>2.什么是Jquery</h3><ul><li><p>Jquery是js的一个库,封装了我们开发过程中常用的一些功能,方便我们调用,提高开发效率</p></li><li><p>js库是把我们常用的复杂功能封装到简单的方法中,我们用的时候,将库直接引入然后调用方法即可<img src="https://img2018.cnblogs.com/blog/827651/201908/827651-20190814214439879-287447194.png" alt="img"></p></li><li><p>使用步骤</p><ul><li><img src="https://img2018.cnblogs.com/blog/827651/201908/827651-20190803010126992-1481898717.png" alt="img"></li></ul></li><li><p>导入包的代码一定要放在js代码的最上面</p></li></ul><h3 id="3-入口函数"><a href="#3-入口函数" class="headerlink" title="3.入口函数"></a>3.入口函数</h3><ul><li><p>原生的js’的入口函数指的是:window.onload = function() {}</p></li><li><p>jQuery的入口函数,有以下几个写法</p><ul><li><p>写法一: 文档加载完毕,图片不加字啊的时候,可以执行这个函数</p><ul><li><pre class="line-numbers language-html"><code class="language-html">$(document).ready(function () {           alert(1);       })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>写法二: 写法一的简洁版</p><ul><li><pre class="line-numbers language-html"><code class="language-html">$(function () {           alert(1);       });<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>写法三: 文档加载完毕,图片也加载完毕的时候,在执行这个函数</p><ul><li><pre class="line-numbers language-html"><code class="language-html">$(window).ready(function () {           alert(1);       })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>jQuery入口函数与js入口函数的区别</p><ul><li><p>书写个数不同:</p><ul><li>js的入口函数只能出现一次,出现多次会存在事件覆盖效果</li><li>jQuery的入口函数&lt;可以出现任意多次,并不存在事件覆盖效果</li></ul></li><li><p>执行时机不同</p><ul><li>js的入口函数是在所有的文件资源加载完成后,才执行,这些文件资源包括:页面文档,外部的js文件,外部的css文件,图片等</li><li>jQuery的入口函数,是在文档加载完成后,再执行,文档加载完成指的是:DOM树加载完成后,就可以操作DOM了,不用等到所有额外部资源都加载完毕</li></ul></li></ul></li></ul><h3 id="4-jQuery的-符号"><a href="#4-jQuery的-符号" class="headerlink" title="4.jQuery的$符号"></a>4.jQuery的$符号</h3><ul><li>jQuery使用$的原因:书写简洁,相对于其他字符与众不同,容易被记住,</li><li>Jquery占用了我们两个变量: $和JQuery.在代码中这两个变量都是一样的</li></ul><h3 id="5-js中的DOM对象和jQuery对象的比较重点"><a href="#5-js中的DOM对象和jQuery对象的比较重点" class="headerlink" title="5.js中的DOM对象和jQuery对象的比较重点"></a>5.js中的DOM对象和jQuery对象的比较<font color="yellow">重点</font></h3><ul><li><p>二者的区别</p><ul><li><p>通过Jquery获取的元素是一个jq对象数组,其中包含着原生js中的DOM对象,</p></li><li><p>对于这样一个div结构</p><ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>js获取元素节点方式</p><ul><li><pre class="line-numbers language-html"><code class="language-html">    var myBox = document.getElementById("app");           //通过 id 获取单个元素    var boxArr = document.getElementsByClassName("box");  //通过 class 获取的是伪数组    var divArr = document.getElementsByTagName("div");    //通过标签获取的是伪数组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>jQuery获取这些元素节点的方式:(获取的都是数组)</p><ul><li><pre class="line-numbers language-html"><code class="language-html">//获取的是数组，里面包含着原生 JS 中的DOM对象。   　　console.log($('#app'));   　　console.log($('.box'));   　　console.log($('div'));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>总结:jQuery就是把DOM对象重新包装一下,让其具有jQuery方法\</p></li></ul></li></ul></li><li><p>二者的相互转换</p><ul><li><p>DOM对象转换为jQuery对象</p><ul><li><pre class="line-numbers language-html"><code class="language-html">$(js对象);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>jQuery对象转为DOM对象</p><ul><li><pre class="line-numbers language-html"><code class="language-html">jquery对象[index];      //方式1（推荐）jquery对象.get(index);  //方式2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>jquery对象转换成了DOM对象之后,可以直接调用DOM提供的一些功能,如\</p><ul><li><pre class="line-numbers language-html"><code class="language-html">$('div')[1].style.backgroundColor = 'yellow';$('div')[3].style.backgroundColor = 'green';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul><h3 id="6-jQuery的选择器"><a href="#6-jQuery的选择器" class="headerlink" title="6.jQuery的选择器"></a>6.jQuery的选择器</h3><ul><li><p>分为基本选择器,层级选择器,属性选择器</p></li><li><p>基本选择器</p><ul><li><pre><code>$("#id")         //id选择器$("tagName")     //标签选择器$(".className")  //class选择器$("*")           //通用选择器$("div.c1")      // 交集选择器 找到有含有c1类的div标签$("#id, .className, tagName") //并集选择器</code></pre></li></ul></li><li><p>层级选择器</p><ul><li><pre class="line-numbers language-html"><code class="language-html">$("x y");// x的所有后代y（子子孙孙）$("x > y");// x的所有儿子y（儿子）$("x + y")// 找到所有紧挨在x后面的y$("x ~ y")// x之后所有的兄弟y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>属性选择器</p><ul><li><pre class="line-numbers language-html"><code class="language-html">$('[href]')       //找所有含href属性的标签$('a[href]')      //找所有含href属性的a标签$('a[title="luffy"]') //找所有title属性是luffy的a标签$('a[title="baidu"]') //找所有title属性不是百度的a标签$('a[href^="https"]') //找所有href属性以https开头的a标签$('a[href$="html"]')  //找所有href属性以html结尾的a标签$('a[href*="i"]')  //找所有href属性中含有i的a标签$('a[href][title="luffy"]') //找所有含有href属性且title属性=luffy的a标签 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="7-jQuery的筛选器"><a href="#7-jQuery的筛选器" class="headerlink" title="7.jQuery的筛选器"></a>7.jQuery的筛选器</h3><ul><li><p>基本筛选器</p><ul><li><pre class="line-numbers language-html"><code class="language-html">:first // 第一个:last // 最后一个:eq(index)// 索引等于index的那个元素:even // 匹配所有索引值为偶数的元素，从 0 开始计数:odd // 匹配所有索引值为奇数的元素，从 0 开始计数:gt(index)// 匹配所有大于给定索引值的元素:lt(index)// 匹配所有小于给定索引值的元素:not(元素选择器)// 移除所有满足not条件的标签:has(元素选择器)// 根据含有某个后代筛选<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>表单筛选器</p><ul><li><pre class="line-numbers language-html"><code class="language-html">type筛选器:text:password:file:radio:checkbox:submit:reset:button<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>其他属性筛选器</p><ul><li><pre class="line-numbers language-html"><code class="language-html">:enabled:disabled:checked:selected<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="8-筛选器方法"><a href="#8-筛选器方法" class="headerlink" title="8.筛选器方法"></a>8.筛选器方法</h3><ul><li><pre class="line-numbers language-html"><code class="language-html">//找兄弟$("#id").siblings();// 兄弟们，不包含自己，.siblings('#id')，可以在添加选择器进行进一步筛选//找弟弟$("#id").next()$("#id").nextAll()$("#id").nextUntil("#i2") #直到找到id为i2的标签就结束查找，不包含它//找哥哥$("#id").prev()$("#id").prevAll()$("#id").prevUntil("#i2")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html">//找祖辈$("#id").parent()$("#id").parents()  // 查找当前元素的所有的父辈元素（爷爷辈、祖先辈都找到）$("#id").parentsUntil('body') // 查找当前元素的所有的父辈元素，直到遇到匹配的那个元素为止，这里直到body标签，不包含body标签，基本选择器都可以放到这里面使用。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html">//找儿子$("#id").children();// 儿子们<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html">//过滤$("div").first() // 获取匹配的第一个元素$("div").last() // 获取匹配的最后一个元素$("div").eq(n) // 索引值等于指定值的元素，n是索引$("div").not() // 从匹配元素的集合中删除与指定表达式匹配的元素$("div").find("p") //后代选择器，在所有div标签中找后代的p标签$("div").filter(".c1")  // 交集选择器，从结果集中过滤出有c1样式类的$("div").has() // 保留包含特定后代的元素，去掉那些不含有指定后代的元素。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="9-jQuery绑定事件"><a href="#9-jQuery绑定事件" class="headerlink" title="9.jQuery绑定事件"></a>9.jQuery绑定事件</h3><ul><li><pre class="line-numbers language-html"><code class="language-html">为button按钮绑定单击事件，单机按钮弹出警告框$('button').click(        function () {            alert('wahaha')        })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="10-jQuery操作标签"><a href="#10-jQuery操作标签" class="headerlink" title="10.jQuery操作标签"></a>10.jQuery操作标签</h3><ul><li><p>标签内文本操作</p><ul><li><p>html标签元素中所有的内容</p><pre class="line-numbers language-html"><code class="language-html">为button按钮绑定单击事件，单机按钮弹出警告框$('button').click(        function () {            alert('wahaha')        })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>text标签元素的文本内容</p><pre class="line-numbers language-html"><code class="language-html">//获取值：获取选中标签元素中的文本内容$('#box').text();//设置值：设置该所有的文本内容$('#box').text('<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度一下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>文档标签操作</p><ul><li><p>插入标签</p><ul><li><p>append和appendTo</p><pre class="line-numbers language-html"><code class="language-html">//追加某元素，在父元素中添加新的子元素。子元素可以为：stirng | element（js对象） | jquery元素父元素.append(子元素)//追加到某元素，子元素添加到父元素子元素.appendTo(父元素)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html">//appendvar oli = document.createElement('li');oli.innerHTML = '哈哈哈';$('ul').append('<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1233<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>');$('ul').append(oli);$('ul').append($('#app'));//appendTo$('<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>天王盖地虎<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>').appendTo($('ul')).addClass('active')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意:如果追加的jQuery对原本在文档树中,那么这些元素将从原位置上消失,简言之就是移动操作</p></li><li><p>prepend和prependTo</p><pre class="line-numbers language-html"><code class="language-html">// 前置添加， 添加到父元素的第一个位置父元素.prepend(子元素)；// 前置添加， 添加到父元素的第一个位置子元素.prependTo(父元素)；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>after和insertAfter</p><pre class="line-numbers language-html"><code class="language-html">// 在匹配的元素之后插入内容 兄弟元素.after(要插入的兄弟元素)；要插入的兄弟元素.inserAfter(兄弟元素)；$('ul').after('<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>我是一个h3标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>')$('<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span>我是一个h2标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>').insertAfter('ul')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>before和onsertBefore</p><pre class="line-numbers language-html"><code class="language-html">// 在匹配的元素之前插入内容兄弟元素.before(要插入的兄弟元素)；要插入的兄弟元素.inserBefore(兄弟元素)； //示例$('ul').before('<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>我是一个h3标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>')$('<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>我是一个h2标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>').insertBefore('ul')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>删除标签</p><ul><li><pre class="line-numbers language-html"><code class="language-html">//删除节点后，事件也会删除（简言之，删除了整个标签）$(selector).remove(); // 删除节点后，事件会保留$(selector).detach(); // 清空选中元素中的所有后代节点$(selector).empty(); <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>修改标签</p><ul><li><pre class="line-numbers language-html"><code class="language-html">// selector被替换：将所有匹配的元素替换成指定的string、js对象、jquery对象。$(selector).replaceWith(content);// selector被替换：将所有的匹配的元素替换成p标签。$('<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>哈哈哈<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>')replaceAll(selector);// replaceWith $('h5').replaceWith('<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>') //将所有的h5标题替换为a标签$('h5').replaceWith($('#app')); //将所有h5标题标签替换成id为app的dom元素// replaceAll$('<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>').replaceAll('h4')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>克隆标签</p><ul><li><pre class="line-numbers language-html"><code class="language-html">$('button').click(function() { // 1.clone()：克隆匹配的DOM元素 // 2.clone(true)：元素以及其所有的事件处理并且选中这些克隆的副本(简言之，副本具有与真身一样的事件处理能力)  $(this).clone(true).insertAfter(this);})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>属性操作</p><ul><li><p>atter()设置属性值或者获取值</p><pre><code>//获取值：attr()设置一个属性值的时候 只是获取值$('div').attr('id')$('div').attr('class')//设置值$('div').attr('class','box') //设置一个值$('div').attr({name:'hahaha',class:'happy'}) //设置多个值</code></pre></li><li><p>removeAttr()移除属性</p><pre><code>//删除单个属性$('#box').removeAttr('name');$('#box').removeAttr('class');//删除多个属性$('#box').removeAttr('name class');</code></pre></li><li><p>prop()</p><pre><code>// 查看属性$(selector).prop(property)// 设置属性$(selector).prop(property,value)// 设置多个属性$(selector).prop({property:value, property:value,...})</code></pre></li></ul></li><li><p>class类属性</p><ul><li><p>addClass添加类名</p><pre class="line-numbers language-html"><code class="language-html">// 为每个匹配的元素添加指定的类名。$('div').addClass("box");//追加一个$('div').addClass("box box2");//追加多个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>removeClass移除类名</p><pre class="line-numbers language-html"><code class="language-html">// 从所有匹配的元素中删除全部或者指定的类。$('div').removeClass('box')；//移除box类$('div').removeClass();//移除全部的类<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>toggleClass类的切换</p><pre class="line-numbers language-html"><code class="language-html">// 如果存在（不存在）就删除（添加）一个类。$('div').toggleClass('box')$('span').click(function(){    //动态的切换class类名为active    $(this).toggleClass('active')})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>val表单控制Value属性</p><ul><li><pre class="line-numbers language-html"><code class="language-html">// 获取值：用于表单控件中获取值，比如input textarea select等等$(selector).val()// 设置值：$('input').val('设置了表单控件中的值')；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>css样式</p><pre class="line-numbers language-html"><code class="language-html">// css(直接修改css的属性来修改样式)$("div").css('color'); //获取$("p").css("color", "red"); //设置$("p").css({"color":"red","background-color":"yello"}); // 设置多个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>盒子样式属性</p><ul><li><p>内容:宽度(width)和高度(height)</p></li><li><p>内容+padding:宽度(innerWidth) 高度(innerHeight)</p></li><li><p>内容+padding+border:宽度(outerWidth) 高度(outerHeight)</p><pre class="line-numbers language-html"><code class="language-html">// 外部宽 .outerWidth() //获取第一个匹配元素 ：内容+padding+border的宽 .outerWidth(true) //获取第一个匹配元素：内容+padding+border+margin的宽 .outerWidth(value) //设置多个，调整的是“内容”的宽//外部高 .outerHeight() //第一个匹配元素：获取内容+padding+border的高 .outerHeight(true) //第一个匹配元素：获取内容+padding+border+margin的高 .outerHeight( value ) //设置多个，调整的是“内容”的高<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>滚动条距离属性</p><pre class="line-numbers language-htm"><code class="language-htm">// 水平方向.scrollLeft()      //获取.scrollLeft( value )//设置// 垂直方向.scrollTop() //获取.scrollTop( value ) //设置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="jQuery动画效果"><a href="#jQuery动画效果" class="headerlink" title="jQuery动画效果"></a>jQuery动画效果</h2><h3 id="1-显示动画"><a href="#1-显示动画" class="headerlink" title="1.显示动画"></a>1.显示动画</h3><ul><li><p>无参数,让指定的元素显现出来,底层通过display:block实现</p><ul><li><pre class="line-numbers language-html"><code class="language-html">$("div").show();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>通过控制元素的宽高,透明度,display属性,逐渐显示,例如3秒后显示完毕</p><ul><li><pre class="line-numbers language-html"><code class="language-html">$('div').show(3000);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>参数</p><ul><li>slow 慢:600ms</li><li>normal 正常 400ms</li><li>fast 快:200ms</li></ul></li><li><p>动画执行完毕后立即执行回调函数</p><ul><li><pre class="line-numbers language-html"><code class="language-html">//show(毫秒值，回调函数;   $("div").show(5000,function () {       alert("动画执行完毕！");   );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul><h3 id="2-隐藏动画"><a href="#2-隐藏动画" class="headerlink" title="2.隐藏动画"></a>2.隐藏动画</h3><ul><li><pre class="line-numbers language-html"><code class="language-html">    $(selector).hide();    $(selector).hide(1000);     $(selector).hide("slow");    $(selector).hide(1000, function(){});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-开关式显示隐藏动画"><a href="#3-开关式显示隐藏动画" class="headerlink" title="3.开关式显示隐藏动画"></a>3.开关式显示隐藏动画</h3><ul><li><pre class="line-numbers language-html"><code class="language-html">$('#box').toggle(3000,function(){});<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>显示和隐藏的拉回切换采用的是toggle()方法,就是先执行show(),再执行hide()</p></li><li><pre class="line-numbers language-html"><code class="language-html">    $('#btn').click(function(){            $('#box').toggle(3000,function(){                $(this).text('盒子出来了');                    if ($('#btn').text()=='隐藏') {                    $('#btn').text('显示');                    }else{                    $('#btn').text('隐藏');                    }            });        })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="4-滑入和滑出"><a href="#4-滑入和滑出" class="headerlink" title="4.滑入和滑出"></a>4.滑入和滑出</h3><ul><li><p>滑入,下拉动画,显示元素</p><ul><li><pre class="line-numbers language-html"><code class="language-html">$(selector).slideDown(speed, 回调函数);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>滑出,上拉动画,隐藏元素</p><ul><li><pre class="line-numbers language-html"><code class="language-html">$(selector).slideUp(speed, 回调函数);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>滑入滑出动画效果切换</p><ul><li><pre><code>$(selector).slideToggle(speed, 回调函数);</code></pre></li></ul></li></ul><h3 id="5-淡入淡出效果"><a href="#5-淡入淡出效果" class="headerlink" title="5.淡入淡出效果"></a>5.淡入淡出效果</h3><ul><li><p>淡入动画效果,</p><ul><li><pre><code>$(selector).fadeIn(speed, callback);</code></pre></li></ul></li><li><p>淡出动画效果</p><ul><li><pre><code>$(selector).fadeOut(1000);</code></pre></li></ul></li><li><p>淡入淡出动画效果来回切换</p><ul><li><pre class="line-numbers language-HTML"><code class="language-HTML">$(selector).fadeToggle('fast', callback);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><h3 id="6-自定义动画"><a href="#6-自定义动画" class="headerlink" title="6.自定义动画"></a>6.自定义动画</h3><ul><li><pre class="line-numbers language-html"><code class="language-html">$(selector).animate({params}, speed, callback);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>作用:执行一组CSS属性的自定义动画</p><ul><li>第一个参数:要执行动画的CSS属性(必选)</li><li>第二个参数:执行动画的时长:可选</li><li>第三个动画:动画执行完毕后,立即执行的回调函数(可选)</li></ul></li></ul><h3 id="7-停止动画"><a href="#7-停止动画" class="headerlink" title="7.停止动画"></a>7.停止动画</h3><ul><li><pre class="line-numbers language-html"><code class="language-html">$(selector).stop(true, false);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>参数说明</p><ul><li>第一个参数:true表示后续动画不执行,false表示后续动画执行</li><li>第二个参数:true表示立即执行完成当前动画,false表示立即停止当前动画</li><li>如果参数都不写,默认两个参数都是false,实际常用的是stop(),</li></ul></li></ul><h2 id="jQuery的事件操作"><a href="#jQuery的事件操作" class="headerlink" title="jQuery的事件操作"></a>jQuery的事件操作</h2><h3 id="1-绑定事件"><a href="#1-绑定事件" class="headerlink" title="1.绑定事件"></a>1.绑定事件</h3><ul><li><pre class="line-numbers language-html"><code class="language-html">bind(type,data,fn)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>参数说明</p><ul><li><p>type(string) :事件类型</p></li><li><p>data(Object):可选,作为event.data属性值传递给事件对象的额外数据对象</p></li><li><p>fn(Function) : 绑定到每个匹配元素的事件上面的处理函数</p></li><li><p>示例:当每个p标签被点击时,弹出其文本</p><ul><li><pre class="line-numbers language-html"><code class="language-html">$("p").bind("click", function(){  alert( $(this).text() );});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>示例:事件处理之前传递一些附加的数据</p><ul><li><pre class="line-numbers language-html"><code class="language-html">function handler(event) {//event.data 可以获取bind()方法的第二个参数的数据  alert(event.data.foo);}$("p").bind("click", {foo: "bar"}, handler)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>常见事件</p><ul><li><pre class="line-numbers language-html"><code class="language-html">click(function(){...})hover(function(){...})blur(function(){...})focus(function(){...})change(function(){...}) //内容发生变化，input，select等keyup(function(){...})  mouseover/mouseoutmouseenter/mouseleavemouseover事件是如果该标签有子标签，那么移动到该标签或者移动到子标签时会连续触发，mouseenter事件不管有没有子标签都只触发一次，表示鼠标进入这个对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过返回false来取消默认的行为来阻止事件起泡</p><ul><li><pre class="line-numbers language-html"><code class="language-html">$("form").bind("submit", function() { return false; })<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>通过event.preventDefault()方法来阻止事件起泡</p><ul><li><pre class="line-numbers language-html"><code class="language-html">$("form").bind("submit", function(event){  event.stopPropagation();});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul></li></ul><h3 id="2-解绑事件"><a href="#2-解绑事件" class="headerlink" title="2.解绑事件"></a>2.解绑事件</h3><ul><li><pre class="line-numbers language-html"><code class="language-html">unbind(type,fn);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>描述:bind()的反向操作,从每一个匹配的元素中删除绑定的事件,如果没有参数,则删除所有的绑定事件,如果把绑定时传递的处理函数作为第二个参数,则只有这个特定的事件处理函数会被删除</p></li><li><p>参数说明</p><ul><li><pre class="line-numbers language-html"><code class="language-html">type (String) : (可选) 事件类型fn(Function) : (可选) 要从每个匹配元素的事件中反绑定的事件处理函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="3-补充一次性事件"><a href="#3-补充一次性事件" class="headerlink" title="3.补充一次性事件"></a>3.补充一次性事件</h3><ul><li><pre class="line-numbers language-html"><code class="language-html">one(type,data,fn)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>描述:为每一个匹配的元素的特定事件,像(click)绑定一个一次性的事件处理函数,在每个对象上,这个事件处理函数只会被执行一次,其他规则与bind()函数相同</p></li><li><p>参数说明</p><ul><li><pre class="line-numbers language-html"><code class="language-html">type (String) : 事件类型data (Object) : (可选) 作为event.data属性值传递给事件对象的额外数据对象fn (Function) : 绑定到每个匹配元素的事件上面的处理函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>示例:当所有段落被第一次点击的时候,显示所有其文本</p><ul><li><pre class="line-numbers language-html"><code class="language-html">$("p").one("click", function(){//只有第一次点击的时候才会触发，再次点击不会触发了  alert( $(this).text() );});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="4-事件委托-事件代理"><a href="#4-事件委托-事件代理" class="headerlink" title="4.事件委托(事件代理)"></a>4.事件委托(事件代理)</h3><ul><li><p>原理:利用冒泡的原理,把事件加到父级上,触发执行效果</p></li><li><p>作用:</p><ul><li>性能要好</li><li>针对新创新的元素,直接可以拥有事件</li></ul></li><li><p>事件源:</p><ul><li>跟this作用一样(他不用看指向问题,谁操作的就是谁),event对象下的</li></ul></li><li><p>使用情景</p><ul><li><p>为DOM中的很多元素绑定的相同事件</p></li><li><p>为DOM中尚不存在的元素绑定事件</p></li><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>luffy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>路飞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>路飞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>路飞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jquery-3.2.1.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//通过on()方法</span>     <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token string">'#namei,.luffy'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">//未来追加的元素 </span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'&lt;a id="namei">娜美&lt;/a>'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>语法:在选定的元素上绑定一个或者多个事件处理函数</p><ul><li><pre class="line-numbers language-html"><code class="language-html">on(type,selector,data,fn);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>参数说明</p><ul><li>events(String) : 一个或多个空格分隔的事件类型</li><li>selector(String) : 一个选择器字符串,用于过滤出被选中的元素中能触发事件的后代元素</li><li>data:当一个事件被触发时,要传递给事件处理函数的event.data.</li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于ts</title>
      <link href="/2021/09/26/%E5%85%B3%E4%BA%8Ets/"/>
      <url>/2021/09/26/%E5%85%B3%E4%BA%8Ets/</url>
      
        <content type="html"><![CDATA[<h1 id="1、TS初见"><a href="#1、TS初见" class="headerlink" title="1、TS初见"></a>1、TS初见</h1><h2 id="1-1、为什么要有-TypeScript"><a href="#1-1、为什么要有-TypeScript" class="headerlink" title="1.1、为什么要有 TypeScript"></a>1.1、为什么要有 TypeScript</h2><p>TypeScript是JavaScript的超集，因为它扩展了JavaScript，有JavaScript没有的东西。硬要以父子类关系来说的话，TypeScript是JavaScript子类，继承的基础上去扩展。</p><p>`TypeScript的初衷就是为了做类型检查，提早发现错误，所以「类型」是其最核心的特性。当然它只是给出你代码可能不会按预期执行的警告，比如你未按照声明的类型传参，你的代码还是可以运行的。这一点与强类型语言还是有本质的区别，强类型语言会直接导致编译不通过，因为TypeScript只是转译。跟JavaScript不同，TypeScript文件后缀使用 .ts扩展名。浏览器是不识别 .ts 文件，所以使用时必须提前把 TS 代码转换成 JavaScript 代码。这个转换过程被称为转译，编译和转译的微小差别在于：</p><p>编译是把源码转变成另一种语言<br>转译是把源码转变另一个相同抽象层级的语言</p><h2 id="1-2、前提准备"><a href="#1-2、前提准备" class="headerlink" title="1.2、前提准备"></a>1.2、前提准备</h2><ul><li>安装 node环境下安装 npm install -g typescript</li><li>手动编译 tsc  **.ts</li><li>vscode自动编译 tsc –init 在tsconfig.js中配置，在终端打开tsc监视即可</li><li>ts语法提示错误，不影响js的编译，因为js是弱类型语言（如类型注解不通过）</li></ul><pre class="line-numbers language-tsx"><code class="language-tsx">// 类型注解 一种轻量级的为函数或变量添加约束(() => {    function showMsg(str:String) {        return str + '123214'    }    let str = "woshi"    console.log(showMsg(str));    })()// 接口演示 定义接口(() => {    interface Iperson{        fristName:string,        lastName:string    }    // 输出对象    function showFullName(person:Iperson) {        return person.fristName + person.lastName    }    // 定义对象    const person = {        fristName: 'dongfnag',        lastName: 'yuechu'    }    // 打印    console.log(showFullName(person))})()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3、基础类型"><a href="#1-3、基础类型" class="headerlink" title="1.3、基础类型"></a>1.3、基础类型</h2><h3 id="1、布尔-数字-字符串"><a href="#1、布尔-数字-字符串" class="headerlink" title="1、布尔 数字 字符串"></a>1、布尔 数字 字符串</h3><pre class="line-numbers language-tsx"><code class="language-tsx">    let a:boolean = true    let b:number = 1010    let c:string = '字符串'        //字符串可与数字拼接 TS中变量一开始是什么类型就只能用这个类型，不允许混用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、undefined-amp-null"><a href="#2、undefined-amp-null" class="headerlink" title="2、undefined &amp; null"></a>2、undefined &amp; null</h3><pre class="line-numbers language-tsx"><code class="language-tsx">    let und:undefined = undefined    let nul:null = null    // 给其他类型赋予    let num:number = null    let num:number = undefined        // undefined和null 可以作为其他类型的子类型，可以将undef和null赋予其他类型（需关闭ts严格模式）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、-数组和元组"><a href="#3、-数组和元组" class="headerlink" title="3、 数组和元组"></a>3、 数组和元组</h3><pre class="line-numbers language-tsx"><code class="language-tsx">数组定义方式1let arr:number[] = [10,20,30]数组定义方式2(泛型写法)let arr:Array<number> = [1,2,3]元组Tuplelet arr:[string,boolean] = ['字符串', true]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、Enum枚举-（ts补充）void"><a href="#4、Enum枚举-（ts补充）void" class="headerlink" title="4、Enum枚举 （ts补充）void"></a>4、Enum枚举 （ts补充）void</h3><p>使用枚举类型可以为一组赋值赋予友好的名字</p><p>void没有返回值的类型，打印undefined</p><h3 id="5、any-amp-unknown"><a href="#5、any-amp-unknown" class="headerlink" title="5、any &amp; unknown"></a>5、any &amp; unknown</h3><p><code>unknown</code>与<code>any</code>的最大区别是：</p><p>unknown是 top type(任何类型都是它的 subtype) , 而 <code>any</code> 既是 <code>top type</code>, 又是 <code>bottom type</code> (它是任何类型的 <code>subtype</code> ) , 这导致 <code>any</code> 基本上就是放弃了任何类型检查。因为<code>any</code>既是<code>top type</code>, 又是 <code>bottom type</code>，所以任何类型的值可以赋值给<code>any</code>，同时<code>any</code>类型的值也可以赋值给任何类型。但<code>unknown</code> 只是 <code>top type</code>，任何类型的值都可以赋值给它，但它只能赋值给<code>unknown</code>和<code>any</code>，因为只有它俩是<code>top type</code>。</p><pre class="line-numbers language-tsx"><code class="language-tsx">// any`会跳过类型检查器对值的检查，任何值都可以赋值给`any`类型，它通常被称为`top typelet notSure: any = 4;notSure = "maybe a string instead"; // OKnotSure = false; // OK// unknown与any一样，所有类型都可以分配给unknown:let notSure: unknown = 4;notSure = "maybe a string instead"; // OKnotSure = false; // OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6、object-amp-never"><a href="#6、object-amp-never" class="headerlink" title="6、object &amp; never"></a>6、object &amp; never</h3><p><code>never</code>类型表示的是那些永不存在的值的类型。</p><p>==<code>never</code>与其他类型的联合后，是没有<code>never</code>的==</p><p>值会永不存在的两种情况：</p><ol><li><p>如果一个函数执行时抛出了<strong>异常</strong>，那么这个函数永远不存在返回值（因为抛出异常会直接中断程序运行，这使得程序运行不到返回值那一步，即具有不可达的终点，也就永不存在返回了）；</p></li><li><p>函数中执行无限循环的代码（<strong>死循环</strong>），使得程序永远无法运行到函数返回值那一步，永不存在返回。</p></li><li><p><code>never</code>类型同<code>null</code>和<code>undefined</code>一样，也是任何类型的子类型，也可以赋值给任何类型：</p></li><li><p>但是没有类型是<code>never</code>的子类型或可以赋值给<code>never</code>类型（除了<code>never</code>本身之外），即使<code>any</code>也不可以赋值给<code>never</code>：</p></li></ol><pre class="line-numbers language-tsx"><code class="language-tsx">object    function getobj(obj:object):object {        console.log(obj)        return {            name: 'kakaxi'        }    }    console.log(getobj({name: '213'}));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-4、类型（联合-断言-交叉-推断）"><a href="#1-4、类型（联合-断言-交叉-推断）" class="headerlink" title="1.4、类型（联合 断言 交叉 推断）"></a>1.4、类型（联合 断言 交叉 推断）</h2><h3 id="1-1、联合类型"><a href="#1-1、联合类型" class="headerlink" title="1.1、联合类型"></a>1.1、联合类型</h3><p>联合类型表示取值可以为多种类型中的一种，使用 <code>|</code> 分隔每个类型。当任意属性使用联合类型且属性中存在可选属性时，需要联合<code>undefined</code>类型，否则编译报错，原因显而易见，因为可选属性可有可无</p><pre class="line-numbers language-tsx"><code class="language-tsx">    let a: string | number    a = 'ok',    a = 11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-2、类型断言"><a href="#1-2、类型断言" class="headerlink" title="1.2、类型断言"></a>1.2、类型断言</h3><p>类型断言好比其它语言里的类型转换，类型转换通常发生在你比<code>TS</code>更了解某个值的详细信息的时候。==(相当于告诉编译器，我知道我是什么类型，知道在干什莫，相信我！按我说的处理)==</p><pre class="line-numbers language-tsx"><code class="language-tsx">// 类型断言两种方法<> he as// 例：<>断定变量str为字符串类型(<string>str)// as方法(str as string)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3、类型推断"><a href="#1-3、类型推断" class="headerlink" title="1.3、类型推断"></a>1.3、类型推断</h3><p>如果没有指定明确的类型，那么TS会按照类型推论的规则推断出一个类型，如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 <code>any</code> 类型而完全不被类型检查</p><h3 id="1-4、交叉类型"><a href="#1-4、交叉类型" class="headerlink" title="1.4、交叉类型"></a>1.4、交叉类型</h3><p>==交叉类型取的多个类型的并集，但是如果<code>key</code>相同但是类型不同，则该<code>key</code>为<code>never</code>类型==</p><p>交叉类型是将多个类型合并为一个类型。 这让我们可以把现有的多种类型叠加到一起成为一种类型，它包含了所需的所有类型的特性，使用<code>&amp;</code>定义交叉类型。</p><pre class="line-numbers language-tsx"><code class="language-tsx">interface A {  name: string,  age: number}interface B {  name: string,  gender: string}let a: A & B = { // OK    name: "兔兔",    age: 18,    gender: "男"};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-5、接口"><a href="#1-5、接口" class="headerlink" title="1.5、接口"></a>1.5、接口</h2><p>接口是对象状态（属性）和行为（方法）的抽象（描述）</p><p>（接口是一种类型 规范 规则 约束 能力）</p><p>可选属性readonly 只读属性？</p><pre class="line-numbers language-tsx"><code class="language-tsx">interface Props {   readonly name: string;   age: number;   money?: number;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于数组，<code>TS</code>还有<code>ReadonlyArray&lt;T&gt;</code>类型，此类型将数组的所有可变方法去掉了，因此可以确保数组创建后再也不能被修改：</p><p>==<code>readonly</code>声明的只读数组类型与<code>ReadonlyArray</code>声明的只读数组类型，二者等价==</p><h3 id="接口的继承"><a href="#接口的继承" class="headerlink" title="接口的继承"></a>接口的继承</h3><p>接口继承接口使用关键字extends ，继承的本质是复制，抽出共同的代码，所以子接口拥有父接口的类型定义</p><pre class="line-numbers language-tsx"><code class="language-tsx">interface Shape {    name: string}interface Square extends Shape {    age: number}let square: Square = {name: '雷'， age: 18} 接口可以多继承，大部分语言是不支持多继承的，原因是会引发混乱<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210907172322403.png" alt="image-20210907172322403"></p><h3 id="接口定义函数"><a href="#接口定义函数" class="headerlink" title="接口定义函数"></a>接口定义函数</h3><p>采用函数表达式接口定义函数的方式时，对等号左侧进行类型限制，可以保证以后对函数名赋值时保证参数个数、参数类型、返回值类型不变。</p><pre class="line-numbers language-tsx"><code class="language-tsx">interface SearchFunc {    (source: string, subString:string): boolean}// 左侧进行限制 限制参数为两个且必须为字符串类型，返回值必须为布尔型let mySearch: SearchFunc = function(source: string, subString:string) {  let result = source.search(subString);  return result >-1;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-6、函数"><a href="#1-6、函数" class="headerlink" title="1.6、函数"></a>1.6、函数</h2><h3 id="1-1、-函数声明-amp-函数表达式"><a href="#1-1、-函数声明-amp-函数表达式" class="headerlink" title="1.1、 函数声明 &amp; 函数表达式"></a>1.1、 函数声明 &amp; 函数表达式</h3><pre class="line-numbers language-tsx"><code class="language-tsx">// 声明function sum(x:number, y:number) {    return x + y}// 表达式let mysum:(x:number, y:number) => number = function(x;number, y:number):number {    return x + y}// 在 TypeScript 的类型定义中，=> 用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。切忌与ES6的箭头函数混淆了。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2、函数中的this声明"><a href="#1-2、函数中的this声明" class="headerlink" title="1.2、函数中的this声明"></a>1.2、函数中的<code>this</code>声明</h3><p>ts会通过代码流分析出this是属于什么类型，，当然我们也可以明确的指定函数中的this是什么类型，==this类型变量必须放在参数的首位==</p><pre class="line-numbers language-tsx"><code class="language-tsx">interface Obj {    fn: (this: Obj, name: string) => void;}let obj: Obj = {    fn(name: string) {}}let rab: Obj ={    fn(name: string) {}}obj.fn("兔兔"); // OKobj.fn.call(rab, "兔兔"); // OKobj.fn.call(window, "兔兔"); // Error: this 应该为 Obj 类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3、参数"><a href="#1-3、参数" class="headerlink" title="1.3、参数"></a>1.3、参数</h3><p><code>可选参数</code></p><p>​    参数后加问号（？）注：==可选参数后面不允许再出现必需参数==</p><p><code>参数默认值</code></p><p>​    在函数定义时，参数内直接赋值</p><pre class="line-numbers language-tsx"><code class="language-tsx">function buildName(firstName: string, lastName: string = 'Cat') {    return firstName + ' ' + lastName;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <code>剩余参数</code></p><p>同js，用 … 表示</p><pre><code>function push(array: any[], ...items: any[]) {    items.forEach(function(item) {        array.push(item);    });}let a = [];push(a, 1, 2, 3);</code></pre><h3 id="1-4、重载"><a href="#1-4、重载" class="headerlink" title="1.4、重载"></a>1.4、重载</h3><p>重载允许一个函数接受不同数量或类型的参数时，作出不同的处理。</p><p><code>重载</code>的概念在学<code>JAVA</code>（<a href="https://link.juejin.cn/?target=https://www.runoob.com/java/java-override-overload.html"><code>JAVA中的重载</code></a>）的时候接触到的，<code>JS</code>是没有这个概念的，<code>TS</code>的重载感觉更应该称之为<code>函数签名重载</code>。因为最后函数实现的内部还是依赖判断类型来处理，前面的函数定义只是为了精确表达输入类型对应的输出类型。</p><pre class="line-numbers language-tsx"><code class="language-tsx">function reverse(x: number | string): number | string | void {    if (typeof x === 'number') {        return Number(x.toString().split('').reverse().join(''));    } else if (typeof x === 'string') {        return x.split('').reverse().join('');    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-7、-类"><a href="#1-7、-类" class="headerlink" title="1.7、 类"></a>1.7、 类</h2><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><ul><li>public  属性修饰符默认为<code>public</code>公共的，即类的属性、方法可以在外部访问</li><li>private  与<code>public</code>相对，私有修饰符，即类的属性、方法不可以在外部访问</li><li>protected 修饰符与<code>private</code>修饰符的行为很相似，但有一点不同，<code>protected</code>成员在<strong>派生类</strong>中仍然可以访问。注意，这里是<strong>派生类中</strong>，而不是<strong>实例、子类实例</strong>。</li><li>readonly 只读属性修饰符 构造函数中可以对只读属性进行修改  <img src="image-20210910114715199.png" alt="image-20210910114715199"></li><li>发生继承关系后类与类的叫法<img src="image-20210909200925647.png" alt="image-20210909200925647"></li></ul><h3 id="参数属性"><a href="#参数属性" class="headerlink" title="参数属性"></a>参数属性</h3><p>我们也可以在类的内部方法上对参数使用<code>public、private、protected</code>修饰符，它的作用是可以更方便地让我们在一个地方定义并初始化一个成员。</p><pre class="line-numbers language-tsx"><code class="language-tsx">class Animal {    constructor(public name: string, private age: number, protected sex: string) {}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="接口实现类"><a href="#接口实现类" class="headerlink" title="接口实现类"></a>接口实现类</h3><p><code>TypeScript</code> 也能够用接口来明确的强制一个类去符合某种契约。类去实现接口，这里使用关键字<code>implements</code></p><pre class="line-numbers language-tsx"><code class="language-tsx">// 一个类可以实现多个接口interface Age {  age: number;}interface Title{  title: string;}class title implements Title, Age{  title: string = '兔兔';  age: number = 18;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>抽象类做为其它派生类的基类使用, 不允许被实例化。 不同于接口，抽象类可以包含成员的实现细节。 </p><p>抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。 抽象方法的语法与接口方法相似。 两者都是定义方法签名但不包含方法体。 然而，抽象方法必须包含<code>abstract</code>关键字并且可以包含访问修饰符。</p><p><code>abstract</code>关键字是用于定义抽象类和在抽象类内部定义抽象方法。</p><pre class="line-numbers language-tsx"><code class="language-tsx">abstract class Department {    constructor(public name: string) {    }    printName(): void {        console.log('Department name: ' + this.name);    }    abstract printMeeting(): void; // 必须在派生类中实现}class AccountingDepartment extends Department {    constructor() {        super('Accounting and Auditing'); // 在派生类的构造函数中必须调用 super()    }    printMeeting(): void {        console.log('The Accounting Department meets each Monday at 10am.');    }    generateReports(): void {        console.log('Generating accounting reports...');    }}let department: Department; // OK：允许创建一个对抽象类型的引用department = new Department(); // Error: 不能创建一个抽象类的实例department = new AccountingDepartment(); // OK：允许对一个抽象子类进行实例化和赋值department.printName(); // OKdepartment.printMeeting(); // OKdepartment.generateReports(); // Error: 方法在声明的抽象类中不存在<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-8、-泛型-lt-gt"><a href="#1-8、-泛型-lt-gt" class="headerlink" title="1.8、 泛型<>"></a>1.8、 泛型&lt;&gt;</h2><p>泛型是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>总结常用的一些类库</title>
      <link href="/2021/09/25/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93/"/>
      <url>/2021/09/25/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="总结常用的一些类库"><a href="#总结常用的一些类库" class="headerlink" title="总结常用的一些类库"></a>总结常用的一些类库</h1><h2 id="1-JS模板引擎"><a href="#1-JS模板引擎" class="headerlink" title="1. JS模板引擎"></a>1. JS模板引擎</h2><p>1.1 <a href="https://handlebarsjs.com/zh/">handlebars.js</a><br>1.2 <a href="https://ejs.bootcss.com/">ejs.js</a>  </p><blockquote><p>服务端和客户端都可以，捕获异常准确调试方便  </p></blockquote><p>1.3 <a href="https://aui.github.io/art-template/zh-cn/index.html">art-template.js</a>  </p><blockquote><p>分客户端（兼容IE8+，IE8需要加补丁），node端：express、koa，webpack端  </p></blockquote><h2 id="2-JS库"><a href="#2-JS库" class="headerlink" title="2. JS库"></a>2. JS库</h2><h3 id="1-jQuery，zepto-js"><a href="#1-jQuery，zepto-js" class="headerlink" title="1. jQuery，zepto.js"></a>1. <a href="https://jquery.com/">jQuery</a>，<a href="http://www.zeptojs.cn/">zepto.js</a></h3><blockquote><p>jQuery兼容许多老浏览器版本，1.x兼容到IE6，2.x只是相较于1.x移除了IE6/7/8的兼容，3.x相较于2.x增加了许多新特性。可以参照<a href="https://www.hangge.com/blog/cache/detail_2228.html">jQuery - 不同版本的差异汇总（版本选择建议</a>、<a href="https://www.hangge.com/blog/cache/detail_2235.html">jQuery - jQuery3的新特性汇总（附样例）</a><br>zepto相较于jQuery，则是针对Chrome和safria，更加轻量<br><a href="https://jqueryvalidation.org/documentation/">jquery-validation</a>表单验证插件。(jQuery, tested with 1.7.2, 1.8.3, 1.9.1, 1.11.1, 3.1.1)</p></blockquote><h3 id="2-backbone-js"><a href="#2-backbone-js" class="headerlink" title="2. backbone.js"></a>2. <a href="http://www.zeptojs.cn/">backbone.js</a></h3><blockquote><p>MVC前端框架<a href="https://github.com/the5fire/backbonejs-learning-note">Backbone.js入门教程第二版</a>  </p></blockquote><h3 id="3-popper-js"><a href="#3-popper-js" class="headerlink" title="3. popper.js"></a>3. <a href="https://popper.js.org/">popper.js</a></h3><blockquote><p>元素定位类库，许多UI框架都在使用。</p></blockquote><h2 id="koa2"><a href="#koa2" class="headerlink" title="koa2"></a>koa2</h2><h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><p>koa-views,koa-swig,ejs,handlebars,art-template<br>模板引擎也分服务端和客户端，node端得搭配koa-views、koa-swig、koa-ejs等使用。这里只讲<a href="mailto:koa-views@6.2.1">koa-views@6.2.1</a>使用中路径问题,其内部使用get-paths(path, relPath, extension)这个库解析路径。</p><p><img src="./images/koa2_demo_koa-views_path.jpg" alt="项目路径"></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"koa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@koa/router"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> views <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"koa-views"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// views方法第一个参数就是get-paths接收的第一个参数，还可以是绝/相对路径，extension就是第三个参数。路由中render的第一个参数就是get-paths第二个参数(这是个坑，不是路径,可以有后缀名)。解析到文件会找下面的index文件。</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">views</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    extension<span class="token punctuation">:</span> <span class="token string">"ejs"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/users"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        title<span class="token punctuation">:</span> <span class="token string">"用户管理"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/users/admin"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'users/admin'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        title<span class="token punctuation">:</span> <span class="token string">"admin"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ejs  </p><blockquote><p>服务端：npm i ejs<br>客户端：Go to the <a href="https://github.com/mde/ejs/releases/latest">Latest Release</a>, download<br><code>./ejs.js</code> or <code>./ejs.min.js</code>. Alternately, you can compile it yourself by cloning<br>the repository and running <code>jake build</code> (or <code>$(npm bin)/jake build</code> if jake is<br>not installed globally).也可以<code>npx jake buld</code></p></blockquote><h3 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h3><p>koa-static，koa-static-cache  </p><h2 id="3-打包工具"><a href="#3-打包工具" class="headerlink" title="3 打包工具"></a>3 打包工具</h2><h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a><a href="https://www.webpackjs.com/">webpack</a></h3><h3 id="parceljs"><a href="#parceljs" class="headerlink" title="parceljs"></a><a href="https://parceljs.org/">parceljs</a></h3><h3 id="gulp-v4-x"><a href="#gulp-v4-x" class="headerlink" title="gulp v4.x"></a><a href="https://www.gulpjs.com.cn/">gulp v4.x</a></h3><h3 id="Rollup-js"><a href="#Rollup-js" class="headerlink" title="Rollup.js"></a><a href="https://www.rollupjs.com/">Rollup.js</a></h3><h2 id="node"><a href="#node" class="headerlink" title="node"></a>node</h2><h3 id="dotenv"><a href="#dotenv" class="headerlink" title="dotenv"></a><a href="https://www.npmjs.com/package/dotenv">dotenv</a></h3><p>识别文件(.env)中的变量，并添加到process.env中  </p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><h4 id="sequelize"><a href="#sequelize" class="headerlink" title="sequelize"></a><a href="https://github.com/demopark/sequelize-docs-Zh-CN">sequelize</a></h4><p>Sequelize 是一个基于 promise 的 Node.js ORM, 目前支持 Postgres, MySQL, SQLite 和 Microsoft SQL Server. 它具有强大的事务支持, 关联关系, 预读和延迟加载,读取复制等功能.</p><h3 id="node端生成、操作DOMjsdom"><a href="#node端生成、操作DOMjsdom" class="headerlink" title="node端生成、操作DOMjsdom"></a>node端生成、操作DOM<a href="https://www.npmjs.com/package/jsdom">jsdom</a></h3><h2 id="富文本编辑器"><a href="#富文本编辑器" class="headerlink" title="富文本编辑器"></a>富文本编辑器</h2><h3 id="tinymce（无依赖）"><a href="#tinymce（无依赖）" class="headerlink" title="tinymce（无依赖）"></a><a href="https://www.tiny.cloud/docs/">tinymce</a>（无依赖）</h3><h3 id="ckeditor（无依赖）"><a href="#ckeditor（无依赖）" class="headerlink" title="ckeditor（无依赖）"></a><a href="https://ckeditor.com/">ckeditor</a>（无依赖）</h3><h3 id="draft-js（react，facebook开源）"><a href="#draft-js（react，facebook开源）" class="headerlink" title="draft.js（react，facebook开源）"></a><a href="https://draftjs.org/docs/getting-started">draft.js</a>（react，facebook开源）</h3><h3 id="Lin-CMS"><a href="#Lin-CMS" class="headerlink" title="Lin CMS"></a><a href="http://doc.cms.7yue.pro/">Lin CMS</a></h3><p>可以用koa、flask、spring-boot搭建  </p><h2 id="4-popper-js弹窗"><a href="#4-popper-js弹窗" class="headerlink" title="4 popper.js弹窗"></a>4 <a href="https://popper.js.org/">popper.js弹窗</a></h2><h2 id="5-网站运行状态管理"><a href="#5-网站运行状态管理" class="headerlink" title="5 网站运行状态管理"></a>5 网站运行状态管理</h2><p>不过一般来说有后台监视系统</p><ol><li><a href="https://github.com/juliomrqz/statusfy">statusfy</a>  </li><li><a href="https://github.com/CachetHQ/Cachet">Cachet</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CI/CD</title>
      <link href="/2022/04/14/CI-CD/"/>
      <url>/2022/04/14/CI-CD/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux&amp;Nginx</title>
      <link href="/2022/04/11/linux-Nginx/"/>
      <url>/2022/04/11/linux-Nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="购买阿里云服务器"><a href="#购买阿里云服务器" class="headerlink" title="购买阿里云服务器"></a>购买阿里云服务器</h1><p>购买完毕——》 重置实例密码——》进行远程连接</p><ol><li><p>连接</p><pre><code>$ ssh root@你的ip# 然后输入密码，完成登录退出链接exit;</code></pre></li><li><p>查看文件 </p><pre><code>cd / 根目录ls 查询</code></pre></li><li><p>文件颜色与作用</p><ul><li>蓝色 表示文件夹；</li><li>灰色 表示普通文件；</li><li>绿色 表示可执行文件；</li><li>红色 表示压缩文件；</li><li>天蓝色 表示链接文件（快捷方式）；</li></ul><p>常用目录的作用如下：</p><ul><li><strong>bin：</strong> 存放普通用户可执行的指令，普通用户也可以执行；</li><li><strong>dev ：</strong> 设备目录，所有的硬件设备及周边均放置在这个设备目录中；</li><li><strong>boot ：</strong> 开机引导目录，包括 Linux 内核文件与开机所需要的文件；</li><li><strong>home：</strong> 这里主要存放你的个人数据，具体每个用户的设置文件，用户的桌面文件夹，还有用户的数据都放在这里。每个用户都有自己的用户目录，位置为：<code>/home/用户名</code>。当然，root 用户除外；</li><li><strong>usr：</strong> 应用程序放置目录；</li><li><strong>lib：</strong> 开机时常用的动态链接库，bin 及 sbin 指令也会调用对应的 lib 库；</li><li><strong>tmp：</strong> 临时文件存放目录 ；</li><li><strong>etc：</strong> 各种配置文件目录，大部分配置属性均存放在这里；</li></ul></li></ol><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="常见操作"><a href="#常见操作" class="headerlink" title="常见操作"></a>常见操作</h3><p>Linux常用命令大全：<a href="https://blog.csdn.net/lucylily11/article/details/120383489">https://blog.csdn.net/lucylily11/article/details/120383489</a></p><pre class="line-numbers language-shell"><code class="language-shell">vim 文件名  // 编辑某文件cat 文件名  // 查看文件内容touch 文件名 // 新建文件pwd 显示工作目录所在位置(显示绝对路径)mkdir -p 目录名 // 新建目录cp复制文件或目录cp [选项] [原文件或目录] [目标目录] mv 剪切或改名，如果原文件和目标目录在同一目录下，则为改名，否则为剪切mv [原文件或目录] [目标目录](rm 删除文件或目录 选项：-r 删除目录；-f 强制执行rm -rf [文件或目录]  // 删除文件)| 管道 将前一个命令的结果像管道一样传递给后一个命令 作为输入tar命令，用于压缩解压：压缩：tar -jcv -f filename.tar.bz2 要被处理的文件或目录名称查询：tar -jtv -f filename.tar.bz2解压：tar -jxv -f filename.tar.bz2 -C 欲解压缩的目录 wget 是从远程下载的工具： wget [参数] [URL地址] // 使用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="vim编辑器"><a href="#vim编辑器" class="headerlink" title="vim编辑器"></a>vim编辑器</h3><p>通过 <code>vim &lt;文件名&gt;</code> 即可进入对该文件的编辑模式，按下 <code>i</code> 切换到编辑状态。</p><p>想要结束输入，可以按 <code>esc</code> 键，想要退出编辑模式，可以敲下 <code>:wq</code> 或者按快捷键：<code>shift+zz</code>。</p><p>在命令模式下按下 <code>i</code> 就进入了输入模式。</p><p>在输入模式中，可以使用以下按键取消与显示行号：</p><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>行号显示</td><td><code>:set nu</code></td></tr><tr><td>行号显示取消</td><td><code>:set nonu</code></td></tr></tbody></table><h3 id="杀死进程"><a href="#杀死进程" class="headerlink" title="杀死进程"></a>杀死进程</h3><p>查看进程：</p><pre class="line-numbers language-shell"><code class="language-shell">$ ps -ef<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看到进程中的 <code>PID</code> ，然后执行：</p><pre class="line-numbers language-shell"><code class="language-shell"># 正常杀死$ kill -1 2235# 强制杀死$ kill -9 2235<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SH-上传-下载文件"><a href="#SH-上传-下载文件" class="headerlink" title="SH 上传/下载文件"></a>SH 上传/下载文件</h2><p>SSH 可以通过 scp 命令来上传文件，是 Linux 系统下基于 SSH 登陆进行安全的远程文件拷贝命令，scp 是 secure copy 的简写，可以使用它上传本地文件夹到远程服务器，也可以从远程服务器上下载文件夹到本地：</p><pre class="line-numbers language-shell"><code class="language-shell"># 打开你的某个项目# 上传文件夹到远程服务器scp -P port -r /local/dir username@servername:/remote/dir# scp -r ./ root@8.130.25.41:/home# 从远程服务器下载文件夹scp -P port -r username@servername:/remote/dir/ /local/dir# scp -r root@8.130.25.41:/home ./<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>-r</code> 参数表示递归复制，即复制该目录下面的文件和目录，如果要上传单个文件，只要把 <code>-r</code> 删除。大写的 <code>P</code> 表示的是端口，如果还是默认的 SSH 端口 22 没有更改，则不需要 <code>-P</code>。</p><p>注意：这两行代码要在你本机的终端运行，而不是在阿里云的终端。</p><h2 id="FTP工具上传"><a href="#FTP工具上传" class="headerlink" title="FTP工具上传"></a>FTP工具上传</h2><p>可以使用ftp工具上传，</p><p>如 <a href="https://www.filezilla.cn/">File Zilla (opens new window)</a> 宝塔</p><p>安装完成后即可拖拽上传文件</p><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><p>Nginx 是开源、高性能、高可靠的 Web 和反向代理服务器，而且支持热部署，几乎可以做到 7 * 24 小时不间断运行，即使运行几个月也不需要重新启动，还能在不间断服务的情况下对软件版本进行热更新。</p><p>这里我们重点提一下服务器安装Nginx、node及项目打包上线后产生的跨域问题的解决方案。</p><h2 id="快速安装Nginx"><a href="#快速安装Nginx" class="headerlink" title="快速安装Nginx"></a>快速安装Nginx</h2><p>首先，确保自己连接上了服务器 <code>ssh 用户名@公网ip</code>，然后运行：</p><pre class="line-numbers language-shell"><code class="language-shell">yum list | grep nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着运行：</p><pre class="line-numbers language-shell"><code class="language-shell">yum install nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装好后 <code>nginx -v</code> 可以查看 Nginx 版本信息。并且使用 <code>rpm -ql nginx</code> 可以查看 Nginx 被安装到了什么地方。</p><blockquote><p>这里有两个文件夹要留意：</p><ol><li><code>/etc/nginx/conf.d/</code> 文件夹，是我们进行子配置的配置项存放处，<code>/etc/nginx/nginx.conf</code> 主配置文件会默认把这个文件夹中所有子配置项都引入；</li><li><code>/usr/share/nginx/html/</code> 文件夹，通常静态文件都放在这个文件夹，也可以根据你自己的习惯放其他地方；</li></ol></blockquote><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><p>（如无开启过防火墙，直接忽略本步骤）</p><p>安装之后开启 Nginx，如果系统开启了防火墙，那么需要设置一下在防火墙中加入需要开放的端口，下面列举几个常用的防火墙操作（没开启的话不用管这个）：</p><pre class="line-numbers language-shell"><code class="language-shell">systemctl start firewalld  # 开启防火墙systemctl stop firewalld   # 关闭防火墙systemctl status firewalld # 查看防火墙开启状态，显示running则是正在运行firewall-cmd --reload      # 重启防火墙，永久打开端口需要reload一下# 添加开启端口，--permanent表示永久打开，不加是临时打开重启之后失效firewall-cmd --permanent --zone=public --add-port=8888/tcp# 查看防火墙，添加的端口也可以看到firewall-cmd --list-all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后设置 Nginx 的开机启动：</p><pre class="line-numbers language-shell"><code class="language-shell">systemctl enable nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动 Nginx ：</p><pre class="line-numbers language-shell"><code class="language-shell">systemctl start nginx 浏览器访问公网IP 在浏览器输入你的公网IP，无需端口号（默认80），如果看到 `Welcome to nginx` 或 `Welcome to CentOS` 之类的界面，就是Nginx安装并启动成功了。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看Nginx的位置</p><pre><code>rpm -ql nginx</code></pre><h2 id="安装-nvm-amp-node-amp-git"><a href="#安装-nvm-amp-node-amp-git" class="headerlink" title="==安装 nvm &amp; node &amp; git=="></a>==安装 nvm &amp; node &amp; git==</h2><pre class="line-numbers language-shell"><code class="language-shell"># 下载 nvm，或者看官网的步骤 https://github.com/nvm-sh/nvm#install--update-scriptcurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bashsource   ~/.bashrc    # 安装完毕后，更新配置文件即可使用 nvm 命令nvm ls-remote         # 查看远程 node 版本nvm install v16.14.2  # 选一个你要安装的版本安装，nvm list              # 安装完毕查看安装的 node 版本node -v               # 查看是否安装好了yum install git   # git 安装 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Nginx重启"><a href="#Nginx重启" class="headerlink" title="Nginx重启"></a>Nginx重启</h2><pre class="line-numbers language-shell"><code class="language-shell">nginx -s reload  # 向主进程发送信号，重新加载配置文件，热重启<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Nginx配置文件"><a href="#Nginx配置文件" class="headerlink" title="Nginx配置文件"></a>Nginx配置文件</h2><p>我们一般对Nginx的修改主要就是修改 <code>/etc/nginx/nginx.conf</code> 这个配置文件，<code>nginx.conf</code> 结构图可以这样概括：</p><pre class="line-numbers language-nginx"><code class="language-nginx">main        <span class="token comment" spellcheck="true"># 全局配置，对全局生效</span>├── <span class="token keyword">events</span>  <span class="token comment" spellcheck="true"># 配置影响 Nginx 服务器或与用户的网络连接</span>├── <span class="token keyword">http</span>    <span class="token comment" spellcheck="true"># 配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置</span>│   ├── <span class="token keyword">upstream</span> <span class="token comment" spellcheck="true"># 配置后端服务器具体地址，负载均衡配置不可或缺的部分</span>│   ├── <span class="token keyword">server</span>   <span class="token comment" spellcheck="true"># 配置虚拟主机的相关参数，一个 http 块中可以有多个 server 块</span>│   ├── <span class="token keyword">server</span>│   │   ├── <span class="token keyword">location</span>  <span class="token comment" spellcheck="true"># server 块可以包含多个 location 块，location 指令用于匹配 uri</span>│   │   ├── <span class="token keyword">location</span>│   │   └── <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>│   └── <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>└── <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通常我会找到server，然后做如下设置：</p><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>  <span class="token keyword">listen</span> <span class="token number">80</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span> localhost<span class="token punctuation">;</span>    <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>        <span class="token keyword">root</span>  <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>html<span class="token punctuation">;</span>        <span class="token keyword">index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里要确保你在 <code>/usr/local</code> 这个目录下创建了一个 <code>html</code> 文件夹。</p><h2 id="反向代理解决跨域"><a href="#反向代理解决跨域" class="headerlink" title="==反向代理解决跨域=="></a>==反向代理解决跨域==</h2><p>反向代理是工作中最常用的服务器功能，经常被用来解决跨域问题，首先进入 Nginx 的主配置文件：</p><pre class="line-numbers language-shell"><code class="language-shell">vim /etc/nginx/nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为了看起来方便，把行号显示出来 <code>:set nu</code> ，然后我们去 <code>http</code> 模块的 <code>server</code> 块中的 <code>location /</code> 同级的位置添加：</p><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">location</span> <span class="token operator">/</span>api <span class="token punctuation">{</span>    <span class="token keyword">proxy_pass</span> 跨域地址的baseURL<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="开启-gzip-压缩"><a href="#开启-gzip-压缩" class="headerlink" title="==开启 gzip 压缩=="></a>==开启 gzip 压缩==</h2><p>gzip 是一种常用的网页压缩技术，传输的网页经过 gzip 压缩之后大小通常可以变为原来的一半甚至更小。更小的网页体积也就意味着带宽的节约和传输速度的提升，特别是对于访问量巨大大型网站来说，每一个静态资源体积的减小，都会带来可观的流量与带宽的节省。</p><p>这里可以使用 <a href="http://tool.chinaz.com/Gzips/Default.aspx">站长工具 (opens new window)</a>对一个网站查询是否进行过gzip压缩。</p><p><a href="https://tva1.sinaimg.cn/large/008i3skNgy1gt2ttzxq27j30x70cdgmt.jpg"><img src="008i3skNgy1gt2ttzxq27j30x70cdgmt.jpg" alt="image-20210802224537379"></a></p><p>可以看到我的这个ip目前是没有进行过gzip压缩的。然后我们如下操作：</p><pre class="line-numbers language-shell"><code class="language-shell">cd /etc/nginx/conf.d/touch gzip.confvim gzip.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>接下来把下面代码粘贴进去：</p><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">gzip</span> on<span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># 默认off，是否开启gzip</span><span class="token keyword">gzip_types</span> text<span class="token operator">/</span>plain text<span class="token operator">/</span>css application<span class="token operator">/</span>json application<span class="token operator">/</span>x<span class="token operator">-</span>javascript text<span class="token operator">/</span>xml application<span class="token operator">/</span>xml application<span class="token operator">/</span>xml<span class="token operator">+</span>rss text<span class="token operator">/</span>javascript<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后退出编辑模式，执行：</p><pre class="line-numbers language-shell"><code class="language-shell">cd /usr/sbin./nginx -s reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后再到站长工具测试：</p><p><a href="https://tva1.sinaimg.cn/large/008i3skNgy1gt2tzbwv1kj30xb0dowfx.jpg"><img src="008i3skNgy1gt2tzbwv1kj30xb0dowfx.jpg" alt="image-20210802225044894"></a></p><p>可以看到，我们成功压缩了。</p><h1 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h1><ol><li><p>准备好打包完成的项目代码</p></li><li><p>有两种部署方式，打包好的项目放入后端项目（打成两个jar包）， 或单独部署前端项目（nginx）</p></li><li><p>本次采用单独部署前端项目</p></li><li><p>服务器再/usr/local下创建 home目录 将项目拷进去解压</p></li><li><p>配置Nginx ： vim /etc/nginx/nginx.conf</p><pre class="line-numbers language-apl"><code class="language-apl">配置 server中的 localtion 以及 server_nameserver <span class="token dfn builtin">{</span>  listen <span class="token number">80</span><span class="token punctuation">;</span>    server_name localhost<span class="token punctuation">;</span> <span class="token monadic-operator operator">/</span><span class="token monadic-operator operator">/</span> 本机，也可以写ip    location <span class="token monadic-operator operator">/</span> <span class="token dfn builtin">{</span>        root  <span class="token monadic-operator operator">/</span>usr<span class="token monadic-operator operator">/</span>local<span class="token monadic-operator operator">/</span>html<span class="token punctuation">;</span> <span class="token monadic-operator operator">/</span><span class="token monadic-operator operator">/</span> 项目地址目录        index index<span class="token dyadic-operator operator">.</span>html<span class="token punctuation">;</span>  <span class="token monadic-operator operator">/</span><span class="token monadic-operator operator">/</span> 项目入口文件    <span class="token dfn builtin">}</span><span class="token dfn builtin">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>解决跨域问题 （前台开发阶段配置了proxy代理）部署后会出现跨域</p><pre><code>原因，前台配置的代理 在服务端是无法生效的，由于url问题修改配置文件 vim /etc/nginx/nginx.conf在server 配置项中追加 一个 location /apiserver {     location /api {         proxy_pass [前台代理的taget地址];      }}</code></pre></li><li><p>开启gzip压缩</p><pre class="line-numbers language-shell"><code class="language-shell">/etc/nginx/conf.d/下新建gzip.confcd /etc/nginx/conf.d/touch gzip.conf打开后编辑以下内容 保存vim gzip.confgzip on; # 默认off，是否开启gzipgzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;// 重启nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>操作完成后要重启nginx</p><pre><code>nginx -t  nginx -s reload</code></pre></li><li><p>查看是否开启成功 </p><pre><code>curl -I -H "Accept-Encoding:gzip,deflate" "想要查看的网址"// 如果出现如下结果则开启成功Content-Encoding:gzip第三方 查看http://tool.chinaz.com/Gzips/</code></pre></li></ol><h1 id="软文推荐"><a href="#软文推荐" class="headerlink" title="软文推荐"></a>软文推荐</h1><p>关于Nginx还有很多亮点，例如：动静分离、负载均衡等等，我们就不再做更多的阐述。</p><blockquote><p><a href="https://juejin.cn/post/6844904144235413512">《Nginx 从入门到实践，万字详解！》 (opens new window)</a>这篇文章给了很多启示，本文部分文字及代码参考了该文章。</p><p>本文大部分内容参考B站 <code>你去单排吧</code>  </p><p>B站直通链接:<a href="https://www.bilibili.com/video/BV1vQ4y1f7LF">https://www.bilibili.com/video/BV1vQ4y1f7LF</a></p></blockquote><h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><p>Nginx主要目录做说明：</p><pre class="line-numbers language-shell"><code class="language-shell">/etc/logrotate.d/nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Nginx日志轮转，用于logrotate服务的日志切割，相当于java中的log4j和logback；</p><pre class="line-numbers language-shell"><code class="language-shell">/etc/nginx                         /etc/nginx/conf.d/etc/nginx/conf.d/default.conf/etc/nginx/nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>为Nginx主配置文件；</p><pre class="line-numbers language-shell"><code class="language-shell">/etc/nginx/koi-utf              /etc/nginx/koi-win/etc/nginx/win-utf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>用于nginx编码转换的配置文件；</p><pre class="line-numbers language-shell"><code class="language-shell">/var/log/nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为nginx的访问和错误日志目录；</p><pre class="line-numbers language-shell"><code class="language-shell">/var/cache/nginx/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为nginx的缓存目录；</p><pre class="line-numbers language-shell"><code class="language-shell">/usr/share/nginx/html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其下放了首页index.html，为nginx的默认首页。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现vue周边简易版</title>
      <link href="/2022/04/05/%E5%AE%9E%E7%8E%B0vue%E5%91%A8%E8%BE%B9%E7%AE%80%E6%98%93%E7%89%88/"/>
      <url>/2022/04/05/%E5%AE%9E%E7%8E%B0vue%E5%91%A8%E8%BE%B9%E7%AE%80%E6%98%93%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="创建vue项目"><a href="#创建vue项目" class="headerlink" title="创建vue项目"></a>创建vue项目</h2><pre><code>// 这里创建的是vue2版本vue create test// 直接安装默认版本</code></pre><h2 id="添加vuex插件"><a href="#添加vuex插件" class="headerlink" title="添加vuex插件"></a>添加vuex插件</h2><pre class="line-numbers language-js"><code class="language-js">vue add vuex<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="添加vue-router插件"><a href="#添加vue-router插件" class="headerlink" title="添加vue-router插件"></a>添加vue-router插件</h2><pre><code>vue add vue-router</code></pre><h1 id="简易版Vue-router实现"><a href="#简易版Vue-router实现" class="headerlink" title="简易版Vue-router实现"></a>简易版Vue-router实现</h1><p>软文：<a href="https://juejin.cn/post/6844903961745440775">https://juejin.cn/post/6844903961745440775</a></p><p>软文：<a href="https://juejin.cn/post/6880529850159874062">https://juejin.cn/post/6880529850159874062</a></p><h2 id="路由是什么"><a href="#路由是什么" class="headerlink" title="路由是什么"></a>路由是什么</h2><p>​    对于前端来说，路由概念的出现是伴随着<code>spa</code>出现的；在<code>spa</code>出现之前，页面的跳转(导航)都是通过服务端控制的，并且跳转存在一个明显白屏跳转过程；<code>spa</code>出现后，为了更好的体验，就没有再让服务端控制跳转了，于是前端路由出现了，前端可以自由控制组件的渲染，来模拟页面跳转</p><ul><li>服务端路由根据<code>url</code>分配对应处理程序，返回页面、接口返回</li><li>前端路由是通过<code>js</code>根据<code>url</code>返回对对应组件</li></ul><h3 id="如何实现路由"><a href="#如何实现路由" class="headerlink" title="如何实现路由"></a>如何实现路由</h3><p>​    <code>路由映射表</code>： 要实现路由，需要一个路由映射表，前端映射表是 url 与 组建的关系</p><p>​    <code>匹配器</code>： 有了映射表，只是有了对应的映射关系，并不能通过url访问对应的组件，因此还需要一个匹配器</p><p>​    <code>历史记录栈</code>：对于浏览器的前进后退的功能，需要一种栈的数据结构进行存储url，浏览器有封装好的接口，直接调用即可 window.history</p><p>​    用户操作流程：访问X路径————匹配器去映射表查询返回对应的组件————将历史记录推入 stack中————前进后退时（从栈中取出url 匹配器去 映射表查询 返回对应的组件）</p><h2 id="vue路由组成"><a href="#vue路由组成" class="headerlink" title="vue路由组成"></a>vue路由组成</h2><h3 id="路由对象"><a href="#路由对象" class="headerlink" title="路由对象"></a>路由对象</h3><ul><li>Route 表示当前激活路由的状态信息，包含了当前 <code>URL</code> 解析得到的信息，还有 <code>URL</code> 匹配到的路由记录<strong>们</strong> (<code>route records</code>)。</li><li>通过<code>this.$route</code>访问到的就是<code>Route</code>对象</li><li>路由对象是不可变的，每次导航都会产生新的对象</li></ul><h3 id="位置-Location"><a href="#位置-Location" class="headerlink" title="位置(Location)"></a>位置(Location)</h3><ul><li>它并不是<code>window.location</code>的引用，<code>vue-router</code>在内部定义了一个<code>Location</code>，是一个用来描述目标位置的对象；</li><li><code>$router.push/replace</code> <code>router-link</code>的to接收的就是Location对象</li><li><code>vue-router</code>内部可以将一个<code>url string</code>转换成<code>Location对象</code>，所以确切的说<code>$router.push/replace</code>、<code>router-link的to</code>接收的都是一个<code>RawLocation对象</code></li><li><code>RawLocation对象</code>是<code>String</code>和<code>Location</code>的联合类型</li></ul><h3 id="路由组件-RouteComponent"><a href="#路由组件-RouteComponent" class="headerlink" title="路由组件(RouteComponent)"></a>路由组件(<code>RouteComponent</code>)</h3><ul><li>当路由成功匹配时，就需要在<code>router-view</code>渲染一个组件，这个需要被渲染的组件就是<code>路由组件</code></li><li><code>RouteConfig</code>中<code>component、components</code>中定义的<code>vue组件</code>就是路由组件</li><li>路由组件的特殊性<ul><li>拥有<strong>只在路由组件中生效</strong>的守卫(<code>beforeRouteEnter 、beforeRouteUpdate、beforeRouteLeave</code>)</li><li>你是否跟我一样，曾经在组件中调用<code>beforeRouteEnter</code>发现没有生效，那是因为这个守卫只能在<code>路由组件</code>中被调用，在所有非路由组件中都不会被调用，包括路由组件的后代组件；你如果想在路由组件中实现<code>beforeRouteEnter</code>类似守卫监听效果，可以通过<code>watch $route</code>来手动判断</li></ul></li></ul><h2 id="动手实现"><a href="#动手实现" class="headerlink" title="动手实现"></a>动手实现</h2><p>观察结构： 提出问题 </p><ul><li>import 导入 use 使用(是一个插件)</li><li>路由文件中routes 是一个数组（内部的配置项（url&amp;组件）形成映射关系）</li><li>创建实例并导出 单例模式export default const router = new vueRouter({ roures [[配置表]])</li><li>再main中添加配置项 new Vue({router}) ？？为什么</li><li>使用——页面中通过内置组件<router-view>和<router-link>使用</router-link></router-view></li></ul><p>简单实现</p><p>​    <code>实现基础的 插件（只实现了 hash模式） 以及两个内置组件</code></p><p>​        <code>路由历 史 缓存 拦截器 以及N多配置项 还需多努力 （简易版并未实现）</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 实现一个插件(实质是一个函数或对象) 以及 两个组件</span><span class="token keyword">let</span> Vue<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存vue的构造函数</span><span class="token keyword">class</span> <span class="token class-name">VueRouter</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 缓存配置项</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$options <span class="token operator">=</span> options                <span class="token comment" spellcheck="true">// 定义一个变量用来保持当前的路由的url</span>        <span class="token comment" spellcheck="true">// current需要是响应式的 不然current变化时 不会触发下面渲染render函数执行</span>        <span class="token comment" spellcheck="true">// 通过Vue内置的工具函数 difineReactive 将 current设置为响应式</span>        <span class="token keyword">const</span> initial <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'/'</span>        Vue<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">'current'</span><span class="token punctuation">,</span> initial<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 监听hash 的变化，变化就保存 </span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"hashchange"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'/'</span>                        <span class="token comment" spellcheck="true">// console.log(this.current);</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>VueRouter<span class="token punctuation">.</span>install <span class="token operator">=</span> <span class="token punctuation">(</span>_Vue<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    Vue <span class="token operator">=</span> _Vue <span class="token comment" spellcheck="true">// 保存Vue 防止打包的时候将 Vue也打包进来</span>    <span class="token comment" spellcheck="true">// 挂载 $router 属性</span>    <span class="token comment" spellcheck="true">// 全局混入（延迟以下逻辑到router创建完【使用时 new Router】毕且附加到选项时【main.js 作为配置项传入】才执行）</span>    Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这个钩子在每个组件被创建的时候都会被调用</span>        <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 根据配置项的参数 判断是否为根实例</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>router<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 根实例存在就 挂载到Vue的原型上</span>                Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$router <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>router            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 实现两个组件 （为什么可以直接使用 因为是全局的，因此在install时注册即可）</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"router-link"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        props<span class="token punctuation">:</span> <span class="token punctuation">{</span>            to<span class="token punctuation">:</span> <span class="token punctuation">{</span>                type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>                required<span class="token punctuation">:</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 渲染函数的方式来写</span>        <span class="token function">render</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                    attrs<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 访问组件属性，将 to的内容给 a 的herf属性</span>                        herf<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`#</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>to<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span><span class="token keyword">default</span> <span class="token comment" spellcheck="true">// 通过插槽获得 router-link 的文本内容</span>            <span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 根据link的地址 去路由表中匹配对应的路由进行渲染</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"router-view"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 渲染函数的方式来写</span>        <span class="token function">render</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> component <span class="token operator">=</span> <span class="token keyword">null</span>                        <span class="token comment" spellcheck="true">// 获取当前的路由路径 (前边 全局混入了 $router 所以这里可以直接获取)</span>            <span class="token keyword">const</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span>current                        <span class="token comment" spellcheck="true">// 构造函数中 缓存了optons 根据里面的 routes 配置型查找路由是否存在</span>            <span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>routes<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> res<span class="token punctuation">.</span>path <span class="token operator">===</span> current<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 若存在就说明找到了对应的路由 进行渲染</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// route.component 在用户的路由配置中 对应的的组件保存下来 进行渲染</span>                component <span class="token operator">=</span> route<span class="token punctuation">.</span>component            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 导出</span><span class="token keyword">export</span> <span class="token keyword">default</span> VueRouter<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="简版Vuex实现"><a href="#简版Vuex实现" class="headerlink" title="简版Vuex实现"></a>简版Vuex实现</h1><p>思路：Vuex是vue推荐周边的一款状态管理插件，实质是通过Mixin的方式为每一个组件注入store对象，由于每个组件的store都指向同一个store对象，所以store是全局 的，实现了状态共享， 类似一个事件总线</p><p>插件：向外暴露install方法，vue通过use使用</p><h2 id="测试用例——store-index-js"><a href="#测试用例——store-index-js" class="headerlink" title="测试用例——store/index.js"></a>测试用例——store/index.js</h2><p>在store文件夹下建立vuex.js文件，并在index.js使用</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'./vuex.js'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  state<span class="token punctuation">:</span> <span class="token punctuation">{</span>      count<span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  getters<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">doubleCounter</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> state<span class="token punctuation">.</span>count<span class="token operator">++</span>        <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">add</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span><span class="token operator">=</span> num      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  actions<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>commit<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'add'</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试用例——模板使用"><a href="#测试用例——模板使用" class="headerlink" title="测试用例——模板使用"></a>测试用例——模板使用</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"home"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> $store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>        <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> $store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>doubleCounter <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"$store.commit('add',11)"</span><span class="token operator">></span>按钮<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"$store.dispatch('add')"</span><span class="token operator">></span><span class="token keyword">async</span> 按钮<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'HomeView'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="简易版Vuex实现-store-vuex-js"><a href="#简易版Vuex实现-store-vuex-js" class="headerlink" title="简易版Vuex实现 store/vuex.js"></a>简易版Vuex实现 store/vuex.js</h2><p>在store文件夹下建立vuex.js文件，并在index.js使用</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 简易版vuex （插件 挂载$store）</span><span class="token comment" spellcheck="true">/*state要具有响应式 实现了 $store state（mutations）commit （actions）dispatch*/</span><span class="token keyword">let</span> Vue <span class="token comment" spellcheck="true">// 缓存vue</span><span class="token keyword">class</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 借助Vue的data实现 将state数据转为响应式</span>        <span class="token comment" spellcheck="true">/* 第一种写法 实现用户通过 this.$store.state.XX 形式访问        this.state = new Vue({            data() {                return options.state            }        })        */</span>        <span class="token comment" spellcheck="true">// 实际上在源码中，不希望直接向外暴漏Vue的实例，因此有多包装了一层</span>        <span class="token comment" spellcheck="true">// 第二种写法 实现用户通过 this.$store.state.XX 形式访问</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                $$state<span class="token punctuation">:</span> options<span class="token punctuation">.</span>state            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 创建_mutations 接收配置项中的mutations</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_mutations <span class="token operator">=</span> options<span class="token punctuation">.</span>mutations        <span class="token comment" spellcheck="true">// 创建_actions 接收配置项中的actions</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_actions <span class="token operator">=</span> options<span class="token punctuation">.</span>actions                <span class="token comment" spellcheck="true">// 创建getters, 遍历存储所有的用户定义的getters 的key 当用户访问时就执行对应的函数（要实现缓存）</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>getters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        options<span class="token punctuation">.</span>getters <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleGetters</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>getters<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 保存this</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>commit <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>commit<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dispatch <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dispatch<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 向外暴露state 只能get 不能set</span>    <span class="token keyword">get</span> <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_vm<span class="token punctuation">.</span>_data<span class="token punctuation">.</span>$$state    <span class="token punctuation">}</span>    <span class="token keyword">set</span> <span class="token function">state</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果外界通过this.$store.state.XX 修改 就抛出一个错误</span>        console<span class="token punctuation">.</span><span class="token function">err</span><span class="token punctuation">(</span><span class="token string">'Please use replaceState to reset state'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 实现getters 这里还有点小问题</span>    <span class="token function">handleGetters</span><span class="token punctuation">(</span>getters<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>getters<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>key <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getters<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>                <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> getters<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 实现commit方法 有两个参数 </span>    <span class="token comment" spellcheck="true">// 第一个type是_mutations中对应的函数名称</span>    <span class="token comment" spellcheck="true">// 第二个payload参数为触发时传递的参数</span>    <span class="token function">commit</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> payload<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获得配置型传递的_mutations对应的函数</span>        <span class="token keyword">const</span> entry <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_mutations<span class="token punctuation">[</span>type<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">// 如果不存在这样的函数，就抛出一个错误</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>entry<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'unknown mutation type'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 存在就将state传递进函数, 并传递用户传递的第二个参数 并执行</span>            <span class="token function">entry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span> payload<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 实现dispatch方法</span>    <span class="token function">dispatch</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> payload<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获得配置型传递的_actions对应的函数</span>        <span class="token keyword">const</span> entry <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_actions<span class="token punctuation">[</span>type<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">// 如果不存在这样的函数，就抛出一个错误</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>entry<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'unknown mutation type'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 存在就将state传递进函数, 并传递用户传递的第二个参数 并执行</span>            <span class="token comment" spellcheck="true">// 这里this指向会有问题(多组件嵌套，定时器异步都有可能造成) 使用bind保存this， 具体实现在上面的store类中</span>            <span class="token function">entry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 声明 install方法</span><span class="token keyword">const</span> install <span class="token operator">=</span> <span class="token punctuation">(</span>_Vue<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    Vue <span class="token operator">=</span> _Vue <span class="token comment" spellcheck="true">// 缓存vue</span>    <span class="token comment" spellcheck="true">// 全局混入</span>    Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// store在main方法中作为options传入（new Vue时）    // 即： 在options中存在store时 将store设为全局</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>store<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 将store设为全局 挂载到vue原型</span>                Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$store <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>store            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 导出</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    Store<span class="token punctuation">,</span>    install<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="补充-Vue-use原理"><a href="#补充-Vue-use原理" class="headerlink" title="补充_ Vue.use原理"></a>补充_ Vue.use原理</h1><p>软文：<a href="https://juejin.cn/post/6901224957959733261">https://juejin.cn/post/6901224957959733261</a></p><p><strong>Vue.use(plugin)</strong></p><p>参数： </p><ul><li>（Object | Function, []?）        <code>plugin</code> 接受一个 <code>obj</code> 或者一个 <code>fn</code> , 第二个参数可选的一个数组</li></ul><p>用法： </p><ul><li>安装Vue.js插件，如果插件是一个对象，必须提供install方法</li><li>如果插件是一个函数，他会被视为install方法</li><li>==install方法被调用时，会将Vue(构造函数)作为参数传入==</li><li>==install方法 <code>需要</code> 在 new Vue之前被调用==</li><li>因为传入Vue并在new 之前调用 （可以做很多事情，注册全局组件，注册全局指令，在Vue原型上挂载方法等） 提高Vue扩展性</li></ul><p>原理流程：use的<code>流程</code>就是：</p><ul><li><p>先验证传进来的插件是否注册，存在即返回保证只注册一次。</p></li><li><p>没注册的插件来判断插件类型。如果是对象必须有install方法，如果是函数直接插入。（记得改变this指向哦~）</p></li><li><p>最后添加到已注册的插件列表里。</p></li><li><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Vue.use源码解析 位置initGlobalAPI 中 initUse</span><span class="token keyword">function</span> initUse <span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Vue<span class="token punctuation">.</span>use <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>plugin<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义查看已经被注册的组件，installedPlugins</span>    <span class="token keyword">var</span> installedPlugins <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_installedPlugins <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_installedPlugins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果传入的组件已经被注册 直接返回实例</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>installedPlugins<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// additional parameters（获取附加参数）</span>    <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token function">toArray</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 向头部添加this</span>    args<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断入参是否有install方法</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> plugin<span class="token punctuation">.</span>install <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 有执行，动态改this为plugin</span>      plugin<span class="token punctuation">.</span>install<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>plugin<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> plugin <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 插件本身就是fn，动态改this为null</span>      plugin<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 已注册插件列表添加插件</span>    installedPlugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 前端爬楼梯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重学TS</title>
      <link href="/2022/04/02/%E5%85%B3%E4%BA%8Ets/"/>
      <url>/2022/04/02/%E5%85%B3%E4%BA%8Ets/</url>
      
        <content type="html"><![CDATA[<p>tip：尚硅谷课件文档<a href="https://24kcs.github.io/vue3_study/">https://24kcs.github.io/vue3_study/</a></p><h1 id="1、TS初见"><a href="#1、TS初见" class="headerlink" title="1、TS初见"></a>1、TS初见</h1><h2 id="1-1、为什么要有-TypeScript"><a href="#1-1、为什么要有-TypeScript" class="headerlink" title="1.1、为什么要有 TypeScript"></a>1.1、为什么要有 TypeScript</h2><p>TypeScript是JavaScript的超集，因为它扩展了JavaScript，有JavaScript没有的东西。硬要以父子类关系来说的话，TypeScript是JavaScript子类，继承的基础上去扩展。</p><p>`TypeScript的初衷就是为了做类型检查，提早发现错误，所以「类型」是其最核心的特性。当然它只是给出你代码可能不会按预期执行的警告，比如你未按照声明的类型传参，你的代码还是可以运行的。这一点与强类型语言还是有本质的区别，强类型语言会直接导致编译不通过，因为TypeScript只是转译。跟JavaScript不同，TypeScript文件后缀使用 .ts扩展名。浏览器是不识别 .ts 文件，所以使用时必须提前把 TS 代码转换成 JavaScript 代码。这个转换过程被称为转译，编译和转译的微小差别在于：</p><p>编译是把源码转变成另一种语言<br>转译是把源码转变另一个相同抽象层级的语言</p><h2 id="1-2、前提准备"><a href="#1-2、前提准备" class="headerlink" title="1.2、前提准备"></a>1.2、前提准备</h2><ul><li>安装 node环境下安装 npm install -g typescript</li><li>手动编译 tsc  **.ts</li><li>vscode自动编译 tsc –init 在tsconfig.js中配置，在终端打开tsc监视即可</li><li>ts语法提示错误，不影响js的编译，因为js是弱类型语言（如类型注解不通过）</li></ul><pre class="line-numbers language-tsx"><code class="language-tsx">// 类型注解 一种轻量级的为函数或变量添加约束(() => {    function showMsg(str:String) {        return str + '123214'    }    let str = "woshi"    console.log(showMsg(str));    })()// 接口演示 定义接口(() => {    interface Iperson{        fristName:string,        lastName:string    }    // 输出对象    function showFullName(person:Iperson) {        return person.fristName + person.lastName    }    // 定义对象    const person = {        fristName: 'dongfnag',        lastName: 'yuechu'    }    // 打印    console.log(showFullName(person))})()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3、基础类型"><a href="#1-3、基础类型" class="headerlink" title="1.3、基础类型"></a>1.3、基础类型</h2><h3 id="1、布尔-数字-字符串"><a href="#1、布尔-数字-字符串" class="headerlink" title="1、布尔 数字 字符串"></a>1、布尔 数字 字符串</h3><pre class="line-numbers language-tsx"><code class="language-tsx">    let a:boolean = true    let b:number = 1010    let c:string = '字符串'        //字符串可与数字拼接 TS中变量一开始是什么类型就只能用这个类型，不允许混用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、undefined-amp-null"><a href="#2、undefined-amp-null" class="headerlink" title="2、undefined &amp; null"></a>2、undefined &amp; null</h3><pre class="line-numbers language-tsx"><code class="language-tsx">    let und:undefined = undefined    let nul:null = null    // 给其他类型赋予    let num:number = null    let num:number = undefined        // undefined和null 可以作为其他类型的子类型，可以将undef和null赋予其他类型（需关闭ts严格模式）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、-数组和元组"><a href="#3、-数组和元组" class="headerlink" title="3、 数组和元组"></a>3、 数组和元组</h3><pre class="line-numbers language-tsx"><code class="language-tsx">数组定义方式1let arr:number[] = [10,20,30]数组定义方式2(泛型写法)let arr:Array<number> = [1,2,3]元组Tuplelet arr:[string,boolean] = ['字符串', true]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、Enum枚举-（ts补充）void"><a href="#4、Enum枚举-（ts补充）void" class="headerlink" title="4、Enum枚举 （ts补充）void"></a>4、Enum枚举 （ts补充）void</h3><p>使用枚举类型可以为一组赋值赋予友好的名字</p><p>void没有返回值的类型，打印undefined</p><h3 id="5、any-amp-unknown"><a href="#5、any-amp-unknown" class="headerlink" title="5、any &amp; unknown"></a>5、any &amp; unknown</h3><p><code>unknown</code>与<code>any</code>的最大区别是：</p><p>unknown是 top type(任何类型都是它的 subtype) , 而 <code>any</code> 既是 <code>top type</code>, 又是 <code>bottom type</code> (它是任何类型的 <code>subtype</code> ) , 这导致 <code>any</code> 基本上就是放弃了任何类型检查。因为<code>any</code>既是<code>top type</code>, 又是 <code>bottom type</code>，所以任何类型的值可以赋值给<code>any</code>，同时<code>any</code>类型的值也可以赋值给任何类型。但<code>unknown</code> 只是 <code>top type</code>，任何类型的值都可以赋值给它，但它只能赋值给<code>unknown</code>和<code>any</code>，因为只有它俩是<code>top type</code>。</p><pre class="line-numbers language-tsx"><code class="language-tsx">// any`会跳过类型检查器对值的检查，任何值都可以赋值给`any`类型，它通常被称为`top typelet notSure: any = 4;notSure = "maybe a string instead"; // OKnotSure = false; // OK// unknown与any一样，所有类型都可以分配给unknown:let notSure: unknown = 4;notSure = "maybe a string instead"; // OKnotSure = false; // OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6、object-amp-never"><a href="#6、object-amp-never" class="headerlink" title="6、object &amp; never"></a>6、object &amp; never</h3><p><code>never</code>类型表示的是那些永不存在的值的类型。</p><p>==<code>never</code>与其他类型的联合后，是没有<code>never</code>的==</p><p>值会永不存在的两种情况：</p><ol><li><p>如果一个函数执行时抛出了<strong>异常</strong>，那么这个函数永远不存在返回值（因为抛出异常会直接中断程序运行，这使得程序运行不到返回值那一步，即具有不可达的终点，也就永不存在返回了）；</p></li><li><p>函数中执行无限循环的代码（<strong>死循环</strong>），使得程序永远无法运行到函数返回值那一步，永不存在返回。</p></li><li><p><code>never</code>类型同<code>null</code>和<code>undefined</code>一样，也是任何类型的子类型，也可以赋值给任何类型：</p></li><li><p>但是没有类型是<code>never</code>的子类型或可以赋值给<code>never</code>类型（除了<code>never</code>本身之外），即使<code>any</code>也不可以赋值给<code>never</code>：</p></li></ol><pre class="line-numbers language-tsx"><code class="language-tsx">object    function getobj(obj:object):object {        console.log(obj)        return {            name: 'kakaxi'        }    }    console.log(getobj({name: '213'}));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-4、类型（联合-断言-交叉-推断）"><a href="#1-4、类型（联合-断言-交叉-推断）" class="headerlink" title="1.4、类型（联合 断言 交叉 推断）"></a>1.4、类型（联合 断言 交叉 推断）</h2><h3 id="1-1、联合类型"><a href="#1-1、联合类型" class="headerlink" title="1.1、联合类型"></a>1.1、联合类型</h3><p>联合类型表示取值可以为多种类型中的一种，使用 <code>|</code> 分隔每个类型。当任意属性使用联合类型且属性中存在可选属性时，需要联合<code>undefined</code>类型，否则编译报错，原因显而易见，因为可选属性可有可无</p><pre class="line-numbers language-tsx"><code class="language-tsx">    let a: string | number    a = 'ok',    a = 11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-2、类型断言"><a href="#1-2、类型断言" class="headerlink" title="1.2、类型断言"></a>1.2、类型断言</h3><p>类型断言好比其它语言里的类型转换，类型转换通常发生在你比<code>TS</code>更了解某个值的详细信息的时候。==(相当于告诉编译器，我知道我是什么类型，知道在干什莫，相信我！按我说的处理)==</p><pre class="line-numbers language-tsx"><code class="language-tsx">// 类型断言两种方法<> he as// 例：<>断定变量str为字符串类型(<string>str)// as方法(str as string)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3、类型推断"><a href="#1-3、类型推断" class="headerlink" title="1.3、类型推断"></a>1.3、类型推断</h3><p>如果没有指定明确的类型，那么TS会按照类型推论的规则推断出一个类型，如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 <code>any</code> 类型而完全不被类型检查</p><h3 id="1-4、交叉类型"><a href="#1-4、交叉类型" class="headerlink" title="1.4、交叉类型"></a>1.4、交叉类型</h3><p>==交叉类型取的多个类型的并集，但是如果<code>key</code>相同但是类型不同，则该<code>key</code>为<code>never</code>类型==</p><p>交叉类型是将多个类型合并为一个类型。 这让我们可以把现有的多种类型叠加到一起成为一种类型，它包含了所需的所有类型的特性，使用<code>&amp;</code>定义交叉类型。</p><pre class="line-numbers language-tsx"><code class="language-tsx">interface A {  name: string,  age: number}interface B {  name: string,  gender: string}let a: A & B = { // OK    name: "兔兔",    age: 18,    gender: "男"};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-5、接口"><a href="#1-5、接口" class="headerlink" title="1.5、接口"></a>1.5、接口</h2><p>接口是对象状态（属性）和行为（方法）的抽象（描述）</p><p>（接口是一种类型 规范 规则 约束 能力）</p><p>可选属性readonly 只读属性？</p><pre class="line-numbers language-tsx"><code class="language-tsx">interface Props {   readonly name: string;   age: number;   money?: number;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于数组，<code>TS</code>还有<code>ReadonlyArray&lt;T&gt;</code>类型，此类型将数组的所有可变方法去掉了，因此可以确保数组创建后再也不能被修改：</p><p>==<code>readonly</code>声明的只读数组类型与<code>ReadonlyArray</code>声明的只读数组类型，二者等价==</p><h3 id="接口的继承"><a href="#接口的继承" class="headerlink" title="接口的继承"></a>接口的继承</h3><p>接口继承接口使用关键字extends ，继承的本质是复制，抽出共同的代码，所以子接口拥有父接口的类型定义</p><pre class="line-numbers language-tsx"><code class="language-tsx">interface Shape {    name: string}interface Square extends Shape {    age: number}let square: Square = {name: '雷'， age: 18} 接口可以多继承，大部分语言是不支持多继承的，原因是会引发混乱<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20210907172322403.png" alt="image-20210907172322403"></p><h3 id="接口定义函数"><a href="#接口定义函数" class="headerlink" title="接口定义函数"></a>接口定义函数</h3><p>采用函数表达式接口定义函数的方式时，对等号左侧进行类型限制，可以保证以后对函数名赋值时保证参数个数、参数类型、返回值类型不变。</p><pre class="line-numbers language-tsx"><code class="language-tsx">interface SearchFunc {    (source: string, subString:string): boolean}// 左侧进行限制 限制参数为两个且必须为字符串类型，返回值必须为布尔型let mySearch: SearchFunc = function(source: string, subString:string) {  let result = source.search(subString);  return result >-1;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-6、函数"><a href="#1-6、函数" class="headerlink" title="1.6、函数"></a>1.6、函数</h2><h3 id="1-1、-函数声明-amp-函数表达式"><a href="#1-1、-函数声明-amp-函数表达式" class="headerlink" title="1.1、 函数声明 &amp; 函数表达式"></a>1.1、 函数声明 &amp; 函数表达式</h3><pre class="line-numbers language-tsx"><code class="language-tsx">// 声明function sum(x:number, y:number) {    return x + y}// 表达式let mysum:(x:number, y:number) => number = function(x;number, y:number):number {    return x + y}// 在 TypeScript 的类型定义中，=> 用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。切忌与ES6的箭头函数混淆了。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2、函数中的this声明"><a href="#1-2、函数中的this声明" class="headerlink" title="1.2、函数中的this声明"></a>1.2、函数中的<code>this</code>声明</h3><p>ts会通过代码流分析出this是属于什么类型，，当然我们也可以明确的指定函数中的this是什么类型，==this类型变量必须放在参数的首位==</p><pre class="line-numbers language-tsx"><code class="language-tsx">interface Obj {    fn: (this: Obj, name: string) => void;}let obj: Obj = {    fn(name: string) {}}let rab: Obj ={    fn(name: string) {}}obj.fn("兔兔"); // OKobj.fn.call(rab, "兔兔"); // OKobj.fn.call(window, "兔兔"); // Error: this 应该为 Obj 类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3、参数"><a href="#1-3、参数" class="headerlink" title="1.3、参数"></a>1.3、参数</h3><p><code>可选参数</code></p><p>​    参数后加问号（？）注：==可选参数后面不允许再出现必需参数==</p><p><code>参数默认值</code></p><p>​    在函数定义时，参数内直接赋值</p><pre class="line-numbers language-tsx"><code class="language-tsx">function buildName(firstName: string, lastName: string = 'Cat') {    return firstName + ' ' + lastName;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <code>剩余参数</code></p><p>同js，用 … 表示</p><pre><code>function push(array: any[], ...items: any[]) {    items.forEach(function(item) {        array.push(item);    });}let a = [];push(a, 1, 2, 3);</code></pre><h3 id="1-4、重载"><a href="#1-4、重载" class="headerlink" title="1.4、重载"></a>1.4、重载</h3><p>重载允许一个函数接受不同数量或类型的参数时，作出不同的处理。</p><p><code>重载</code>的概念在学<code>JAVA</code>（<a href="https://link.juejin.cn/?target=https://www.runoob.com/java/java-override-overload.html"><code>JAVA中的重载</code></a>）的时候接触到的，<code>JS</code>是没有这个概念的，<code>TS</code>的重载感觉更应该称之为<code>函数签名重载</code>。因为最后函数实现的内部还是依赖判断类型来处理，前面的函数定义只是为了精确表达输入类型对应的输出类型。</p><pre class="line-numbers language-tsx"><code class="language-tsx">function reverse(x: number | string): number | string | void {    if (typeof x === 'number') {        return Number(x.toString().split('').reverse().join(''));    } else if (typeof x === 'string') {        return x.split('').reverse().join('');    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-7、-类"><a href="#1-7、-类" class="headerlink" title="1.7、 类"></a>1.7、 类</h2><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><ul><li>public  属性修饰符默认为<code>public</code>公共的，即类的属性、方法可以在外部访问</li><li>private  与<code>public</code>相对，私有修饰符，即类的属性、方法不可以在外部访问</li><li>protected 修饰符与<code>private</code>修饰符的行为很相似，但有一点不同，<code>protected</code>成员在<strong>派生类</strong>中仍然可以访问。注意，这里是<strong>派生类中</strong>，而不是<strong>实例、子类实例</strong>。</li><li>readonly 只读属性修饰符 构造函数中可以对只读属性进行修改  <img src="image-20210910114715199.png" alt="image-20210910114715199"></li><li>发生继承关系后类与类的叫法<img src="image-20210909200925647.png" alt="image-20210909200925647"></li></ul><h3 id="参数属性"><a href="#参数属性" class="headerlink" title="参数属性"></a>参数属性</h3><p>我们也可以在类的内部方法上对参数使用<code>public、private、protected</code>修饰符，它的作用是可以更方便地让我们在一个地方定义并初始化一个成员。</p><pre class="line-numbers language-tsx"><code class="language-tsx">class Animal {    constructor(public name: string, private age: number, protected sex: string) {}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="接口实现类"><a href="#接口实现类" class="headerlink" title="接口实现类"></a>接口实现类</h3><p><code>TypeScript</code> 也能够用接口来明确的强制一个类去符合某种契约。类去实现接口，这里使用关键字<code>implements</code></p><pre class="line-numbers language-tsx"><code class="language-tsx">// 一个类可以实现多个接口interface Age {  age: number;}interface Title{  title: string;}class title implements Title, Age{  title: string = '兔兔';  age: number = 18;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>抽象类做为其它派生类的基类使用, 不允许被实例化。 不同于接口，抽象类可以包含成员的实现细节。 </p><p>抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。 抽象方法的语法与接口方法相似。 两者都是定义方法签名但不包含方法体。 然而，抽象方法必须包含<code>abstract</code>关键字并且可以包含访问修饰符。</p><p><code>abstract</code>关键字是用于定义抽象类和在抽象类内部定义抽象方法。</p><pre class="line-numbers language-tsx"><code class="language-tsx">abstract class Department {    constructor(public name: string) {    }    printName(): void {        console.log('Department name: ' + this.name);    }    abstract printMeeting(): void; // 必须在派生类中实现}class AccountingDepartment extends Department {    constructor() {        super('Accounting and Auditing'); // 在派生类的构造函数中必须调用 super()    }    printMeeting(): void {        console.log('The Accounting Department meets each Monday at 10am.');    }    generateReports(): void {        console.log('Generating accounting reports...');    }}let department: Department; // OK：允许创建一个对抽象类型的引用department = new Department(); // Error: 不能创建一个抽象类的实例department = new AccountingDepartment(); // OK：允许对一个抽象子类进行实例化和赋值department.printName(); // OKdepartment.printMeeting(); // OKdepartment.generateReports(); // Error: 方法在声明的抽象类中不存在<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-8、-泛型-lt-gt"><a href="#1-8、-泛型-lt-gt" class="headerlink" title="1.8、 泛型<>"></a>1.8、 泛型&lt;&gt;</h2><p>泛型是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。</p><pre class="line-numbers language-tsx"><code class="language-tsx">  function min<K> (x:k) {    return x  }  min<number>(3)    // 一个函数可以有多个泛型  function min<K，V> (x:k， y：V) {    return [x,y]  }  min<number,string>(3, '3')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><p>定义接口时，为接口的属性或方法定义泛型类型，使用时再具体的指定类型</p><pre class="line-numbers language-tsx"><code class="language-tsx">  // 定义一个泛型接口  interface IBase<T> {    data:Array<T>    add:(t:T) => T  }  // 定义信息的类  class User {    id?: number    name: string | undefined    age!: number  }  // 操作用户信息  class UserCRUD implements IBase<User> {    data:Array<User> = []    add(user:User):User {      this.data.push(user)      return user    }  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Generic</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    defaultValue<span class="token punctuation">:</span> T    add<span class="token punctuation">:</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> T<span class="token punctuation">}</span><span class="token keyword">const</span> genneric<span class="token punctuation">:</span> Generic<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generic</span><span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">)</span>genneric<span class="token punctuation">.</span>defaultValue <span class="token operator">=</span> <span class="token number">10</span>  <span class="token comment" spellcheck="true">// err</span>genneric<span class="token punctuation">.</span>defaultValue <span class="token operator">=</span> <span class="token string">'10'</span>  <span class="token comment" spellcheck="true">// √</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原生与动画</title>
      <link href="/2022/03/30/%E5%8E%9F%E7%94%9F%E4%B8%8E%E5%8A%A8%E7%94%BB/"/>
      <url>/2022/03/30/%E5%8E%9F%E7%94%9F%E4%B8%8E%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="常见的DOM操作"><a href="#常见的DOM操作" class="headerlink" title="常见的DOM操作"></a>常见的DOM操作</h1><h2 id="1）DOM-节点的获取"><a href="#1）DOM-节点的获取" class="headerlink" title="1）DOM 节点的获取"></a>1）DOM 节点的获取</h2><p>DOM 节点的获取的API及使用：</p><pre class="line-numbers language-js"><code class="language-js">getElementById <span class="token comment" spellcheck="true">// 按照 id 查询</span>getElementsByTagName <span class="token comment" spellcheck="true">// 按照标签名查询</span>getElementsByClassName <span class="token comment" spellcheck="true">// 按照类名查询</span>querySelectorAll <span class="token comment" spellcheck="true">// 按照 css 选择器查询</span><span class="token comment" spellcheck="true">// 按照 id 查询</span><span class="token keyword">var</span> imooc <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'imooc'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 查询到 id 为 imooc 的元素</span><span class="token comment" spellcheck="true">// 按照标签名查询</span><span class="token keyword">var</span> pList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 查询到标签为 p 的集合</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>divList<span class="token punctuation">.</span>length<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>divList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 按照类名查询</span><span class="token keyword">var</span> moocList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'mooc'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 查询到类名为 mooc 的集合</span><span class="token comment" spellcheck="true">// 按照 css 选择器查询</span><span class="token keyword">var</span> pList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.mooc'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 查询到类名为 mooc 的集合</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2）DOM-节点的创建"><a href="#2）DOM-节点的创建" class="headerlink" title="2）DOM 节点的创建"></a>2）DOM 节点的创建</h2><p><strong>创建一个新节点，并把它添加到指定节点的后面。</strong>已知的 HTML 结构如下：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>DEMO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要求添加一个有内容的 span 节点到 id 为 title 的节点后面，做法就是：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 首先获取父节点</span><span class="token keyword">var</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 创建新节点</span><span class="token keyword">var</span> targetSpan <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 设置 span 节点的内容</span>targetSpan<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token comment" spellcheck="true">// 把新创建的元素塞进父节点里去</span>container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>targetSpan<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3）DOM-节点的删除"><a href="#3）DOM-节点的删除" class="headerlink" title="3）DOM 节点的删除"></a>3）DOM 节点的删除</h2><p><strong>删除指定的 DOM 节点，</strong>已知的 HTML 结构如下：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>DEMO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要删除 id 为 title 的元素，做法是：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 获取目标元素的父元素</span><span class="token keyword">var</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 获取目标元素</span><span class="token keyword">var</span> targetNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 删除目标元素</span>container<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>targetNode<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者通过子节点数组来完成删除：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 获取目标元素的父元素</span><span class="token keyword">var</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 获取目标元素</span><span class="token keyword">var</span> targetNode <span class="token operator">=</span> container<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 删除目标元素</span>container<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>targetNode<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4）修改-DOM-元素"><a href="#4）修改-DOM-元素" class="headerlink" title="4）修改 DOM 元素"></a>4）修改 DOM 元素</h2><p>修改 DOM 元素这个动作可以分很多维度，比如说移动 DOM 元素的位置，修改 DOM 元素的属性等。</p><p><strong>将指定的两个 DOM 元素交换位置，</strong>已知的 HTML 结构如下：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>DEMO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在需要调换 title 和 content 的位置，可以考虑 insertBefore 或者 appendChild：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 获取父元素</span><span class="token keyword">var</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 获取两个需要被交换的元素</span><span class="token keyword">var</span> title <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token keyword">var</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 交换两个元素，把 content 置于 title 前面</span>container<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="常见的宽高范围"><a href="#常见的宽高范围" class="headerlink" title="常见的宽高范围"></a>常见的宽高范围</h1><h2 id="offsetWidth-获得元素的内容宽度（只读属性）"><a href="#offsetWidth-获得元素的内容宽度（只读属性）" class="headerlink" title="offsetWidth 获得元素的内容宽度（只读属性）"></a>offsetWidth 获得元素的内容宽度（只读属性）</h2><p>与直接.width区别在于获取的是数值，并非字符串，方便js操作</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>div     style<span class="token operator">=</span>"width<span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    height<span class="token punctuation">:</span>200px<span class="token punctuation">;</span>     border<span class="token punctuation">:</span> 1px<span class="token punctuation">;</span>     padding<span class="token operator">=</span><span class="token string">"10px"</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">let</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// offsetWidth 获得元素的内容高度(样式宽度+边框+padding)</span>box<span class="token punctuation">.</span>offsetWidth <span class="token operator">=</span> 222px<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="offsetHeight-获得元素的内容高度（只读属性）"><a href="#offsetHeight-获得元素的内容高度（只读属性）" class="headerlink" title="offsetHeight 获得元素的内容高度（只读属性）"></a>offsetHeight 获得元素的内容高度（只读属性）</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>div     style<span class="token operator">=</span>"width<span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    height<span class="token punctuation">:</span>200px<span class="token punctuation">;</span>     border<span class="token punctuation">:</span> 1px<span class="token punctuation">;</span>     padding<span class="token operator">=</span><span class="token string">"10px"</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">let</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// offsetWidth 获得元素的内容高度(样式宽度+边框+padding)</span>box<span class="token punctuation">.</span>offsetHeight <span class="token operator">=</span> 222px<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="offsetTop-amp-offsetLeft"><a href="#offsetTop-amp-offsetLeft" class="headerlink" title="offsetTop &amp; offsetLeft"></a>offsetTop &amp; offsetLeft</h2><p>当前元素的上边框到offsetParent元素上边框的距离</p><p>当前元素的上边框到offsetParent元素左边框的距离</p><p>offsetParent：具有定位的 父级元素，如果找不到就以body上边距为准</p><h2 id="client-客户端（当前元素）-大小"><a href="#client-客户端（当前元素）-大小" class="headerlink" title="client 客户端（当前元素） 大小"></a>client 客户端（当前元素） 大小</h2><p>==client当前元素 不包含border margin==</p><p>clientWidth  = width + paddin-left + padding-right</p><p>clientHeight  =  width +  paddin-top+ padding-bottom</p><p>clientLeft = 左边框大小</p><p>clientTop = 上边框大小</p><p>tip：</p><p> ==所有的client属性都是 只读 的==</p><p>==如果元素设为display：none； client获取全为零==</p><p>==大量访问client是非常消耗性能的，要尽量避免重复访问==</p><h2 id="scroll滚动"><a href="#scroll滚动" class="headerlink" title="scroll滚动"></a>scroll滚动</h2><p>在style中 添加 overflow: scroll; 可实现滚动</p><h3 id="scrollHeight-元素总高度"><a href="#scrollHeight-元素总高度" class="headerlink" title="scrollHeight 元素总高度"></a>scrollHeight 元素总高度</h3><pre><code>// 元素的总高度，包含滚动条外的不可见 高度（内容加边框加padding）// 无滚动条时 scrollHeight 与 clientHeight 是相同的</code></pre><h3 id="scrollWidth-元素总宽度"><a href="#scrollWidth-元素总宽度" class="headerlink" title="scrollWidth 元素总宽度"></a>scrollWidth 元素总宽度</h3><pre><code>// 元素的总宽度，包含滚动条外的不可见 宽度（内容加边框加padding）// 无滚动条时 scrollWidth 与 clientWidth 是相同的</code></pre><h3 id="scrollTop-可读写-元素被卷起的高度"><a href="#scrollTop-可读写-元素被卷起的高度" class="headerlink" title="scrollTop(可读写) 元素被卷起的高度"></a>scrollTop(可读写) 元素被卷起的高度</h3><pre><code>// 当滚动条滚动到底部时，符合以下公式scrollHeight = clientHeight + scrollTop</code></pre><h3 id="scrollLeft-可读写-元素被卷起的宽度"><a href="#scrollLeft-可读写-元素被卷起的宽度" class="headerlink" title="scrollLeft(可读写) 元素被卷起的宽度"></a>scrollLeft(可读写) 元素被卷起的宽度</h3><pre><code>// 当滚动条滚动到底部时，符合以下公式scrollWhiht = clientwhiht + scrollLeft</code></pre><h3 id="scrollTo-方法-快速返回顶部"><a href="#scrollTo-方法-快速返回顶部" class="headerlink" title="scrollTo 方法(快速返回顶部)"></a>scrollTo 方法(快速返回顶部)</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 示例</span>btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 写入要返回的坐标</span>    <span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重修数据结构</title>
      <link href="/2022/03/17/%E9%87%8D%E4%BF%AE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2022/03/17/%E9%87%8D%E4%BF%AE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>复杂度==&gt; 程序复杂的程度</p><ul><li>概念 程序执行时需要计算量和内存空间（与代码简洁度无关）</li><li>是一个数量级， 并不是一个具体的数</li></ul><ol><li><p>大O表示法：<code>T(n) = O(f(n))</code></p><p>多项式量级：</p><ul><li>常数阶 O(1)</li><li>对数阶 O(logn)</li><li>线性阶 O(n)</li><li>线性对数阶 O(nlogn)</li><li>平方阶 O(n²) O(n³) … O(n^k)</li></ul><p>非多项式量级：(n越多，执行时间急剧上升，性能低)</p><ul><li>指数阶 O(2^n)</li><li>阶乘阶 O(n!)</li></ul><p>加法法则和乘法法则</p><ul><li>加法法则：总复杂度等于量级最大的那段代码的复杂度</li><li>乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</li></ul><p>平均时间复杂度：</p><ul><li>也叫加权平均时间复杂度或者期望时间复杂度。</li><li>要会计算：最好、最坏、平均时间</li></ul><p>均摊时间复杂度</p><ul><li>特殊的平均时间复杂度</li><li>相当于算法有规律可循，计算时间时，可以把一次耗时多的操纵的时间，均摊给多次耗时少的操纵。</li></ul></li></ol><h1 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h1><p>前端开发重时间 轻空间</p><h1 id="基本数据结构"><a href="#基本数据结构" class="headerlink" title="基本数据结构"></a>基本数据结构</h1><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><ul><li>一个先进后出的数据结构</li></ul><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><ul><li>一个先进先出的数据结构</li></ul><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><ul><li>多个元素组成的列表</li><li>元素存储不连续， 使用next指针联系在一起</li></ul><h3 id="数组vs链表"><a href="#数组vs链表" class="headerlink" title="数组vs链表"></a>数组vs链表</h3><ul><li>数组： 增删非首尾元素要移动元素</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// js中没有链表 ，但可以用Object模拟链表</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>val<span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">}</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span>val<span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">}</span><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token punctuation">{</span>val<span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">}</span>a<span class="token punctuation">.</span>next <span class="token operator">=</span> bb<span class="token punctuation">.</span>next <span class="token operator">=</span> c<span class="token comment" spellcheck="true">// 这样就模拟出了链表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链表操作"><a href="#链表操作" class="headerlink" title="链表操作"></a>链表操作</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 遍历链表</span><span class="token comment" spellcheck="true">// 创建一个指针 指向链表头</span><span class="token keyword">let</span> p <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 访问链表内容</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当循环时 将指针指向下一个表元素</span>    p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 插入链表元素</span><span class="token keyword">const</span> e <span class="token operator">=</span> <span class="token punctuation">{</span>val<span class="token punctuation">:</span> <span class="token string">'e'</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 创建元素</span><span class="token comment" spellcheck="true">// 如果想将他插入 a和b 之间 就改变指针指向就可</span>a<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>e<span class="token punctuation">.</span>next <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 删除链表元素 b</span>a<span class="token punctuation">.</span>next <span class="token operator">=</span> c<span class="token punctuation">;</span>b<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>一个完全二叉树</p><p>js不存在堆的数据结构——使用数组模拟</p><p>————可快速获得第n个 最大最小值</p><h3 id="最小堆的实现"><a href="#最小堆的实现" class="headerlink" title="最小堆的实现"></a>最小堆的实现</h3><p>插入（O(logK)）： 尾部插入，然后上移直到插入值小于或等于堆顶元素（最小堆）</p><p>删除堆顶（O(logK)）： 尾部元素替换堆顶，然后下移直到子节点大于等于这个新堆顶（直接删除堆顶会破坏堆的结构）</p><p>获取堆顶： 返回数组的头部</p><p>获取堆的的大小： 返回数组的长度</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 最小类堆 （堆是一个完全二叉树，且只有最小和最大堆）</span><span class="token keyword">class</span> <span class="token class-name">MinHeap</span> <span class="token punctuation">{</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>heap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 获取父节点下标的方法</span> <span class="token function">getParentIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 获取父节点的公式 (i-1) / 2</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">></span><span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 获取左侧下标的方法</span> <span class="token function">getLeftIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 获取左侧的公式 i * 2 + 1</span>  <span class="token keyword">return</span> i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 获取右侧下标的方法</span> <span class="token function">getRightIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 获取右侧的公式 i * 2 + 2</span>  <span class="token keyword">return</span> i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 交换的方法封装</span> <span class="token function">swap</span><span class="token punctuation">(</span>i1<span class="token punctuation">,</span> i2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 上移操作的封装</span> <span class="token function">shiftUp</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 递归出口</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 父节点下标</span>  <span class="token keyword">const</span> parentIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getParentIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 当前值大于父节点就交换</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>parentIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 封装一个交换的方法</span>   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>parentIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 递归判断</span>   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftUp</span><span class="token punctuation">(</span>parentIndex<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 插入操作 将值插入堆的底部 然后上移：与父节点交换直到父节点小于等于插入的值</span> <span class="token comment" spellcheck="true">// 大小为k的堆 复杂度O(log K)</span> <span class="token function">inset</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 将值插入堆的底部</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 封装一个上移的方法</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftUp</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token function">shiftDown</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 获取左右节点</span>  <span class="token keyword">const</span> leftIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLeftIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> rightIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRightIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 当前节点大于 左侧节点 就交换</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>leftIndex<span class="token punctuation">]</span><span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>leftIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 递归找寻自己合适的位置</span>   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftDown</span><span class="token punctuation">(</span>leftIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 当前节点大于 右侧节点 就交换</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>rightIndex<span class="token punctuation">]</span><span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>rightIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 递归找寻自己合适的位置</span>   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftDown</span><span class="token punctuation">(</span>rightIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 删除堆顶</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 下移操作</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 获取堆顶</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 获取堆的大小</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span>length <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试</span><span class="token keyword">const</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MinHeap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>h<span class="token punctuation">.</span><span class="token function">inset</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span><span class="token function">inset</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span><span class="token function">inset</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="搜索排序"><a href="#搜索排序" class="headerlink" title="搜索排序"></a>搜索排序</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的手写算法</title>
      <link href="/2022/03/06/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%89%8B%E5%86%99%E7%AE%97%E6%B3%95/"/>
      <url>/2022/03/06/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%89%8B%E5%86%99%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="一些实际应用"><a href="#一些实际应用" class="headerlink" title="一些实际应用"></a>一些实际应用</h1><p>性能相关</p><ul><li><p>虚拟列表</p></li><li><p>图片懒加载 - 见<code>防抖</code>的实际应用</p></li><li><p>路由懒加载</p></li><li><p>滚动加载</p></li><li><p>渲染大数据不卡顿</p></li><li><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*    渲染大数据时 合理使用      document.createDocumentFragment()       window.requestAnimationFrame()      这两个API 将操作分为一小段一小段的执行*/</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 插入十万条数据</span>  <span class="token keyword">const</span> total <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 每一次插入多少数据</span>  <span class="token keyword">const</span> once <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 全部插入需要的次数</span>  <span class="token keyword">const</span> loopCount <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>total <span class="token operator">/</span> once<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 添加的次数 计数器</span>  <span class="token keyword">let</span> countOfRender <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true">// 获取父标签</span>  <span class="token keyword">const</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 添加数据的方法</span>  <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> fragment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> once<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span>      li<span class="token punctuation">.</span>innertext <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> total<span class="token punctuation">)</span>      fragment<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span>    countOfRender <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>     <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// loop函数</span>  <span class="token keyword">const</span> loop <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>countOfRender <span class="token operator">&lt;</span> loopCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>      window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 执行一次loop函数 相当于入口</span>  <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>打印当前页面的使用了多少种HTML元素</p></li><li><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 打印当前页元素</span><span class="token comment" spellcheck="true">/*    1、document.querySelectorAll('*') 获取全部节点    2、[...] 类数组转化为数组    3、map遍历出所有节点的名字（tagName）    4、[...mew Set()] 去重    5、.length 返回长度*/</span><span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>el <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">return</span> el<span class="token punctuation">.</span>tagName<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="防抖节流"><a href="#防抖节流" class="headerlink" title="防抖节流"></a>防抖节流</h1><h2 id="1、防抖"><a href="#1、防抖" class="headerlink" title="1、防抖"></a>1、防抖</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">antiShake</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        timer <span class="token operator">=</span> <span class="token function">setTiemeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> ar<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="——应用-图片懒加载-不推荐使用，全部加载完毕后仍然会触发函数"><a href="#——应用-图片懒加载-不推荐使用，全部加载完毕后仍然会触发函数" class="headerlink" title="——应用-图片懒加载 (不推荐使用，全部加载完毕后仍然会触发函数)"></a>——应用-图片懒加载 (不推荐使用，全部加载完毕后仍然会触发函数)</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector">img </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* border: 1px solid #778473; */</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">25</span>vw<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50</span>vw<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* margin: auto; */</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.seovx.com/d/?mom<span class="token punctuation">=</span>302<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.seovx.com/d/?mom<span class="token punctuation">=</span>302<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.seovx.com/d/?mom<span class="token punctuation">=</span>302<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.seovx.com/d/?mom<span class="token punctuation">=</span>302<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.seovx.com/d/?mom<span class="token punctuation">=</span>302<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.seovx.com/d/?mom<span class="token punctuation">=</span>302<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.seovx.com/d/?mom<span class="token punctuation">=</span>302<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 防抖函数</span>    <span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          timer <span class="token operator">=</span> <span class="token keyword">null</span>          fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 图片懒加载</span>    <span class="token keyword">let</span> imgs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// lazyLoad()</span>    <span class="token keyword">function</span> <span class="token function">lazyLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 窗口的可视区高度</span>      <span class="token keyword">let</span> innerHeight <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 获取当前页面的滚动条纵坐标位置</span>      <span class="token keyword">let</span> scrollTop <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>      imgs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// offsetTop属性：返回元素上外边缘距离最近采用定位父元素内壁的距离，如果父辈元素没有采用定位，则获取上外边缘距离文档内壁的距离</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>offsetTop <span class="token operator">&lt;</span> innerHeight <span class="token operator">+</span>  scrollTop<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 获取自定义属性getAttribute 将自定义属性的值赋给src 完成加载 </span>          res<span class="token punctuation">.</span>src <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'data-src'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 页面滑动时触发 套入防抖函数 节省性能</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> <span class="token function">throttle</span><span class="token punctuation">(</span>lazyLoad<span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="——图片懒加载改进-使用IntersectionObserver-API"><a href="#——图片懒加载改进-使用IntersectionObserver-API" class="headerlink" title="——图片懒加载改进(使用IntersectionObserver API)"></a>——图片懒加载改进(使用IntersectionObserver API)</h3><p>==IntersectionObserver 以用来监听元素是否进入了设备的可视区域之内，而不需要频繁的计算来做这个判断==</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector">img </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* border: 1px solid #778473; */</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">25</span>vw<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50</span>vw<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* margin: auto; */</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.seovx.com/d/?mom<span class="token punctuation">=</span>302<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.seovx.com/d/?mom<span class="token punctuation">=</span>302<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.seovx.com/d/?mom<span class="token punctuation">=</span>302<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.seovx.com/d/?mom<span class="token punctuation">=</span>302<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.seovx.com/d/?mom<span class="token punctuation">=</span>302<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.seovx.com/d/?mom<span class="token punctuation">=</span>302<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.seovx.com/d/?mom<span class="token punctuation">=</span>302<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 图片懒加载</span>    <span class="token keyword">let</span> imgs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// IntersectionObserver 判断元素是否出现在可视区    </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>IntersectionObserver<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> lazyLoadObser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// entries 元素集合</span>        entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 获取每一个img元素</span>          <span class="token keyword">let</span> lazyImage <span class="token operator">=</span> item<span class="token punctuation">.</span>target          <span class="token comment" spellcheck="true">// intersectionRatio 在可视区的比例 完全隐藏为0 完全出现为1</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>intersectionRatio<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 当元素进入可视区时加载图片</span>            lazyImage<span class="token punctuation">.</span>src <span class="token operator">=</span> lazyImage<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'data-src'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 全部加载完成后卸载</span>            lazyLoadObser<span class="token punctuation">.</span><span class="token function">unobserve</span><span class="token punctuation">(</span>lazyImage<span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 循环</span>      imgs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>lazyLoadObser<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、节流"><a href="#2、节流" class="headerlink" title="2、节流"></a>2、节流</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>            timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                timer <span class="token operator">=</span> <span class="token keyword">null</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span>           <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">claerTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>                   <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h1><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 浅拷贝与赋值的区别</span>赋值：当我们把一个对象赋值给一个新的变量，赋的是该对象在栈中的地址，而不是栈中的数据。两个对象指向同一个存储空间。浅拷贝： 重新堆中创建内存，拷贝前后对象的<span class="token template-string"><span class="token string">`基本数据类型`</span></span>互不影响，但对象若有深层次的（<span class="token template-string"><span class="token string">`引用数据类型`</span></span>）拷贝的仍然是地址，由于共享同一块内存会互相影响。深拷贝：在堆中重新开辟一个区域存放对象，对对象的更深层次的对象进行<span class="token template-string"><span class="token string">`递归拷贝`</span></span>，完成后两个对象互不影响。<span class="token comment" spellcheck="true">// 浅拷贝</span>在多维数据处理拷贝中，浅拷贝只为第一层开辟了新的内存空间，拷贝后的对象操作更深层次的数据时会改变原数据。因此需要进行深拷贝<span class="token function">原始数据</span><span class="token punctuation">(</span>三层数据<span class="token punctuation">)</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name： <span class="token string">"lcy"</span><span class="token punctuation">,</span>    NAN<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    dx<span class="token punctuation">:</span> <span class="token punctuation">{</span>        age<span class="token punctuation">:</span> <span class="token number">18</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 简单浅拷贝实现 </span><span class="token comment" spellcheck="true">// let obj2 = {...obj}</span><span class="token comment" spellcheck="true">// Object.assgin() </span><span class="token comment" spellcheck="true">// Array.prototype.concat() </span><span class="token comment" spellcheck="true">// Array.peototype.slice()</span><span class="token comment" spellcheck="true">// es5方法</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    obj2<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 深拷贝 </span>方法一：JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>将字符串改变为对象 JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>将对象转变为字符串<span class="token keyword">let</span> obj2 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//问题： 原始数据内若有函数，日期对象，正则表达式会出现问题，无法拷贝copyObj对象原型链上的属性和方法，当数据的层次很深，会栈溢出，函数和正则表达式会替换为空对象，日期对象会变为字符串（理想的是变为标准日期对象）</span>方法二：因此采用递归的方法更为合适<span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 过滤特殊情况</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!=</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 不直接创建对象的目的：克隆的结果和之前的保存相同的所属类</span>    <span class="token keyword">let</span> newobj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">obj<span class="token punctuation">.</span>constructor</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasOwnproperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            newobj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newobj<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="数组类"><a href="#数组类" class="headerlink" title="数组类"></a>数组类</h1><h2 id="1、-数组扁平化"><a href="#1、-数组扁平化" class="headerlink" title="1、 数组扁平化"></a>1、 数组扁平化</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// es6</span>arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 正则</span><span class="token comment" spellcheck="true">// 先转为字符串， 正则只保留最外层的[] 然后通过 ，号分割</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\[|\]/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 递归</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">fn</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 使用 reduce</span><span class="token keyword">const</span> flatten <span class="token operator">=</span> arr <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> pre<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">flatten</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">:</span> cur<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、类数组转数组"><a href="#2、类数组转数组" class="headerlink" title="2、类数组转数组"></a>2、类数组转数组</h2><pre class="line-numbers language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>类数组<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">...</span>类数组<span class="token punctuation">]</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>类数组<span class="token punctuation">)</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>concat<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 类数组<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、数组去重"><a href="#3、数组去重" class="headerlink" title="3、数组去重"></a>3、数组去重</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// set方法</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 循环去重</span><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> newarr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    arr<span class="token punctuation">.</span><span class="token function">forEact</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>newarr<span class="token punctuation">.</span><span class="token function">indexof</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           newarr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// filter去重</span><span class="token keyword">const</span> <span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 利用indexof(查询数组指定元素的索引)</span>        <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">indexof</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> index    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// map去重</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组降维"><a href="#数组降维" class="headerlink" title="数组降维"></a>数组降维</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 数组内置flat方法</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 递归</span><span class="token keyword">let</span> newarr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">fn</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>          newarr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newarr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="字符串类"><a href="#字符串类" class="headerlink" title="字符串类"></a>字符串类</h1><h2 id="获取指定URL的参数"><a href="#获取指定URL的参数" class="headerlink" title="获取指定URL的参数"></a>获取指定URL的参数</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getQueryVariable</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 获取浏览器地址参数 并通过substring去除 ？</span>   <span class="token keyword">let</span> query <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 获取 将多个参数分割开</span>   <span class="token keyword">let</span> vars <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>vars<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">// 参数名与值分割 为数组</span>           <span class="token keyword">var</span> pair <span class="token operator">=</span> vars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 参数名与查询的一致 就返回参数值</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>pair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> variable<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> pair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反转字符串"><a href="#反转字符串" class="headerlink" title="反转字符串"></a>反转字符串</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 反转字符串 方法一</span><span class="token keyword">function</span> <span class="token function">reverseStr</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// split将字符串变为数组</span>    str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// reverse() 反转数组</span>    str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// join() 数组转为字符串</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">reverseStr</span><span class="token punctuation">(</span><span class="token string">'lcy'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 反转字符串 方法二 模拟栈(先进后出)</span><span class="token comment" spellcheck="true">// 模拟栈实现</span>    <span class="token keyword">function</span> <span class="token function">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存栈的元素</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录栈顶的位置</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 在Stack栈的原型上添加方法</span>    Stack<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 入栈 在栈顶加入元素 元素个数发生改变</span>      push<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 出栈， 先返回栈顶的元素，元素的个数减一</span>      pop<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token operator">--</span><span class="token keyword">this</span><span class="token punctuation">.</span>pop<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 返回栈内元素长度</span>      length<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>top<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//以上仅为模拟栈， 反转字符串方方法与方法一类似（循环压栈出栈）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="统计字符串中出现的最多字符和次数"><a href="#统计字符串中出现的最多字符和次数" class="headerlink" title="统计字符串中出现的最多字符和次数"></a>统计字符串中出现的最多字符和次数</h2><h1 id="常见属性操作符"><a href="#常见属性操作符" class="headerlink" title="常见属性操作符"></a>常见属性操作符</h1><h2 id="手写new"><a href="#手写new" class="headerlink" title="手写new"></a>手写new</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*    主要考察对原型的理解当new Fn执行的时候，内部执行过程如下：1、 一个继承自Fn.prototype的新对象被创建。2、使用指定的参数调用构造函数Fn，并将this绑定到新创建的对象。new Fn等同于new Fn()，也就是没有指定参数列表，Fn 不带任何参数调用的情况。3、由构造函数返回的对象就是new表达式的结果。如果构造函数没有显式返回一个对象，则返回步骤1创建的对象。（一般情况下，构造函数不返回值，但是用户可以选择主动返回对象，来覆盖正常的对象创建步骤）4、这里需要注意，如果构造返回的不是对象，则不管return语句，返回步骤1创建的对象。*/</span><span class="token keyword">function</span> <span class="token function">_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取参数的第一个（方法）</span>    <span class="token keyword">const</span> Con <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>spilt<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 因为new 返回一个对象 创建一个对象</span>    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将新对象原型 设为父类的原型 以获取父类的方法</span>    obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> Con<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取父类的静态成员</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> Con<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>arguments<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 判断新对象是否为对象， 容错</span>    <span class="token keyword">return</span> obj <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token operator">?</span> object <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="手写instanceof"><a href="#手写instanceof" class="headerlink" title="手写instanceof"></a>手写instanceof</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> instance <span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 获取对象的原型</span>  <span class="token keyword">let</span> proto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 获取构造函数的prototype</span>  <span class="token keyword">const</span> prototype <span class="token operator">=</span> right<span class="token punctuation">.</span>prototype  <span class="token comment" spellcheck="true">// 循环判断构造函数的prototype 属性是否出现在对象原型链中的任何位置</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>proto<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>proto <span class="token operator">===</span> prototype<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    proto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>proto<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="手写-Object-is"><a href="#手写-Object-is" class="headerlink" title="手写 Object.is()"></a>手写 Object.is()</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Object.is 主要解决 </span><span class="token comment" spellcheck="true">/*    +0 === -0     true    NaN === NaN     false*/</span><span class="token keyword">const</span> is <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">===</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> x <span class="token operator">!==</span> <span class="token number">0</span> <span class="token operator">||</span> y <span class="token operator">!==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token number">1</span><span class="token regex">/x === 1/y</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> x <span class="token operator">!==</span> x <span class="token operator">&amp;&amp;</span> y <span class="token operator">!==</span> y    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="手写-Object-assign"><a href="#手写-Object-assign" class="headerlink" title="手写 Object.assign()"></a>手写 Object.assign()</h2><pre><code></code></pre><h1 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h1><h1 id="手写Promise"><a href="#手写Promise" class="headerlink" title="手写Promise"></a>手写Promise</h1><h3 id="async-await及实现原理-重点"><a href="#async-await及实现原理-重点" class="headerlink" title="async/await及实现原理-重点"></a>async/await及实现原理-重点</h3><p>​    异步编程进化：生成器函数 =&gt; Promise =&gt; async await</p><p>async 与 await结合可以让异步代码向同步代码一样（异步编程解决方案）</p><ul><li><p>async函数的返回值是Promise 对象。</p></li><li><p>promise对象的结果是 async 函数执行的返回值决定的。</p></li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 情况一：返回非promise对象： 则返回结果是成功的promse对象</span>    <span class="token keyword">return</span> <span class="token string">'非promise'</span>    <span class="token comment" spellcheck="true">// 情况二： 抛出错误： 返回结果是 失败的promise 对象</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"抛出错误"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 情况三： 返回结果是一个Promise对象： </span>    <span class="token comment" spellcheck="true">// 如果promise返回的是resolve成功的，则返回结果是成功的 promise 对象，成功的值是promise成功的值</span>    <span class="token comment" spellcheck="true">// 反之若promise返回失败reject则返回失败 promise 对象</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'成功'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>await</p><ul><li>await必须写在async函数中</li><li>await 右侧的表达式一般为promise对象</li><li>await返回的是后面promise 成功的<code>值</code></li><li>await的promise失败了，就会抛出异常，需要 try..catch..捕获</li></ul><p>案例：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 发送Ajax请求</span>    <span class="token keyword">function</span> <span class="token function">sendAJAX</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化</span>        http<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 发送</span>        htp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 事件绑定</span>        http<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>http<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>http<span class="token punctuation">.</span>status <span class="token operator">></span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> http<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">resolve</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>response<span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token function">reject</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>status<span class="token punctuation">)</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// then的做法</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">sendAJAX</span><span class="token punctuation">(</span><span class="token string">'https://api.apiopen.top/getJoke'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// async await做法</span>    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">sendAJAX</span><span class="token punctuation">(</span><span class="token string">'https://api.apiopen.top/getJoke'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>静态方法</p><h1 id="event模块"><a href="#event模块" class="headerlink" title="event模块"></a>event模块</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2源码探秘</title>
      <link href="/2022/03/04/vue2%E6%BA%90%E7%A2%BC%E6%8E%A2%E7%A7%98/"/>
      <url>/2022/03/04/vue2%E6%BA%90%E7%A2%BC%E6%8E%A2%E7%A7%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-的总体流程"><a href="#Vue-的总体流程" class="headerlink" title="Vue 的总体流程"></a>Vue 的总体流程</h1><p>Vue源码中文网（参考别人学习）：<a href="https://vue-js.com/learn-vue/start/">https://vue-js.com/learn-vue/start/</a></p><p>神仙文章（流程）：<a href="https://blog.csdn.net/weixin_44523860/article/details/116615636?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0.pc_relevant_default&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3">https://blog.csdn.net/weixin_44523860/article/details/116615636?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0.pc_relevant_default&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3</a></p><ol><li><p>软文<a href="https://juejin.cn/post/6844903845282185229">https://juejin.cn/post/6844903845282185229</a></p></li><li><p>从Vue的构造函数中可以看到，当我们执行<code>new Vue()</code>的时候，只执行了一个<code>_init</code>方法。<code>_init</code>会根据传入的选项对vue进行初始化。props、data、生命周期，事件机制的初始化都是在此过程中完成的。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Vue构造函数</span><span class="token keyword">function</span> Vue <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span>    <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Vue</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'Vue is a constructor and should be called with the `new` keyword'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 执行初始化逻辑</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_init</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Vue是数据双向绑定，当数据改变时会重新渲染更新视图。 它是怎么做到的呢？</p><pre><code>1、 在vue中书写的template模板都会视为字符串2、 在底层会先进行AST转换 将模板解析为抽象语法树3、 获取AST后会进行优化，（并不是所有的都需要响应式）4、 用优化后的AST生成 render渲染函数5、 根据渲染函数 抽象出 Vnode6、 Vnode 通过diff（新旧比对） 获得差异7、 差异 patch上树 将差异渲染回真实的dom </code></pre></li><li><p> 初始化 -&gt; 模板 -&gt; AST -&gt; render -&gt; vnode -&gt; 页面</p></li><li><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/11/4/16e34e818c71943a~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p></li></ol><p>​       大体总结起来就是先对选项对象初始化，通过Object.defineProperty建立一套响应式系统，然后将模板解析成render函数，然后使用render函数生成vnode，在渲染前，对vnode进行diff操作，最后进行必要的渲染。</p><h1 id="响应式原理"><a href="#响应式原理" class="headerlink" title="响应式原理"></a>响应式原理</h1><p>defineReactive<br>watch<br>dep<br>observe<br>Observe</p><p>数组的响应式<br>pop push shift unshift sort splice reverse</p><p>Object.defineProperty()</p><p>可以设置额外的属性</p><h1 id="AST"><a href="#AST" class="headerlink" title="AST"></a>AST</h1><p>軟文：<a href="https://juejin.cn/post/7004378443500486692">https://juejin.cn/post/7004378443500486692</a></p><p>抽象语法树与虚拟节点的关系</p><p>模板语法——&gt; 抽象语法树AST——&gt; 渲染函数（h函数）——&gt; 虚拟节点—diff算法—&gt;界面（真实DOM）</p><p>AST抽象语法树是一个中间层，模板语法直接转换真实DOM是非常难的（加入AST作为缓冲）</p><p>学习的前置知识 ——指针——递归——栈</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 递归 斐波那契数列</span><span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 加入缓存策略</span><span class="token keyword">const</span> fib <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断缓存</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cache<span class="token punctuation">[</span>n<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 结果加入缓存</span>    cache<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>    <span class="token keyword">return</span> v<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 递归 多维数组转树</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">tree</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 准备一个结果数组</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 循环</span>  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断是数组就递归</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        children<span class="token punctuation">:</span> <span class="token function">tree</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>value<span class="token punctuation">:</span> res<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> o<span class="token punctuation">.</span>children <span class="token operator">=</span> result<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 方法二 利用map</span><span class="token keyword">const</span> tree <span class="token operator">=</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>value<span class="token punctuation">:</span> item<span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      children<span class="token punctuation">:</span> item<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token function">tree</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 栈的练习 形式转换 2[a]2[b] => aabb</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token number">3</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token keyword">const</span> smartRepeat <span class="token operator">=</span> <span class="token punctuation">(</span>tempLateStr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 指针</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 栈存数字</span>    <span class="token keyword">let</span> stack1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 栈存字符串</span>    <span class="token keyword">let</span> stack2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 循环</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> tempLateStr<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        indesx<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="AST源码探秘"><a href="#AST源码探秘" class="headerlink" title="AST源码探秘"></a>AST源码探秘</h2><ul><li>借鉴源码思想</li><li>拆分独立js 独立单元测试</li><li>先主干后枝叶</li></ul><p>vue-loader视角下看<template></template> 是以字符串的形式处理</p><ul><li>获取模板</li><li>指针遍历——利用栈处理</li><li>栈处理双栈处理，后存入容器——转换成树结构</li><li>处理完成后方便生成h函数</li></ul><h2 id="AST总体思想"><a href="#AST总体思想" class="headerlink" title="AST总体思想"></a>AST总体思想</h2><ul><li><p>将template模板收集 传入主函数 (利用栈处理为树结构)</p></li><li><p>whil循环——提取开始结束标签（推入栈一，并同步向栈二推入容器数组），提取内容推入栈二对应的容器数组</p></li><li><p>转换样例</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>2333<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1433<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>// 转换后{  tag: "div",   children: [    {      tag: "h3",       children: [ { text: "2333", type: 3 }],       type: 1,    },    {      tag: "ul",       children: [        {          tag: "li",           children: [{ text: "1433", type: 3 }],           type: 1,        }      ],       type: 1,    }  ],   type: 1}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>主函数</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// parse.js</span><span class="token keyword">import</span> parseAttrs <span class="token keyword">from</span> <span class="token string">'./parseAttrs.js'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span>templateStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 准备一个指针</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true">// 准备两个栈</span>  <span class="token comment" spellcheck="true">// 初始添加元素 { children: [] } 是因为如果不加， stackContent 在遇到最后一个封闭标签进行弹栈后，stackContent 里就没有元素了，也没有 .children 可以去 push 了</span>  <span class="token keyword">const</span> stackTag <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stackContent <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">// 指针所指位置为开头的剩余字符串</span>  <span class="token keyword">let</span> restTemplateStr <span class="token operator">=</span> templateStr  <span class="token comment" spellcheck="true">// 识别开始标签的正则</span>  <span class="token keyword">const</span> regExpStart <span class="token operator">=</span> <span class="token regex">/^&lt;([a-z]+[1-6]?)(\s?[^>]*)>/</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> templateStr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  restTemplateStr <span class="token operator">=</span> templateStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 遇到开始标签</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>regExpStart<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>restTemplateStr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> startTag <span class="token operator">=</span> restTemplateStr<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regExpStart<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 标签</span>    <span class="token keyword">const</span> attrsStr <span class="token operator">=</span> restTemplateStr<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regExpStart<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 属性</span>    <span class="token comment" spellcheck="true">// 标签栈进行压栈</span>    stackTag<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>startTag<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 内容栈进行压栈</span>    stackContent<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      tag<span class="token punctuation">:</span> startTag<span class="token punctuation">,</span>      attrs<span class="token punctuation">:</span> <span class="token function">parseAttrs</span><span class="token punctuation">(</span>attrsStr<span class="token punctuation">)</span><span class="token punctuation">,</span>      type<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    i <span class="token operator">+</span><span class="token operator">=</span> startTag<span class="token punctuation">.</span>length <span class="token operator">+</span> attrsStr<span class="token punctuation">.</span>length  <span class="token operator">+</span> <span class="token number">2</span> <span class="token comment" spellcheck="true">// +2 是因为还要算上 &lt; 和 ></span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/^&lt;\/[a-z]+[1-6]?>/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>restTemplateStr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 遇到结束标签</span>    <span class="token keyword">const</span> endTag <span class="token operator">=</span> restTemplateStr<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/^&lt;\/([a-z]+[1-6]?)>/</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 结束标签应该与标签栈的栈顶标签一致</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>endTag <span class="token operator">===</span> stackTag<span class="token punctuation">[</span>stackTag<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 两个栈都进行弹栈</span>      stackTag<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> popContent <span class="token operator">=</span> stackContent<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      stackContent<span class="token punctuation">[</span>stackContent<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>popContent<span class="token punctuation">)</span>      i <span class="token operator">+</span><span class="token operator">=</span> endTag<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">3</span> <span class="token comment" spellcheck="true">// +3 是因为还要算上 &lt;/ 和 ></span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">'标签'</span> <span class="token operator">+</span> stackTag<span class="token punctuation">[</span>stackTag<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'没有闭合'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/^[^&lt;]+&lt;\/[a-z]+[1-6]?>/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>restTemplateStr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 遇到内容</span>    <span class="token keyword">const</span> wordStr <span class="token operator">=</span> restTemplateStr<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/^([^&lt;]+)&lt;\/[a-z]+[1-6]?>/</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 捕获结束标签 &lt;/> 之前的内容，并且不能包括开始标签 &lt;></span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex">/^\s+$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>wordStr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果捕获的内容不为空</span>      <span class="token comment" spellcheck="true">// 将内容栈栈顶元素进行赋值</span>      stackContent<span class="token punctuation">[</span>stackContent<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        text<span class="token punctuation">:</span> wordStr<span class="token punctuation">,</span>        type<span class="token punctuation">:</span> <span class="token number">3</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    i <span class="token operator">+</span><span class="token operator">=</span> wordStr<span class="token punctuation">.</span>length  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    i<span class="token operator">++</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 因为定义 stackContent 的时候就默认添加了一项元素 { children: [] }，现在只要返回 children 的第一项就行 </span> <span class="token keyword">return</span> stackContent<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Attrs</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// parseAttrs.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span>attrsStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> attrsStrTrim <span class="token operator">=</span> attrsStr<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 去空格</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>attrsStrTrim<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> point <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// 断点</span>    <span class="token keyword">let</span> isYinhao <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 是否是引号</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 结果数组</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> attrsStrTrim<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>attrsStrTrim<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'"'</span><span class="token punctuation">)</span> isYinhao <span class="token operator">=</span> <span class="token operator">!</span>isYinhao      <span class="token comment" spellcheck="true">// 遇到空格且不在双引号内，就截取从 point 到此的字符串</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isYinhao <span class="token operator">&amp;&amp;</span> <span class="token regex">/\s/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>attrsStrTrim<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> attrs <span class="token operator">=</span> attrsStrTrim<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> index<span class="token punctuation">)</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>attrs<span class="token punctuation">)</span>        point <span class="token operator">=</span> index      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>attrsStrTrim<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>point <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 最后一个属性是没有通过 for 循环得到的，所以要专门加上，+1 是为了去除开始的空格</span>    <span class="token comment" spellcheck="true">// ["id="legend"", "class="jay song""]</span>    result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 根据等号拆分</span>      <span class="token keyword">const</span> itemMatch <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/(.+)="(.+)"/</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> itemMatch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        value<span class="token punctuation">:</span> itemMatch<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 前端爬楼梯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>promise专题</title>
      <link href="/2022/02/26/promise%E4%B8%93%E9%A2%98/"/>
      <url>/2022/02/26/promise%E4%B8%93%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>开篇，推荐一大神笔记，看完受益非浅</p><p><a href="https://gitee.com/hongjilin/hongs-study-notes/blob/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Promise%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/A_Promise%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.md#%E4%B8%80promise%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E4%BD%BF%E7%94%A8">https://gitee.com/hongjilin/hongs-study-notes/blob/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Promise%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/A_Promise%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.md#%E4%B8%80promise%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E4%BD%BF%E7%94%A8</a></p><h1 id="Promise的几个关键问题"><a href="#Promise的几个关键问题" class="headerlink" title="Promise的几个关键问题"></a>Promise的几个关键问题</h1><h2 id="如何改变-promise-的状态"><a href="#如何改变-promise-的状态" class="headerlink" title="如何改变 promise 的状态?"></a>如何改变 promise 的状态?</h2><blockquote><p>(1) resolve(value): 如果当前是 pending 就会变为 resolved</p><p>(2) reject(reason): 如果当前是 pending 就会变为 rejected</p><p>(3) 抛出异常: 如果当前是 pending 就会变为 rejected</p></blockquote><h2 id="一个-promise-指定多个成功-失败回调函数-都会调用吗"><a href="#一个-promise-指定多个成功-失败回调函数-都会调用吗" class="headerlink" title="一个 promise 指定多个成功/失败回调函数, 都会调用吗?"></a>一个 promise 指定多个成功/失败回调函数, 都会调用吗?</h2><blockquote><p>当 promise <code>改变为对应状态时</code>都会调用,改变状态后,多个回调函数都会调用,并不会自动停止</p><pre><code>let p = new Promise((resolve, reject) =&gt; {  resolve('OK');});  ///指定回调 - 1  p.then(value =&gt; {  console.log(value); });  //指定回调 - 2  p.then(value =&gt; { alert(value);});</code></pre></blockquote><h2 id="改变-promise-状态和指定回调函数谁先谁后"><a href="#改变-promise-状态和指定回调函数谁先谁后" class="headerlink" title="改变 promise 状态和指定回调函数谁先谁后?"></a>改变 promise 状态和指定回调函数谁先谁后?</h2><blockquote><p>(1) 都有可能, 正常情况下是先指定回调再改变状态, 但也可以先改状态再指定回调</p><p> 先指定回调再改变状态(<code>异步</code>):先指定回调–&gt; 再改变状态 –&gt;改变状态后才进入异步队列执行回调函数</p><p> 先改状态再指定回调(<code>同步</code>):改变状态 –&gt;指定回调 <code>并马上执行</code>回调</p><p>(2) 如何先改状态再<code>指定</code>回调? –&gt;注意:指定并不是执行</p><p> ① 在执行器中直接调用 resolve()/reject() –&gt;即,不使用定时器等方法,执行器内直接同步操作</p><p> ② 延迟更长时间才调用 then() –&gt;即,在<code>.then()</code>这个方法外再包一层例如延时器这种方法</p><p>(3) 什么时候才能得到数据?</p><p> ① 如果先指定的回调, 那当状态发生改变时, 回调函数就会调用, 得到数据</p><p> ② 如果先改变的状态, 那当指定回调时, 回调函数就会调用, 得到数据</p><pre><code>let p = new Promise((resolve, reject) =&gt; {//异步写法,这样写会先指定回调,再改变状态setTimeout(() =&gt; {resolve('OK'); }, 1000);//这是同步写法,这样写会先改变状态,再指定回调resolve('OK'); });p.then(value =&gt; {console.log(value);}, reason =&gt; {})</code></pre><p>(4) 个人理解–结合源码</p><p> 源码中,promise的状态是通过一个<code>默认为padding</code>的变量进行判断,所以当你<code>resolve/reject</code>延时(异步导致当then加载时,状态还未修改)后,这时直接进行p.then()会发现,目前状态还是<code>进行中</code>,所以只是这样导致只有同步操作才能成功.</p><p> 所以promise将传入的<code>回调函数</code>拷贝到promise对象实例上,然后在<code>resolve/reject</code>的执行过程中再进行调用,达到异步的目的</p><p> 具体代码实现看下方自定义promise</p></blockquote><h2 id="promise-then-返回的新-promise-的结果状态由什么决定"><a href="#promise-then-返回的新-promise-的结果状态由什么决定" class="headerlink" title="promise.then()返回的新 promise 的结果状态由什么决定?"></a>promise.then()返回的新 promise 的结果状态由什么决定?</h2><blockquote><p>(1) 简单表达: 由 then()指定的回调函数执行的结果决定</p><p>(2) 详细表达:</p><p> ① 如果抛出异常, 新 promise 变为 rejected, reason 为抛出的异常</p><p> ② 如果返回的是非 promise 的任意值, 新 promise 变为 resolved, value 为返回的值</p><p> ③ 如果返回的是另一个新 promise, 此 promise 的结果就会成为新 promise 的结果</p><pre><code>let p = new Promise((resolve, reject) =&gt; {resolve('ok');});//执行 then 方法let result = p.then(value =&gt; {console.log(value);// 1. 抛出错误 ,变为 rejectedthrow '出了问题';// 2. 返回结果是非 Promise 类型的对象,新 promise 变为 resolvedreturn 521;// 3. 返回结果是 Promise 对象,此 promise 的结果就会成为新 promise 的结果return new Promise((resolve, reject) =&gt; {  // resolve('success');  reject('error');});}, reason =&gt; {console.warn(reason);});</code></pre></blockquote><h2 id="promise-如何串连多个操作任务"><a href="#promise-如何串连多个操作任务" class="headerlink" title="promise 如何串连多个操作任务?"></a>promise 如何串连多个操作任务?</h2><blockquote><p>(1) promise 的 then()返回一个新的 promise, 可以开成 then()的链式调用</p><p>(2) 通过 then 的链式调用串连多个同步/异步任务,这样就能用<code>then()</code>将多个同步或异步操作串联成一个同步队列</p><pre><code>&lt;script&gt;let p = new Promise((resolve, reject) =&gt; { setTimeout(() =&gt; {resolve('OK'); }, 1000); });p.then(value =&gt; {return new Promise((resolve, reject) =&gt; { resolve("success"); });}).then(value =&gt; {console.log(value);}).then(value =&gt; { console.log(value);})&lt;/script&gt;</code></pre></blockquote><h2 id="promise-异常传透"><a href="#promise-异常传透" class="headerlink" title="promise 异常传透?"></a>promise 异常传透?</h2><blockquote><ul><li>当使用 promise 的 then 链式调用时, 可以在最后指定失败的回调</li><li>前面任何操作出了异常, 都会传到最后失败的回调中处理</li></ul><pre><code>getJSON('./hong.json')   .then(function(posts) { throw new Error('抛出异常') })  .then(res=&gt;console.log(res),e=&gt;console.log('被then的错误回调捕获',e) )   .catch(function(error) {         // 处理 getJSON 和 前一个回调函数运行时发生的错误         console.log('错误捕获: ', error);  });//执行结果: 被then的错误回调捕获 Error: 抛出异常/******************** 利用异常穿透 ****************************************/getJSON('./hong.json')   .then(function(posts) { throw new Error('抛出异常') })  .then(res=&gt;console.log(res) ) //此处差异,不指定 reject 回调,利用异常穿透传到最后   .catch(function(error) {         console.log('错误捕获: ', error);  });//执行结果:  错误捕获:  Error: 抛出异常</code></pre><p>注:可以在每个then()的第二个回调函数中进行err处理,也可以利用异常穿透特性,到最后用<code>catch</code>去承接统一处理,两者一起用时,前者会生效(因为err已经将其处理,就不会再往下穿透)而走不到后面的catch<img src="image-20210927105504988.png" alt="image-20210927105504988"></p></blockquote><h2 id="中断-promise-链"><a href="#中断-promise-链" class="headerlink" title="中断 promise 链?"></a>中断 promise 链?</h2><blockquote><p>在<code>关键问题2</code>中,可以得知,当promise状态改变时,他的链式调用都会生效,那如果我们有这个一个实际需求:我们有5个then(),但其中有条件判断,如当我符合或者不符合第三个then条件时,要直接中断链式调用,不再走下面的then,该如何?</p><p>(1) 当使用 promise 的 then 链式调用时, 在中间中断, 不再调用后面的回调函数</p><p>(2) 办法: 在回调函数中返回一个 <code>pendding</code> 状态的<code>promise 对象</code></p><pre><code>&lt;script&gt;let p = new Promise((resolve, reject) =&gt; {setTimeout(() =&gt; { resolve('OK');}, 1000);});p.then(value =&gt; {return new Promise(() =&gt; {});})//有且只有这一个方式.then(value =&gt; { console.log(222);}).then(value =&gt; { console.log(333);}).catch(reason =&gt; {console.warn(reason);});&lt;/script&gt;</code></pre></blockquote><h1 id="一些静态方法"><a href="#一些静态方法" class="headerlink" title="一些静态方法"></a>一些静态方法</h1><h4 id="Promise-prototype-finally"><a href="#Promise-prototype-finally" class="headerlink" title="Promise.prototype.finally()"></a>Promise.prototype.finally()</h4><blockquote><p><code>finally()</code>方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 <code>ES2018</code> 引入标准的。</p><pre><code>promise.then(result =&gt; {···}).catch(error =&gt; {···}).finally(() =&gt; {···});</code></pre><p>上面代码中，不管<code>promise</code>最后的状态，在执行完<code>then</code>或<code>catch</code>指定的回调函数以后，都会执行<code>finally</code>方法指定的回调函数。</p><blockquote><ul><li><code>finally</code>方法的回调函数不接受任何参数，</li><li>这意味着没有办法知道，前面的 Promise 状态到底是<code>fulfilled</code>还是<code>rejected</code>。</li><li>这表明，<code>finally</code>方法里面的操作，应该是与状态无关的，不依赖于 Promise 的执行结果。</li></ul></blockquote></blockquote><h5 id="a-finally本质上是then方法的特例"><a href="#a-finally本质上是then方法的特例" class="headerlink" title="a) finally本质上是then方法的特例"></a>a) <code>finally</code>本质上是<code>then</code>方法的特例</h5><blockquote><pre><code>promise.finally(() =&gt; {});// 等同于promise.then(result =&gt;  result ,error =&gt;  throw error);</code></pre><p>上面代码中，如果不使用<code>finally</code>方法，同样的语句需要为成功和失败两种情况各写一次。有了<code>finally</code>方法，则只需要写一次。</p></blockquote><h5 id="b-它的实现"><a href="#b-它的实现" class="headerlink" title="b) 它的实现"></a>b) 它的实现</h5><blockquote><p>它的实现也很简单。</p><pre><code>Promise.prototype.finally = function (callback) {let P = this.constructor;return this.then(value  =&gt; P.resolve(callback()).then(() =&gt; value),reason =&gt; P.resolve(callback()).then(() =&gt; { throw reason }));};</code></pre><p>上面代码中，不管前面的 Promise 是<code>fulfilled</code>还是<code>rejected</code>，都会执行回调函数<code>callback</code>。</p><p>从上面的实现还可以看到，<code>finally</code>方法总是会返回原来的值(传入什么即传出什么)</p><pre><code>// resolve 的值是 undefinedPromise.resolve(2).then(() =&gt; {}, () =&gt; {})// resolve 的值是 2Promise.resolve(2).finally(() =&gt; {})// reject 的值是 undefinedPromise.reject(3).then(() =&gt; {}, () =&gt; {})// reject 的值是 3Promise.reject(3).finally(() =&gt; {})</code></pre></blockquote><h1 id="手写Promise"><a href="#手写Promise" class="headerlink" title="手写Promise"></a>手写Promise</h1><p>简单手写实现promise  (未添加catch与值穿透功能，这两个原理是添加函数默认值)</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Promise</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 添加属性</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">=</span> <span class="token string">'pending'</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token comment" spellcheck="true">// 声明一个保存回调的属性 解决异步执行</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token comment" spellcheck="true">// resolve 函数</span>  <span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断状态 确保状态修改后就不可以被修改</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>_this<span class="token punctuation">.</span>PromiseState <span class="token operator">!==</span> <span class="token string">'pending'</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 修改对象的状态 (promiseState)</span>    _this<span class="token punctuation">.</span>PromiseState <span class="token operator">=</span> <span class="token string">'fulfilled'</span>    <span class="token comment" spellcheck="true">// 设置对象值结果值(promiseResult)</span>    _this<span class="token punctuation">.</span>PromiseResult <span class="token operator">=</span> data    <span class="token comment" spellcheck="true">// 当异步时 状态还未改变, 将回调保存在自身属性中，状态改变时就触发保存的回调</span>    _this<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      res<span class="token punctuation">.</span><span class="token function">onResolved</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// reject函数</span>  <span class="token keyword">function</span> <span class="token function">reject</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断状态 确保状态修改后就不可以被修改</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>_this<span class="token punctuation">.</span>PromiseState <span class="token operator">!==</span> <span class="token string">'pending'</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 修改对象的状态 (promiseState)</span>    _this<span class="token punctuation">.</span>PromiseState <span class="token operator">=</span> <span class="token string">'reject'</span>    <span class="token comment" spellcheck="true">// 设置对象值结果值(promiseResult)</span>    _this<span class="token punctuation">.</span>PromiseResult <span class="token operator">=</span> data    <span class="token comment" spellcheck="true">// 当异步时 状态还未改变, 将回调保存在自身属性中，状态改变时就触发保存的回调</span>    _this<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      res<span class="token punctuation">.</span><span class="token function">onRejectd</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 同步调用执行器函数</span>    <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>Promise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>then <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>onResolved<span class="token punctuation">,</span> onRejectd<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">===</span> <span class="token string">'fulfilled'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取回调函数的返回结果</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">onResolved</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 判断</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 如果回调的结果是 Promise的 就再次调用</span>          result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token function">resolve</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 结果状态设置为成功</span>          <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">===</span> <span class="token string">'reject'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取回调函数的返回结果</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">onRejectd</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 判断</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 如果回调的结果是 Promise的 就再次调用</span>          result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token function">resolve</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 结果状态设置为成功</span>          <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 解决异步问题 保存一个回调 在状态改变时在 resolve reject 中触发</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">===</span> <span class="token string">'pending'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        onResolved<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">onResolved</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token function">resolve</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        onRejectd<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">onRejectd</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token function">resolve</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 手写Promise.resolve()</p><pre class="line-numbers language-js"><code class="language-js">Promise<span class="token punctuation">.</span>resolve <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token function">resolve</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> e<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 手写Promise.reject()</p><pre class="line-numbers language-js"><code class="language-js">Promise<span class="token punctuation">.</span>resolve <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token function">reject</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>手写Promise.all</p><pre class="line-numbers language-js"><code class="language-js">Promise<span class="token punctuation">.</span>all <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 计数器</span>        <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 存储成功的promise返回值</span>        <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 循环遍历all传递的promise数组</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> v                <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">===</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>手写 race 方法</p><pre class="line-numbers language-js"><code class="language-js">Promise<span class="token punctuation">.</span>race <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 循环遍历all传递的promise数组</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="class写法"><a href="#class写法" class="headerlink" title="class写法"></a>class写法</h1><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//构造方法</span> <span class="token function">constructor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//添加属性</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">=</span> <span class="token string">'pending'</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//声明属性</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//保存实例对象的 this 的值</span>   <span class="token comment" spellcheck="true">//resolve 函数</span>   <span class="token keyword">let</span> resolve <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//判断状态</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">!==</span> <span class="token string">'pending'</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//1. 修改对象的状态 (promiseState)</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">=</span> <span class="token string">'fulfilled'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// resolved</span>     <span class="token comment" spellcheck="true">//2. 设置对象结果值 (promiseResult)</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult <span class="token operator">=</span> data<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//调用成功的回调函数</span>     <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>         item<span class="token punctuation">.</span><span class="token function">onResolved</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//reject 函数</span>   <span class="token keyword">let</span> reject <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//判断状态</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">!==</span> <span class="token string">'pending'</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//1. 修改对象的状态 (promiseState)</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">=</span> <span class="token string">'rejected'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// </span>     <span class="token comment" spellcheck="true">//2. 设置对象结果值 (promiseResult)</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult <span class="token operator">=</span> data<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//执行失败的回调</span>     <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>         item<span class="token punctuation">.</span><span class="token function">onRejected</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//同步调用『执行器函数』</span>     <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//修改 promise 对象状态为『失败』</span>     <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//then 方法封装</span> <span class="token function">then</span><span class="token punctuation">(</span>onResolved<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//判断回调函数参数</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> onRejected <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     onRejected <span class="token operator">=</span> reason <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>       <span class="token keyword">throw</span> reason<span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> onResolved <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     onResolved <span class="token operator">=</span> value <span class="token operator">=</span><span class="token operator">></span> value<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//value => { return value};</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//封装函数</span>     <span class="token keyword">let</span> callback <span class="token operator">=</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//获取回调函数的执行结果</span>         <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//判断</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//如果是 Promise 类型的对象</span>           result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>             <span class="token function">resolve</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token punctuation">,</span> r <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>             <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token punctuation">)</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//结果的对象状态为『成功』</span>           <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>       <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//调用回调函数  PromiseState</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">===</span> <span class="token string">'fulfilled'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token function">callback</span><span class="token punctuation">(</span>onResolved<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">===</span> <span class="token string">'rejected'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token function">callback</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//判断 pending 状态</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">===</span> <span class="token string">'pending'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//保存回调函数</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>         onResolved<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token function">callback</span><span class="token punctuation">(</span>onResolved<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">,</span>         onRejected<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token function">callback</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//catch 方法</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>undefined<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//添加 resolve 方法</span> <span class="token keyword">static</span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//返回promise对象</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token function">resolve</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span> r <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//状态设置为成功</span>       <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//添加 reject 方法</span> <span class="token keyword">static</span> <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//添加 all 方法</span> <span class="token keyword">static</span> <span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//返回结果为promise对象</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//声明变量</span>     <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//遍历</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//</span>       promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//得知对象的状态是成功</span>         <span class="token comment" spellcheck="true">//每个promise对象 都成功</span>         count<span class="token operator">++</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//将当前promise对象成功的结果 存入到数组中</span>         arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//判断</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//修改状态</span>           <span class="token function">resolve</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span> r <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//添加 race 方法</span> <span class="token keyword">static</span> <span class="token function">race</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//修改返回对象的状态为 『成功』</span>         <span class="token function">resolve</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span> r <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//修改返回对象的状态为 『失败』</span>         <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="async-await"><a href="#async-await" class="headerlink" title="async await"></a>async await</h1><blockquote><h5 id="1-Promise-gt-异步"><a href="#1-Promise-gt-异步" class="headerlink" title="1)Promise==>异步"></a>1)Promise==&gt;异步</h5><h5 id="2-await-gt-异步转同步"><a href="#2-await-gt-异步转同步" class="headerlink" title="2)await==>异步转同步"></a>2)await==&gt;异步转同步</h5><ol><li>await 可以理解为是 async wait 的简写。await 必须出现在 async 函数内部，不能单独使用。</li><li>await 后面可以跟任何的JS 表达式。虽然说 await 可以等很多类型的东西，但是它最主要的意图是用来等待 Promise 对象的状态被 resolved。如果await的是 promise对象会造成异步函数停止执行并且等待 promise 的解决,如果等的是正常的表达式则立即执行</li></ol><h5 id="3-async-gt-同步转异步"><a href="#3-async-gt-同步转异步" class="headerlink" title="3)async==>同步转异步"></a>3)async==&gt;同步转异步</h5><ol><li>方法体内部的某个表达式使用await修饰，那么这个方法体所属方法必须要用async修饰所以使用awit方法会自动升级为异步方法</li></ol><h6 id="4-mdn文档"><a href="#4-mdn文档" class="headerlink" title="4)mdn文档"></a>4)mdn文档</h6><ol><li><a href="https://gitee.com/link?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function">async</a></li><li><a href="https://gitee.com/link?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/await">await</a></li></ol></blockquote><h2 id="async函数"><a href="#async函数" class="headerlink" title="async函数"></a>async函数</h2><blockquote><ol><li>函数的返回值为 promise 对象</li><li>promise 对象的结果由 async 函数执行的返回值决定</li></ol></blockquote><h2 id="await表达式"><a href="#await表达式" class="headerlink" title="await表达式"></a>await表达式</h2><blockquote><ol><li>await 右侧的表达式一般为 promise 对象, 但也可以是其它的值</li><li>如果表达式是 promise 对象, await 返回的是 promise 成功的值</li><li>如果表达式是其它值, 直接将此值作为 await 的返回值</li></ol></blockquote><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><blockquote><ol><li>await 必须写在 async 函数中, 但 async 函数中可以没有 await</li><li>如果 await 的 promise 失败了, 就会抛出异常, 需要通过 try…catch 捕获处理</li></ol></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3源码初探</title>
      <link href="/2022/02/24/vue3%E6%BA%90%E7%A0%81%E5%88%9D%E6%8E%A2/"/>
      <url>/2022/02/24/vue3%E6%BA%90%E7%A0%81%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h1><h2 id="1、克隆项目"><a href="#1、克隆项目" class="headerlink" title="1、克隆项目"></a>1、克隆项目</h2><pre><code>git clone git@github.com:vuejs/core.git</code></pre><h2 id="2、在v3中-包管理工具为-pnpm"><a href="#2、在v3中-包管理工具为-pnpm" class="headerlink" title="2、在v3中 包管理工具为 pnpm"></a>2、在v3中 包管理工具为 pnpm</h2><pre><code>全局安装 pnpmnpm i pnpm -g</code></pre><h2 id="3、-克隆成功后安装依赖"><a href="#3、-克隆成功后安装依赖" class="headerlink" title="3、 克隆成功后安装依赖"></a>3、 克隆成功后安装依赖</h2><p>在安装依赖前 建议把 <code>package.json</code>中的puppeteer去除 提高安装依赖速度</p><pre><code>pnpm install</code></pre><h2 id="4、-配置脚本"><a href="#4、-配置脚本" class="headerlink" title="4、 配置脚本"></a>4、 配置脚本</h2><p>在 <code>package.json</code>中 dev命令中添加 –sourcemap</p><p><code>Source map就是一个信息文件，里面储存着位置信息。也就是说，转换后的代码的每一个位置，所对应的转换前的位置,有了它，出错的时候，除错工具将直接显示原始代码，而不是转换后的代码。这无疑给开发者带来了很大方便</code></p><pre><code>"dev": "node scripts/dev.js --sourcemap"</code></pre><h2 id="5、打包"><a href="#5、打包" class="headerlink" title="5、打包"></a>5、打包</h2><p>打包后就可停止服务，无需监听更改（主要是看源码）</p><pre><code>pnpm run dev</code></pre><h2 id="6、源码位置在packages-vue-dist下"><a href="#6、源码位置在packages-vue-dist下" class="headerlink" title="6、源码位置在packages/vue/dist下"></a>6、源码位置在<code>packages/vue/dist</code>下</h2><h2 id="7、-测试运行createApp"><a href="#7、-测试运行createApp" class="headerlink" title="7、 测试运行createApp"></a>7、 测试运行createApp</h2><p>​    ==测试==是否可以成功运行。 </p><p>​        运行<code>packages/vue/examples/composition/todomvc.html</code></p><p>​    ==寻找入口文件==运行后打开控制台</p><pre><code>// 找到 createApp 代码 在93行// 打上断点 找到进入的第一个函数// 右键函数名reveal in sidebar 找到对应的入口文件 </code></pre><h1 id="二、-基本认知"><a href="#二、-基本认知" class="headerlink" title="二、 基本认知"></a>二、 基本认知</h1><h2 id="1、项目整体结构"><a href="#1、项目整体结构" class="headerlink" title="1、项目整体结构"></a>1、项目整体结构</h2><pre><code>runtime-domcompiler-domreactivity</code></pre><h2 id="2、初始化流程"><a href="#2、初始化流程" class="headerlink" title="2、初始化流程"></a>2、初始化流程</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 前端爬楼梯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3新特性总结</title>
      <link href="/2022/02/10/vue3%E6%96%B0%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93/"/>
      <url>/2022/02/10/vue3%E6%96%B0%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3新特性"><a href="#Vue3新特性" class="headerlink" title="Vue3新特性"></a>Vue3新特性</h1><p>==尚硅谷课件==</p><h2 id="1-Vue3简介"><a href="#1-Vue3简介" class="headerlink" title="1.Vue3简介"></a>1.Vue3简介</h2><ul><li>2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）</li><li>耗时2年多、<a href="https://github.com/vuejs/vue-next/graphs/commit-activity">2600+次提交</a>、<a href="https://github.com/vuejs/rfcs/tree/master/active-rfcs">30+个RFC</a>、<a href="https://github.com/vuejs/vue-next/pulls?q=is:pr+is:merged+-author:app/dependabot-preview+">600+次PR</a>、<a href="https://github.com/vuejs/vue-next/graphs/contributors">99位贡献者</a> </li><li>github上的tags地址：<a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></li></ul><h2 id="2-Vue3带来了什么"><a href="#2-Vue3带来了什么" class="headerlink" title="2.Vue3带来了什么"></a>2.Vue3带来了什么</h2><h3 id="1-性能的提升"><a href="#1-性能的提升" class="headerlink" title="1.性能的提升"></a>1.性能的提升</h3><ul><li><p>打包大小减少41%</p></li><li><p>初次渲染快55%, 更新渲染快133%</p></li><li><p>内存减少54%</p><p>……</p></li></ul><h3 id="2-源码的升级"><a href="#2-源码的升级" class="headerlink" title="2.源码的升级"></a>2.源码的升级</h3><ul><li><p>使用Proxy代替defineProperty实现响应式</p></li><li><p>重写虚拟DOM的实现和Tree-Shaking</p><p>……</p></li></ul><h3 id="3-拥抱TypeScript"><a href="#3-拥抱TypeScript" class="headerlink" title="3.拥抱TypeScript"></a>3.拥抱TypeScript</h3><ul><li>Vue3可以更好的支持TypeScript</li></ul><h3 id="4-新的特性"><a href="#4-新的特性" class="headerlink" title="4.新的特性"></a>4.新的特性</h3><ol><li><p>Composition API（组合API）</p><ul><li>setup配置</li><li>ref与reactive</li><li>watch与watchEffect</li><li>provide与inject</li><li>……</li></ul></li><li><p>新的内置组件</p><ul><li>Fragment </li><li>Teleport</li><li>Suspense</li></ul></li><li><p>其他改变</p><ul><li>新的生命周期钩子</li><li>data 选项应始终被声明为一个函数</li><li>移除keyCode支持作为 v-on 的修饰符</li><li>……</li></ul></li></ol><h1 id="一、创建Vue3-0工程"><a href="#一、创建Vue3-0工程" class="headerlink" title="一、创建Vue3.0工程"></a>一、创建Vue3.0工程</h1><h2 id="1-使用-vue-cli-创建"><a href="#1-使用-vue-cli-创建" class="headerlink" title="1.使用 vue-cli 创建"></a>1.使用 vue-cli 创建</h2><p>官方文档：<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span>vue --version<span class="token comment" spellcheck="true">## 安装或者升级你的@vue/cli</span><span class="token function">npm</span> <span class="token function">install</span> -g @vue/cli<span class="token comment" spellcheck="true">## 创建</span>vue create vue_test<span class="token comment" spellcheck="true">## 启动</span><span class="token function">cd</span> vue_test<span class="token function">npm</span> run serve<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-使用-vite-创建"><a href="#2-使用-vite-创建" class="headerlink" title="2.使用 vite 创建"></a>2.使用 vite 创建</h2><p>官方文档：<a href="https://v3.cn.vuejs.org/guide/installation.html#vite">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p><p>vite官网：<a href="https://vitejs.cn/">https://vitejs.cn</a></p><ul><li>什么是vite？—— 新一代前端构建工具。</li><li>优势如下：<ul><li>开发环境中，无需打包操作，可快速的冷启动。</li><li>轻量快速的热重载（HMR）。</li><li>真正的按需编译，不再等待整个应用编译完成。</li></ul></li><li>传统构建 与 vite构建对比图</li></ul><p><img src="https://cn.vitejs.dev/assets/bundler.37740380.png" style="width:500px;height:280px;float:left"><img src="https://cn.vitejs.dev/assets/esm.3070012d.png" style="width:480px;height:280px"></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## 创建工程</span><span class="token function">npm</span> init vite-app <span class="token operator">&lt;</span>project-name<span class="token operator">></span><span class="token comment" spellcheck="true">## 进入工程目录</span><span class="token function">cd</span> <span class="token operator">&lt;</span>project-name<span class="token operator">></span><span class="token comment" spellcheck="true">## 安装依赖</span><span class="token function">npm</span> <span class="token function">install</span><span class="token comment" spellcheck="true">## 运行</span><span class="token function">npm</span> run dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、常用-Composition-API"><a href="#二、常用-Composition-API" class="headerlink" title="二、常用 Composition API"></a>二、常用 Composition API</h1><p>官方文档: <a href="https://v3.cn.vuejs.org/guide/composition-api-introduction.html">https://v3.cn.vuejs.org/guide/composition-api-introduction.html</a></p><h2 id="1-拉开序幕的setup"><a href="#1-拉开序幕的setup" class="headerlink" title="1.拉开序幕的setup"></a>1.拉开序幕的setup</h2><ol><li>理解：Vue3.0中一个新的配置项，值为一个函数。</li><li>setup是所有<strong style="color:#DD5145">Composition API（组合API）</strong><i style="color:gray;font-weight:bold">“ 表演的舞台 ”</i>。</li><li>组件中所用到的：数据、方法等等，均要配置在setup中。</li><li>setup函数的两种返回值：<ol><li>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</li><li><span style="color:#aad">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span></li></ol></li><li>注意点：<ol><li>尽量不要与Vue2.x配置混用<ul><li>Vue2.x配置（data、methos、computed…）中<strong style="color:#DD5145">可以访问到</strong>setup中的属性、方法。</li><li>但在setup中<strong style="color:#DD5145">不能访问到</strong>Vue2.x配置（data、methos、computed…）。</li><li>如果有重名, setup优先。</li></ul></li><li>setup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）</li></ol></li></ol><h2 id="2-ref函数"><a href="#2-ref函数" class="headerlink" title="2.ref函数"></a>2.ref函数</h2><ul><li>作用: 定义一个响应式的数据</li><li>语法: <code>const xxx = ref(initValue)</code> <ul><li>创建一个包含响应式数据的<strong style="color:#DD5145">引用对象（reference对象，简称ref对象）</strong>。</li><li>JS中操作数据： <code>xxx.value</code></li><li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;{{xxx}}&lt;/div&gt;</code></li></ul></li><li>备注：<ul><li>接收的数据可以是：基本类型、也可以是对象类型。</li><li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li><li>对象类型的数据：内部 <i style="color:gray;font-weight:bold">“ 求助 ”</i> 了Vue3.0中的一个新函数—— <code>reactive</code>函数。</li></ul></li></ul><h2 id="3-reactive函数"><a href="#3-reactive函数" class="headerlink" title="3.reactive函数"></a>3.reactive函数</h2><ul><li>作用: 定义一个<strong style="color:#DD5145">对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</li><li>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong style="color:#DD5145">代理对象（Proxy的实例对象，简称proxy对象）</strong></li><li>reactive定义的响应式数据是“深层次的”。</li><li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li></ul><h2 id="4-Vue3-0中的响应式原理"><a href="#4-Vue3-0中的响应式原理" class="headerlink" title="4.Vue3.0中的响应式原理"></a>4.Vue3.0中的响应式原理</h2><h3 id="vue2-x的响应式"><a href="#vue2-x的响应式" class="headerlink" title="vue2.x的响应式"></a>vue2.x的响应式</h3><ul><li><p>实现原理：</p><ul><li><p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</p></li><li><p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p><pre class="line-numbers language-js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>存在问题：</p><ul><li>新增属性、删除属性, 界面不会更新。</li><li>直接通过下标修改数组, 界面不会自动更新。</li></ul></li></ul><h3 id="Vue3-0的响应式"><a href="#Vue3-0的响应式" class="headerlink" title="Vue3.0的响应式"></a>Vue3.0的响应式</h3><ul><li><p>实现原理: </p><ul><li><p>通过Proxy（代理）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</p></li><li><p>通过Reflect（反射）:  对源对象的属性进行操作。</p></li><li><p>MDN文档中描述的Proxy与Reflect：</p><ul><li><p>Proxy：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p></li><li><p>Reflect：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 拦截读取属性值</span>    <span class="token keyword">get</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 拦截设置属性值或添加新属性</span>    <span class="token keyword">set</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 拦截删除属性</span>    deleteProperty <span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>proxy<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'tom'</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul><h2 id="5-reactive对比ref"><a href="#5-reactive对比ref" class="headerlink" title="5.reactive对比ref"></a>5.reactive对比ref</h2><ul><li>从定义数据角度对比：<ul><li> ref用来定义：<strong style="color:#DD5145">基本类型数据</strong>。</li><li> reactive用来定义：<strong style="color:#DD5145">对象（或数组）类型数据</strong>。</li><li> 备注：ref也可以用来定义<strong style="color:#DD5145">对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong style="color:#DD5145">代理对象</strong>。</li></ul></li><li>从原理角度对比：<ul><li> ref通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li><li> reactive通过使用<strong style="color:#DD5145">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style="color:#DD5145">Reflect</strong>操作<strong style="color:orange">源对象</strong>内部的数据。</li></ul></li><li>从使用角度对比：<ul><li> ref定义的数据：操作数据<strong style="color:#DD5145">需要</strong><code>.value</code>，读取数据时模板中直接读取<strong style="color:#DD5145">不需要</strong><code>.value</code>。</li><li> reactive定义的数据：操作数据与读取数据：<strong style="color:#DD5145">均不需要</strong><code>.value</code>。</li></ul></li></ul><h2 id="6-setup的两个注意点"><a href="#6-setup的两个注意点" class="headerlink" title="6.setup的两个注意点"></a>6.setup的两个注意点</h2><ul><li><p>setup执行的时机</p><ul><li>在beforeCreate之前执行一次，this是undefined。</li></ul></li><li><p>setup的参数</p><ul><li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li><li>context：上下文对象<ul><li>attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 <code>this.$attrs</code>。</li><li>slots: 收到的插槽内容, 相当于 <code>this.$slots</code>。</li><li>emit: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。</li></ul></li></ul></li></ul><h2 id="7-计算属性与监视"><a href="#7-计算属性与监视" class="headerlink" title="7.计算属性与监视"></a>7.计算属性与监视</h2><h3 id="1-computed函数"><a href="#1-computed函数" class="headerlink" title="1.computed函数"></a>1.computed函数</h3><ul><li><p>与Vue2.x中computed配置功能一致</p></li><li><p>写法</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>computed<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">...</span>    <span class="token comment" spellcheck="true">//计算属性——简写</span>    <span class="token keyword">let</span> fullName <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">return</span> person<span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> person<span class="token punctuation">.</span>lastName    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//计算属性——完整</span>    <span class="token keyword">let</span> fullName <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> person<span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> person<span class="token punctuation">.</span>lastName        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">const</span> nameArr <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span>            person<span class="token punctuation">.</span>firstName <span class="token operator">=</span> nameArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            person<span class="token punctuation">.</span>lastName <span class="token operator">=</span> nameArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-watch函数"><a href="#2-watch函数" class="headerlink" title="2.watch函数"></a>2.watch函数</h3><ul><li><p>与Vue2.x中watch配置功能一致</p></li><li><p>两个小“坑”：</p><ul><li>监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。</li><li>监视reactive定义的响应式数据中某个属性时：deep配置有效。</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//情况一：监视ref定义的响应式数据</span><span class="token function">watch</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sum变化了'</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>immediate<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//情况二：监视多个ref定义的响应式数据</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span>sum<span class="token punctuation">,</span>msg<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sum或msg变化了'</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* 情况三：监视reactive定义的响应式数据            若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！            若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 */</span><span class="token function">watch</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'person变化了'</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>immediate<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>deep<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//此处的deep配置不再奏效</span><span class="token comment" spellcheck="true">//情况四：监视reactive定义的响应式数据中的某个属性</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>person<span class="token punctuation">.</span>job<span class="token punctuation">,</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'person的job变化了'</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>immediate<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>deep<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//情况五：监视reactive定义的响应式数据中的某些属性</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>person<span class="token punctuation">.</span>job<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>person<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'person的job变化了'</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>immediate<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>deep<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//特殊情况</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>person<span class="token punctuation">.</span>job<span class="token punctuation">,</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'person的job变化了'</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>deep<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-watchEffect函数"><a href="#3-watchEffect函数" class="headerlink" title="3.watchEffect函数"></a>3.watchEffect函数</h3><ul><li><p>watch的套路是：既要指明监视的属性，也要指明监视的回调。</p></li><li><p>watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</p></li><li><p>watchEffect有点像computed：</p><ul><li>但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li><li>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span><span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">const</span> x1 <span class="token operator">=</span> sum<span class="token punctuation">.</span>value    <span class="token keyword">const</span> x2 <span class="token operator">=</span> person<span class="token punctuation">.</span>age    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'watchEffect配置的回调执行了'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="8-生命周期"><a href="#8-生命周期" class="headerlink" title="8.生命周期"></a>8.生命周期</h2><div style="border:1px solid black;width:380px;float:left;margin-right:20px;"><strong>vue2.x的生命周期</strong><img src="https://cn.vuejs.org/images/lifecycle.png" alt="lifecycle_2" style="zoom:33%;width:1200px"></div><div style="border:1px solid black;width:510px;height:985px;float:left"><strong>vue3.0的生命周期</strong><img src="https://v3.cn.vuejs.org/images/lifecycle.svg" alt="lifecycle_2" style="zoom:33%;width:2500px"></div><p>1</p><ul><li>Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：<ul><li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li><li><code>destroyed</code>改名为 <code>unmounted</code></li></ul></li><li>Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：<ul><li><code>beforeCreate</code>===&gt;<code>setup()</code></li><li><code>created</code>=======&gt;<code>setup()</code></li><li><code>beforeMount</code> ===&gt;<code>onBeforeMount</code></li><li><code>mounted</code>=======&gt;<code>onMounted</code></li><li><code>beforeUpdate</code>===&gt;<code>onBeforeUpdate</code></li><li><code>updated</code> =======&gt;<code>onUpdated</code></li><li><code>beforeUnmount</code>&nbsp;==&gt;<code>onBeforeUnmount</code></li><li><code>unmounted</code> =====&gt;<code>onUnmounted</code></li></ul></li></ul><h2 id="9-自定义hook函数"><a href="#9-自定义hook函数" class="headerlink" title="9.自定义hook函数"></a>9.自定义hook函数</h2><ul><li><p>什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。</p></li><li><p>类似于vue2.x中的mixin。</p></li><li><p>自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。</p></li></ul><h2 id="10-toRef"><a href="#10-toRef" class="headerlink" title="10.toRef"></a>10.toRef</h2><ul><li>作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。</li><li>语法：<code>const name = toRef(person,'name')</code></li><li>应用:   要将响应式对象中的某个属性单独提供给外部使用时。</li></ul><ul><li>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></li></ul><h1 id="三、其它-Composition-API"><a href="#三、其它-Composition-API" class="headerlink" title="三、其它 Composition API"></a>三、其它 Composition API</h1><h2 id="1-shallowReactive-与-shallowRef"><a href="#1-shallowReactive-与-shallowRef" class="headerlink" title="1.shallowReactive 与 shallowRef"></a>1.shallowReactive 与 shallowRef</h2><ul><li><p>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</p></li><li><p>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p></li><li><p>什么时候使用?</p><ul><li> 如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive。</li><li> 如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===&gt; shallowRef。</li></ul></li></ul><h2 id="2-readonly-与-shallowReadonly"><a href="#2-readonly-与-shallowReadonly" class="headerlink" title="2.readonly 与 shallowReadonly"></a>2.readonly 与 shallowReadonly</h2><ul><li>readonly: 让一个响应式数据变为只读的（深只读）。</li><li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li><li>应用场景: 不希望数据被修改时。</li></ul><h2 id="3-toRaw-与-markRaw"><a href="#3-toRaw-与-markRaw" class="headerlink" title="3.toRaw 与 markRaw"></a>3.toRaw 与 markRaw</h2><ul><li>toRaw：<ul><li>作用：将一个由<code>reactive</code>生成的<strong style="color:orange">响应式对象</strong>转为<strong style="color:orange">普通对象</strong>。</li><li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li></ul></li><li>markRaw：<ul><li>作用：标记一个对象，使其永远不会再成为响应式对象。</li><li>应用场景:<ol><li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li><li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li></ol></li></ul></li></ul><h2 id="4-customRef"><a href="#4-customRef" class="headerlink" title="4.customRef"></a>4.customRef</h2><ul><li><p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p></li><li><p>实现防抖效果：</p><pre class="line-numbers language-vue"><code class="language-vue"><template>    <input type="text" v-model="keyword">    <h3>{{keyword}}</h3></template><script>    import {ref,customRef} from 'vue'    export default {        name:'Demo',        setup(){            // let keyword = ref('hello') //使用Vue准备好的内置ref            //自定义一个myRef            function myRef(value,delay){                let timer                //通过customRef去实现自定义                return customRef((track,trigger)=>{                    return{                        get(){                            track() //告诉Vue这个value值是需要被“追踪”的                            return value                        },                        set(newValue){                            clearTimeout(timer)                            timer = setTimeout(()=>{                                value = newValue                                trigger() //告诉Vue去更新界面                            },delay)                        }                    }                })            }            let keyword = myRef('hello',500) //使用程序员自定义的ref            return {                keyword            }        }    }</script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="5-provide-与-inject"><a href="#5-provide-与-inject" class="headerlink" title="5.provide 与 inject"></a>5.provide 与 inject</h2><img src="https://v3.cn.vuejs.org/images/components_provide.png" style="width:300px"><ul><li><p>作用：实现<strong style="color:#DD5145">祖与后代组件间</strong>通信</p></li><li><p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p></li><li><p>具体写法：</p><ol><li><p>祖组件中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token operator">...</span>    <span class="token keyword">let</span> car <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'奔驰'</span><span class="token punctuation">,</span>price<span class="token punctuation">:</span><span class="token string">'40万'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">'car'</span><span class="token punctuation">,</span>car<span class="token punctuation">)</span>    <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>后代组件中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span>context<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token operator">...</span>    <span class="token keyword">const</span> car <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">'car'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>car<span class="token punctuation">}</span>    <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ul><h2 id="6-响应式数据的判断"><a href="#6-响应式数据的判断" class="headerlink" title="6.响应式数据的判断"></a>6.响应式数据的判断</h2><ul><li>isRef: 检查一个值是否为一个 ref 对象</li><li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li><li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li><li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li></ul><h1 id="四、Composition-API-的优势"><a href="#四、Composition-API-的优势" class="headerlink" title="四、Composition API 的优势"></a>四、Composition API 的优势</h1><h2 id="1-Options-API-存在的问题"><a href="#1-Options-API-存在的问题" class="headerlink" title="1.Options API 存在的问题"></a>1.Options API 存在的问题</h2><p>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。</p><div style="width:600px;height:370px;overflow:hidden;float:left">    <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f84e4e2c02424d9a99862ade0a2e4114~tplv-k3u1fbpfcp-watermark.image" style="width:600px;float:left"></div><div style="width:300px;height:370px;overflow:hidden;float:left">    <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5ac7e20d1784887a826f6360768a368~tplv-k3u1fbpfcp-watermark.image" style="zoom:50%;width:560px;left"> </div><h2 id="2-Composition-API-的优势"><a href="#2-Composition-API-的优势" class="headerlink" title="2.Composition API 的优势"></a>2.Composition API 的优势</h2><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p><div style="width:500px;height:340px;overflow:hidden;float:left">    <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc0be8211fc54b6c941c036791ba4efe~tplv-k3u1fbpfcp-watermark.image" style="height:360px"></div><div style="width:430px;height:340px;overflow:hidden;float:left">    <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cc55165c0e34069a75fe36f8712eb80~tplv-k3u1fbpfcp-watermark.image" style="height:360px"></div><h1 id="五、新的组件"><a href="#五、新的组件" class="headerlink" title="五、新的组件"></a>五、新的组件</h1><h2 id="1-Fragment"><a href="#1-Fragment" class="headerlink" title="1.Fragment"></a>1.Fragment</h2><ul><li>在Vue2中: 组件必须有一个根标签</li><li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li><li>好处: 减少标签层级, 减小内存占用</li></ul><h2 id="2-Teleport"><a href="#2-Teleport" class="headerlink" title="2.Teleport"></a>2.Teleport</h2><ul><li><p>什么是Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong style="color:#DD5145">组件html结构</strong>移动到指定位置的技术。</p><pre class="line-numbers language-vue"><code class="language-vue"><teleport to="移动位置">    <div v-if="isShow" class="mask">        <div class="dialog">            <h3>我是一个弹窗</h3>            <button @click="isShow = false">关闭弹窗</button>        </div>    </div></teleport><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-Suspense"><a href="#3-Suspense" class="headerlink" title="3.Suspense"></a>3.Suspense</h2><ul><li><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p></li><li><p>使用步骤：</p><ul><li><p>异步引入组件</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>defineAsyncComponent<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./components/Child.vue'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></p><pre class="line-numbers language-vue"><code class="language-vue"><template>    <div class="app">        <h3>我是App组件</h3>        <Suspense>            <template v-slot:default>                <Child/>            </template>            <template v-slot:fallback>                <h3>加载中.....</h3>            </template>        </Suspense>    </div></template><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h1 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h1><h2 id="1-全局API的转移"><a href="#1-全局API的转移" class="headerlink" title="1.全局API的转移"></a>1.全局API的转移</h2><ul><li><p>Vue 2.x 有许多全局 API 和配置。</p><ul><li><p>例如：注册全局组件、注册全局指令等。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//注册全局组件</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'MyButton'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>    count<span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;button @click="count++">Clicked {{ count }} times.&lt;/button>'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//注册全局指令</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'focus'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  inserted<span class="token punctuation">:</span> el <span class="token operator">=</span><span class="token operator">></span> el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>Vue3.0中对这些API做出了调整：</p><ul><li><p>将全局的API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上</p><table><thead><tr><th>2.x 全局 API（<code>Vue</code>）</th><th>3.x 实例 API (<code>app</code>)</th></tr></thead><tbody><tr><td>Vue.config.xxxx</td><td>app.config.xxxx</td></tr><tr><td>Vue.config.productionTip</td><td><strong style="color:#DD5145">移除</strong></td></tr><tr><td>Vue.component</td><td>app.component</td></tr><tr><td>Vue.directive</td><td>app.directive</td></tr><tr><td>Vue.mixin</td><td>app.mixin</td></tr><tr><td>Vue.use</td><td>app.use</td></tr><tr><td>Vue.prototype</td><td>app.config.globalProperties</td></tr></tbody></table></li></ul></li></ul><h2 id="2-其他改变"><a href="#2-其他改变" class="headerlink" title="2.其他改变"></a>2.其他改变</h2><ul><li><p>data选项应始终被声明为一个函数。</p></li><li><p>过度类名的更改：</p><ul><li><p>Vue2.x写法</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.v-enter</span>,<span class="token class">.v-leave-to</span> </span><span class="token punctuation">{</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.v-leave</span>,<span class="token class">.v-enter-to</span> </span><span class="token punctuation">{</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Vue3.x写法</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.v-enter-from</span>,<span class="token class">.v-leave-to</span> </span><span class="token punctuation">{</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.v-leave-from</span>,<span class="token class">.v-enter-to</span> </span><span class="token punctuation">{</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>keyCode作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></p></li><li><p><strong style="color:#DD5145">移除</strong><code>v-on.native</code>修饰符</p><ul><li><p>父组件中绑定事件</p><pre class="line-numbers language-vue"><code class="language-vue"><my-component  v-on:close="handleComponentEvent"  v-on:click="handleNativeClickEvent"/><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>子组件中声明自定义事件</p><pre class="line-numbers language-vue"><code class="language-vue"><script>  export default {    emits: ['close']  }</script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>过滤器（filter）</p><blockquote><p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p></blockquote></li><li><p>……</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2按需引入element踩坑</title>
      <link href="/2022/02/06/vue2%E6%8C%89%E9%9C%80%E5%BC%95%E5%85%A5element%E8%B8%A9%E5%9D%91/"/>
      <url>/2022/02/06/vue2%E6%8C%89%E9%9C%80%E5%BC%95%E5%85%A5element%E8%B8%A9%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h1 id="按需引入"><a href="#按需引入" class="headerlink" title="按需引入"></a>按需引入</h1><p>借助 <a href="https://github.com/QingWei-Li/babel-plugin-component">babel-plugin-component</a>，我们可以只引入需要的组件，以达到减小项目体积的目的。</p><p>安装</p><pre class="line-numbers language-js"><code class="language-js">npm install babel<span class="token operator">-</span>plugin<span class="token operator">-</span>component <span class="token operator">-</span>D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置文件 （官方文档中 .babelrc 在新版vue中 为 babel.config.js）</p><p>​        官方文档中配置为下(会出现问题)</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"presets"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"es2015"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">"modules"</span><span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span>      <span class="token string">"component"</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token string">"libraryName"</span><span class="token punctuation">:</span> <span class="token string">"element-ui"</span><span class="token punctuation">,</span>        <span class="token string">"styleLibraryName"</span><span class="token punctuation">:</span> <span class="token string">"theme-chalk"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>踩坑解决（component包更新了配置，但官方文档并未更新）</p><p>​        解决， 在 <code>babel.config.js</code></p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  presets<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">'@vue/cli-plugin-babel/preset'</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">"modules"</span><span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span>      <span class="token string">"component"</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token string">"libraryName"</span><span class="token punctuation">:</span> <span class="token string">"element-ui"</span><span class="token punctuation">,</span>        <span class="token string">"styleLibraryName"</span><span class="token punctuation">:</span> <span class="token string">"theme-chalk"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main.js</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Button<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>Button<span class="token punctuation">.</span>name<span class="token punctuation">,</span> Button<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 避坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vite如何创建vue项目</title>
      <link href="/2022/02/01/vite%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/"/>
      <url>/2022/02/01/vite%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="vite创建项目"><a href="#vite创建项目" class="headerlink" title="vite创建项目"></a>vite创建项目</h1><p>1、npm版本大于6  node版本大于12</p><p>创建步骤   ==vite创建的项目端口号为 3000==</p><pre class="line-numbers language-ABAP"><code class="language-ABAP">1、npm init vite2、选择yes 下载3、起一个名字回车4、选择要使用的框架 使用的是vue5、这样创建完成了6、跳转到对应的项目目录7、npm install 下载对应的依赖8、npm run dev 启动项目<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="vite引入router"><a href="#vite引入router" class="headerlink" title="vite引入router"></a>vite引入router</h1><pre><code>npm install vue-router@next --save // 安装最新版</code></pre><p>在main.js引入</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'@/router'</span> <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$http <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token template-string"><span class="token string">`my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在src下创建router文件夹</p><p><code>src/router/index.js</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>createRouter<span class="token punctuation">,</span>createWebHistory<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token punctuation">;</span><span class="token keyword">import</span> routes <span class="token keyword">from</span> <span class="token string">'./routes'</span> <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    history<span class="token punctuation">:</span><span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token string">"/viteApp/"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//history模式使用HTML5模式</span>    routes<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">export</span> <span class="token keyword">default</span> router<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>scr/router/routes.js</code> 处理路由</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/home.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//路由懒加载</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/wxc'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'wxc'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/wxc.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//路由懒加载</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="vite引入vuex"><a href="#vite引入vuex" class="headerlink" title="vite引入vuex"></a>vite引入vuex</h1><pre><code>npm install vuex@next // 最新版 </code></pre><p>在mian.js中引入</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'@/router'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> store <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/store'</span> <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$http <span class="token operator">=</span> name <span class="token operator">=</span><span class="token operator">></span> <span class="token template-string"><span class="token string">`my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在src下创建store文件夹</p><p>index.js</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>createStore<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">import</span> <span class="token punctuation">{</span>mutations<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./mutations'</span><span class="token keyword">import</span> <span class="token punctuation">{</span>actions<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./actions'</span> <span class="token keyword">export</span> <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    state<span class="token punctuation">:</span><span class="token punctuation">{</span>         typeId<span class="token punctuation">:</span> <span class="token string">'user001'</span><span class="token punctuation">,</span>         showName<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>         count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>         user<span class="token punctuation">:</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">'joy'</span><span class="token punctuation">,</span>            pwd<span class="token punctuation">:</span> <span class="token string">'123456'</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    getters<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token function">getId</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> state<span class="token punctuation">.</span>typeId        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">getUser</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> state<span class="token punctuation">.</span>user        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>    mutations<span class="token punctuation">,</span>    actions<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mutations.js</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function">showUserName</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{</span>        state<span class="token punctuation">.</span>showName <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">updateCount</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{</span>        state<span class="token punctuation">.</span>count<span class="token operator">++</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>actions.js</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">{</span>commit<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'updateCount'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="vite引入scss"><a href="#vite引入scss" class="headerlink" title="vite引入scss"></a>vite引入scss</h1><pre><code>npm install sass -D</code></pre><p>在vite.config.js下进行配置</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>defineConfig<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vite'</span><span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">'@vitejs/plugin-vue'</span><span class="token keyword">import</span> styleImport <span class="token keyword">from</span> <span class="token string">'vite-plugin-style-import'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'path'</span><span class="token punctuation">;</span> <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>    alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'@'</span><span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  base<span class="token punctuation">:</span> <span class="token string">'./'</span><span class="token punctuation">,</span>  server<span class="token punctuation">:</span> <span class="token punctuation">{</span>    host<span class="token punctuation">:</span> <span class="token string">'10.0.13.63'</span><span class="token punctuation">,</span>    port<span class="token punctuation">:</span> <span class="token number">8086</span><span class="token punctuation">,</span>    open<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  css<span class="token punctuation">:</span><span class="token punctuation">{</span>    preprocessorOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>      scss<span class="token punctuation">:</span> <span class="token punctuation">{</span>        additionalData<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`@import "./src/assets/common/common.scss";`</span></span><span class="token comment" spellcheck="true">//引用公共样式，使用vite搭建项目只安装sass即可，不需要安装node-sass,sass-loader</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云开发之云数据库</title>
      <link href="/2022/01/23/%E4%BA%91%E5%BC%80%E5%8F%91%E4%B9%8B%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2022/01/23/%E4%BA%91%E5%BC%80%E5%8F%91%E4%B9%8B%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="uniCloud"><a href="#uniCloud" class="headerlink" title="uniCloud"></a>uniCloud</h1><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p>​    <code>uniCloud</code>提供了一个 JSON 格式的文档型数据库</p><p>​    它是nosql非关系型数据库，如果您之前熟悉sql关系型数据库，那么两者概念对应关系如下表：</p><table><thead><tr><th align="left">关系型</th><th align="left">JSON 文档型</th></tr></thead><tbody><tr><td align="left">数据库 database</td><td align="left">数据库 database</td></tr><tr><td align="left">表 table</td><td align="left">集合 collection。但行业里也经常称之为“表”。无需特意区分</td></tr><tr><td align="left">行 row</td><td align="left">记录 record / doc</td></tr><tr><td align="left">字段 column</td><td align="left">字段 field</td></tr><tr><td align="left">使用sql语法操作</td><td align="left">使用MongoDB语法或jql操作</td></tr></tbody></table><p>一个<code>uniCloud</code>服务空间，有且只有一个数据库。一个数据库支持多个集合（表）。一个集合可以有多个记录。每个记录可以有多个字段。</p><p>官网描述 <a href="https://uniapp.dcloud.io/uniCloud/hellodb">https://uniapp.dcloud.io/uniCloud/hellodb</a></p><h2 id="2、数据表的类型"><a href="#2、数据表的类型" class="headerlink" title="2、数据表的类型"></a>2、数据表的类型</h2><p>数据库内数据基础类型有以下几种：</p><ul><li>String：字符串</li><li>Number：数字</li><li>Object：对象</li><li>Array：数组</li><li>Bool：布尔值</li><li>GeoPoint：地理位置点</li><li>GeoLineStringLine: 地理路径</li><li>GeoPolygon: 地理多边形</li><li>GeoMultiPoint: 多个地理位置点</li><li>GeoMultiLineString: 多个地理路径</li><li>GeoMultiPolygon: 多个地理多边形</li><li>Date：时间</li><li>Null：相当于一个占位符，表示一个字段存在但是值为空。</li></ul><p>DB Schema中还扩展了其他字段类型，但其实都是基本类型的扩展，比如file类型其实是一种特殊的object，而password类型是一种特殊的string类型。</p><h2 id="3、数据表的组成"><a href="#3、数据表的组成" class="headerlink" title="3、数据表的组成"></a>3、数据表的组成</h2><p>每个数据表，其实包含3个部分：</p><ul><li>data：数据内容</li><li>index：索引</li><li>schema：数据表格式定义</li></ul><h2 id="4、数据表的存储"><a href="#4、数据表的存储" class="headerlink" title="4、数据表的存储"></a>4、数据表的存储</h2><p>字段属性清单<a href="https://uniapp.dcloud.net.cn/uniCloud/schema?id=segment">https://uniapp.dcloud.net.cn/uniCloud/schema?id=segment</a></p><p>数据表示例：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"bsonType"</span><span class="token operator">:</span> <span class="token string">"object"</span><span class="token punctuation">,</span> // 数据表类型  <span class="token property">"required"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token property">"permission"</span><span class="token operator">:</span> <span class="token punctuation">{</span> // 客服端操作数据库权限    <span class="token property">"read"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"create"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"update"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"delete"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span> //表的字段清单    <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"ID，系统自动生成"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bsonType"</span><span class="token operator">:</span> <span class="token string">"string"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"用户名"</span><span class="token punctuation">,</span>    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"用户名，不允许重复"</span><span class="token punctuation">,</span>    <span class="token property">"trim"</span><span class="token operator">:</span> <span class="token string">"both"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"age"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bsonType"</span><span class="token operator">:</span> <span class="token string">"password"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"密码"</span><span class="token punctuation">,</span>    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"密码，加密存储"</span><span class="token punctuation">,</span>    <span class="token property">"trim"</span><span class="token operator">:</span> <span class="token string">"both"</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==注：数据表的字段都要写在一级节点properties内==</p><h2 id="操作方式"><a href="#操作方式" class="headerlink" title="操作方式"></a>操作方式</h2><p> 云数据库支持云函数访问， 也支持在客户端直接访问云数据库。</p><h3 id="1、客户端直接操作clientDB"><a href="#1、客户端直接操作clientDB" class="headerlink" title="1、客户端直接操作clientDB"></a>1、客户端直接操作clientDB</h3><p>​    第一步 获取数据库的实例 快捷方式 键入 cdb</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> db <span class="token operator">=</span> uniCloud<span class="token punctuation">.</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//代码块为cdb</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    ==创建coliection 之前要先有数据表==    </p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 第一种方式 提前web创建数据表 test</span><span class="token comment" spellcheck="true">// 第二种方式 调用add方法，给某数据表新增数据记录时，如果该数据表不存在，会自动创建该数据表（阿里云专属，腾讯云有独立的api）</span><span class="token comment" spellcheck="true">// 第二种方式创建的数据表没有索引，注意</span><span class="token keyword">const</span> db <span class="token operator">=</span> uniCloud<span class="token punctuation">.</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'Ben'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步 创建coliection 获取 数据表对象 (可以通过web控制台创建数据表)</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> coliection <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第三步操作数据表</p><p>通过 <code>db.collection(name)</code> 可以获取指定数据表的引用，在数据表上可以进行以下操作</p><table><thead><tr><th>类型</th><th>接口</th><th align="left">说明</th></tr></thead><tbody><tr><td>写</td><td>add</td><td align="left">新增记录（触发请求）</td></tr><tr><td>计数</td><td>count</td><td align="left">获取符合条件的记录条数</td></tr><tr><td>读</td><td>get</td><td align="left">获取数据表中的记录，如果有使用 where 语句定义查询条件，则会返回匹配结果集 (触发请求)</td></tr><tr><td>引用</td><td>doc</td><td align="left">获取对该数据表中指定 id 的记录的引用</td></tr><tr><td>查询条件</td><td>where</td><td align="left">通过指定条件筛选出匹配的记录，可搭配查询指令（eq, gt, in, …）使用</td></tr><tr><td></td><td>skip</td><td align="left">跳过指定数量的文档，常用于分页，传入 offset。clientDB组件有封装好的更易用的分页，<a href="https://uniapp.dcloud.io/uniCloud/uni-clientdb-component">另见</a></td></tr><tr><td></td><td>orderBy</td><td align="left">排序方式</td></tr><tr><td></td><td>limit</td><td align="left">返回的结果集(文档数量)的限制，有默认值和上限值</td></tr><tr><td></td><td>field</td><td align="left">指定需要返回的字段</td></tr></tbody></table><p>示例： 点击进行对数据库的存储</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token function">handleShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取数据库的实例</span>    <span class="token keyword">const</span> db <span class="token operator">=</span> uniCloud<span class="token punctuation">.</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过api获取数据表对象</span>    <span class="token keyword">const</span> coliection <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 可以进行数据表操作 增add 查get where</span>    <span class="token comment" spellcheck="true">// collection对象的方法可以增和查数据，删和改不能直接操作</span>        <span class="token comment" spellcheck="true">// add 插入数据</span>    <span class="token keyword">await</span> coliection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"雷春洋"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// where 条件查询</span>    <span class="token keyword">await</span> coliection<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'雷春洋'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意点： 数据库的操作是异步的  编写代码注意</p><h4 id="分页查询功能实现"><a href="#分页查询功能实现" class="headerlink" title="分页查询功能实现"></a>分页查询功能实现</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token function">handleShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取数据库的实例</span>    <span class="token keyword">const</span> db <span class="token operator">=</span> uniCloud<span class="token punctuation">.</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过api获取数据表对象</span>    <span class="token keyword">const</span> coliection <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 分页功能</span>    <span class="token keyword">let</span> page <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">// 当前页</span>    <span class="token keyword">let</span> pagesize <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment" spellcheck="true">// 每次的长度</span>    <span class="token keyword">let</span> res<span class="token operator">=</span><span class="token keyword">await</span> coliection<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>pagesize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token punctuation">(</span>page<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pagesize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、云函数调用方式"><a href="#2、云函数调用方式" class="headerlink" title="2、云函数调用方式"></a>2、云函数调用方式</h3><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>通过云存储进行图片上传</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 云服务上传图片</span>uni<span class="token punctuation">.</span><span class="token function">chooseImage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>     success<span class="token punctuation">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>tempFilePaths<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">let</span> filePath <span class="token operator">=</span> res<span class="token punctuation">.</span>tempFilePaths<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>             <span class="token comment" spellcheck="true">//进行上传操作</span>             <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> uniCloud<span class="token punctuation">.</span><span class="token function">uploadFile</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                 filePath<span class="token punctuation">:</span> filePath<span class="token punctuation">,</span>                 cloudPath<span class="token punctuation">:</span> <span class="token string">'王秋霞.jpg'</span>                 <span class="token comment" spellcheck="true">// onUploadProgress: function(progressEvent) {</span>                 <span class="token comment" spellcheck="true">//   console.log(progressEvent);</span>                 <span class="token comment" spellcheck="true">//   var percentCompleted = Math.round(</span>                 <span class="token comment" spellcheck="true">//     (progressEvent.loaded * 100) / progressEvent.total</span>                 <span class="token comment" spellcheck="true">//   );</span>                 <span class="token comment" spellcheck="true">// }</span>             <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>fileID<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 云开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>稳固vue基础</title>
      <link href="/2022/01/21/%E9%87%8D%E4%BF%AEvue/"/>
      <url>/2022/01/21/%E9%87%8D%E4%BF%AEvue/</url>
      
        <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>vue中箭头函数</p><pre><code>所有被vue管理的函数最好都写成普通函数不被vue管理的 如定时器，请求等， 最好使用箭头函数，（这样this的指向才是VM或者组件的实例对象）</code></pre><h2 id="mvvm"><a href="#mvvm" class="headerlink" title="mvvm"></a>mvvm</h2><ul><li>M 模型（Model）： 对应data中的数据</li><li>V: 视图（View）： 模板</li><li>VM： 视图模型（）： Vue实例对象</li></ul><p><img src="image-20220111105121955.png" alt="image-20220111105121955"></p><h2 id="Object-defineproperty方法"><a href="#Object-defineproperty方法" class="headerlink" title="Object.defineproperty方法"></a>Object.defineproperty方法</h2><p>可以用来给对象添加属性</p><ul><li><p>数据劫持 数据代理 计算属性 都有使用到该方法</p><p><code>通过该方法添加的属性不可以枚举（遍历），如需遍历在第三个参数的配置项中添加 enumerable: true</code></p></li></ul><p>参数：1、要添加的目标对像 </p><p>​            2、添加的属性 名</p><p>​            3、配置项</p><pre class="line-numbers language-js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    value<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 值</span>    enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//控制属性是否可以枚举</span>    writable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 值是否可以被修改， 默认为false</span>    configurable： <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 属性是否可以被删除， 默认为false</span>    <span class="token comment" spellcheck="true">// 访问时触发get方法 返回值为age的值</span>    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 修改时触发， 且会收到修改的具体值</span>    <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h2><p>通过一个对象代理对另一个对象的操作 读或写</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 简易数据代理</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> obj<span class="token punctuation">.</span>x  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    obj<span class="token punctuation">.</span>x <span class="token operator">=</span> value  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>obj2<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>好处 缓存    <code>计算属性中this指向vue的实例</code></p><p>两种写法 例如计算sum属性 </p><pre class="line-numbers language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// 复杂写法——使用配置选项写法 {} （考虑修改属性的时候）</span> computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>     sum<span class="token punctuation">:</span> <span class="token punctuation">{</span>         <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token keyword">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但大多数的情况下是不考虑修改的情况的——简写</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 简写时使用函数写法 可以解为 sum() === get()</span>computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 具体的操作</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="监听器-watch"><a href="#监听器-watch" class="headerlink" title="监听器 watch"></a>监听器 watch</h2><p>监听数据的改变，内置了很多的 配置选项 如监听 布尔变量flag</p><pre class="line-numbers language-js"><code class="language-js">watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>    flag<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 内置handler函数 当flag属性发生变化时 就会自动调用</span>        <span class="token comment" spellcheck="true">// 有两个参数 第一个新的值 第二个旧的值</span>        <span class="token function">handler</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oldValue<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 初始化时 立即执行配置</span>        immediate<span class="token punctuation">:</span><span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另一种写法 通过 <code>实例.$watch('监听的属性', {配置项})</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 监听的 属性要加 “</span>vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'flag'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 内置handler函数 当flag属性发生变化时 就会自动调用</span>    <span class="token comment" spellcheck="true">// 有两个参数 第一个新的值 第二个旧的值</span>    <span class="token function">handler</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oldValue<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 初始化时 立即执行配置</span>    immediate<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多级结构监视"><a href="#多级结构监视" class="headerlink" title="多级结构监视"></a>多级结构监视</h3><pre class="line-numbers language-js"><code class="language-js">watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// a.b: {} 错误写法</span>    <span class="token comment" spellcheck="true">// 正确写法 通过 . 调用是不能使用简写 要写成原始写法加上引号</span>    <span class="token string">'a.b'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="深度监视-deep"><a href="#深度监视-deep" class="headerlink" title="深度监视 deep"></a>深度监视 deep</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 当监视的属性是一个多级的对象那个，想监听每个元素时 添加配置项</span>obj： <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token number">1</span>，    b<span class="token punctuation">:</span> <span class="token number">2</span>，    <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">}</span>watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// obj: {} 直接写是监听不了的 需要开启深度监听</span>    obj<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// deep 开启深度监听</span>        deep<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="计算属性对比监听器"><a href="#计算属性对比监听器" class="headerlink" title="计算属性对比监听器"></a>计算属性对比监听器</h2><pre class="line-numbers language-tex"><code class="language-tex">1、computed能完成的功能watch都可以完成2、watch能完成的，computed不一定能完成， 如watch可以完成异步3、watch开销相对较大，一般用在请求 异步时4、计算属性具有缓存 性能更好<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="key"><a href="#key" class="headerlink" title="key"></a>key</h2><pre><code>// key使用index时的问题逆序添加时的问题（破坏顺序时）原因：key是唯一标识，在用户操作dom时，vue使用的是 diff算法对比虚拟dom是否改变，以key为依据。只有发生改变时才会更新视图。使用key时，在头部插入数据，原先的元素的key会改变，在diff比对时就会出现问题，导致后续元素的部分内容都要更新，导致页面错误</code></pre><p><img src="image-20220112194909744.png" alt="image-20220112194909744"></p><p><img src="image-20220112195354442.png" alt="image-20220112195354442"></p><h2 id="vue是如何监听数据变化的"><a href="#vue是如何监听数据变化的" class="headerlink" title="vue是如何监听数据变化的"></a>vue是如何监听数据变化的</h2><p>尚硅谷vue， P34-P37 ![<a href="https://www.bilibili.com/video/BV1Zy4y1K7SH?p=37&amp;spm_id_from=pageDriver%5D">https://www.bilibili.com/video/BV1Zy4y1K7SH?p=37&amp;spm_id_from=pageDriver]</a></p><p>1、vue会监视data中所有层次的数据，</p><p>2、 如何检测对象的数据</p><pre><code>通过setter实现监视，且在 new_Vue时就传入检测的数据。对象后追加的属性 默认是不做响应式的可通过Vue.set或者$set实现响应式（三个参数 目标元素，属性/索引，值）</code></pre><p>​    3、 监视数组</p><pre><code>通过包装数组方法实现， 本质是做两件事1、 调用原生对应方法实现对数组更新。2、 重新解析模板更新页面包装的方法： push(), pop(), shift(), unshift(), sort(), reverse(), splice()使用Vue.set或者$set也可</code></pre><p>注:<code>Vue.set和$set不能给 vm或vm的跟数据对象添加属性 ！！</code></p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>重点： mouned  beforeDestroy</p><p><img src="image-20220118151448098.png" alt="image-20220118151448098"></p><p>8个 + 3个</p><p>3个： nexttick </p><p>​            路由： 激活时，失活时</p><h2 id="vue封装的动画过度"><a href="#vue封装的动画过度" class="headerlink" title="vue封装的动画过度"></a>vue封装的动画过度</h2><p><img src="image-20220121154902741.png" alt="image-20220121154902741"></p><p><img src="image-20220121154954232.png" alt="image-20220121154954232"></p><h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><p>使用配置对象： directives</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1、函数写法</span><span class="token operator">&lt;</span>div v<span class="token operator">-</span>big<span class="token operator">=</span>n<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment" spellcheck="true">// big函数调用时机， 1、指令和元素成功绑定时 2、指令所在的模板被重新解析时</span>directives<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 两个参数， 1、真实的dom元素， 2、绑定</span>    <span class="token function">big</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> binding<span class="token punctuation">)</span> <span class="token punctuation">{</span>        element<span class="token punctuation">.</span>inberText <span class="token operator">=</span> binding<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">10</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 2、 配置对象写法</span>directives<span class="token punctuation">:</span> <span class="token punctuation">{</span>    big<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 指令和元素成功绑定时调用</span>        <span class="token function">bind</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> binding<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 指令所在元素被插入页面时调用</span>        <span class="token function">inserted</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> binding<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 指令所在的模板被重新解析时调用</span>        <span class="token function">update</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> binding<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一些坑</p><pre><code>多个单词时由于大小写不敏感，不可以用驼峰命名this指向Window指令为局部指令， 全局可用 Vue.directive('指令'，{配置项})</code></pre><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p><code>scr/plugins.js</code></p><p>是一个对象 里边必须包含 install()方法 在使用时vue会自动调用</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 可以接受一个Vue构造函数 作为形参</span>    <span class="token function">install</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 可定义全局的过滤器</span>        <span class="token comment" spellcheck="true">// 可定义全局混入</span>        <span class="token comment" spellcheck="true">// 可定义全局自定义指令</span>        <span class="token comment" spellcheck="true">// 定义挂载在 vue原型上的方法</span>        <span class="token comment" spellcheck="true">// Vue.prototype.call = function(){}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好处: 可以在插件内 定义<code>全局的过滤器 全局混入 全局自定义指令 以及定义挂载在 vue原型上的方法</code></p><p>使用 在main.js里引入 通过Vue.use()挂载</p><pre class="line-numbers language-js"><code class="language-js">在实例创建之前引入<span class="token keyword">import</span> plugins <span class="token keyword">from</span> <span class="token string">'......plugins'</span><span class="token comment" spellcheck="true">// 可以在挂载调用时 传递参数</span><span class="token comment" spellcheck="true">// 例如传递 1，2，3</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>plugins<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>组件就是一块砖，哪里需要哪里搬</p><p>父子通信 props</p><p>子父通信 ： 采用自定义事件的方式 </p><pre><code>父组件使用的子组件绑定自定义事件 @lcy="demo"methods: {demo(传递的数据) {}}子组件上使用 this.$emit('lcy', '传递的数据') // 数据可以是变量// 相当于$emit在子组件帮忙触发父组件的回调函数（第二个参数传参）</code></pre><p><img src="image-20220120191157055.png" alt="image-20220120191157055"></p><h3 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a>全局事件总线</h3><p>可实现任意组件间通信</p><pre class="line-numbers language-js"><code class="language-js">原理： 定义一个总线qj，能够被说有组件访问，且具有$on $emit方法    在组件上自定义事件，事件内总线qj通过$on绑定事件，其他组件内通过总线$emit触发传参（就可以实现任意组件通信）    <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'事件名'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 挂载</span>    <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'事件名'</span><span class="token punctuation">,</span><span class="token string">'数据'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 触发</span>总线qj： <span class="token punctuation">(</span>条件<span class="token punctuation">)</span>     <span class="token number">1</span>、全部组件可访问： 通过在入口文件上 在Vue。prototype挂载对象实现    <span class="token number">2</span>、具有$on $emit<span class="token punctuation">:</span>     具体实现<span class="token punctuation">:</span>     <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 安装全局事件总线</span>            Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">this</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'事件名'</span><span class="token punctuation">,</span><span class="token string">'回调函数'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 挂载</span>    <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'事件名'</span><span class="token punctuation">,</span><span class="token string">'数据'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 触发</span>注： 使用完事件后最好将全局的事件进行解绑<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><p>获取当前的DOM元素</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 真实的DOM上使用 ref进行绑定</span><span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">></span>School<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment" spellcheck="true">// 在获取时使用 this.ref..... 进行操作</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>title<span class="token punctuation">.</span>innerHTML<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20220118200438024.png" alt="image-20220118200438024"></p><h2 id="mixin混入"><a href="#mixin混入" class="headerlink" title="mixin混入"></a>mixin混入</h2><p>抽取公共的方法暴露 共享使用</p><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><p>作用： 让父组件指定位置插入html结构，也是一种组件间通信的方式，父——&gt;子</p><p>默认插槽</p><pre><code>组件内使用&lt;slot&gt;&lt;/slot&gt;占位</code></pre><p>具名插槽</p><pre><code>组件内使用&lt;slot name="name"&gt;&lt;/slot&gt;占位使用&lt;组件名&gt;    &lt;template #name&gt;        内容    &lt;/template&gt;        // 或    &lt;template v-slot:name&gt;        内容    &lt;/template&gt;    &lt;/组件名&gt;</code></pre><p>作用域插槽</p><p>尚硅谷p104 <a href="https://www.bilibili.com/video/BV1Zy4y1K7SH?p=104&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1Zy4y1K7SH?p=104&amp;spm_id_from=pageDriver</a></p><p><img src="image-20220123135710342.png" alt="image-20220123135710342"></p><h1 id="生态系统"><a href="#生态系统" class="headerlink" title="生态系统"></a>生态系统</h1><h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><p>概念： 专门在Vue中实现集中式状态（数据）管理的Vue插件，对 Vue中的的多组件的共享状态进行集中管理，也属于组件通信方式，适合任意组件通信</p><p>三大组成 由stote领导</p><p>State：状态</p><p>Actions： 异步</p><p>Mutations： 操作state（参数，state， 传递的数据）</p><p><img src="vuex.png" alt="vuex"></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-js"><code class="language-js">npm i vuex <span class="token comment" spellcheck="true">// 安装</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>  <span class="token comment" spellcheck="true">// 引入</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 挂载</span><span class="token comment" spellcheck="true">// 创建 store 演示</span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span>  store<span class="token punctuation">:</span> <span class="token string">'helle'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="真正的store创建"><a href="#真正的store创建" class="headerlink" title="真正的store创建"></a>真正的store创建</h3><p><code>创建src/store/index.js</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 引入vue</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment" spellcheck="true">// 引入vuex</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// actions一般在异步</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 操作state</span><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 存储数据</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 创建store</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  actions<span class="token punctuation">,</span>  mutations<span class="token punctuation">,</span>  state<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 导出store</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="引入store"><a href="#引入store" class="headerlink" title="引入store"></a>引入store</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./stote'</span> <span class="token comment" spellcheck="true">// 引入store</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span>  store<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 将创建的好的store 引入</span>  <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注： 在main.js里引入store之前要先引入vuex并use(vuex),不然会报错，所以我们可以在<code>创建src/store/index.js</code>文件里引入并Vue.use(vuex) ==注意引入vue==</p><p>业务场景:  ==涉及到要对 state数据进行处理时，可以在store对象中增加getters属性（相当于定义一个任何组件都可访问的 计算属性）==</p><h3 id="页面使用"><a href="#页面使用" class="headerlink" title="页面使用"></a>页面使用</h3><p>在taore中的state定义数据，在任意组件都可访问</p><pre class="line-numbers language-js"><code class="language-js">state <span class="token punctuation">{</span> num： <span class="token number">0</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// html使用</span><span class="token punctuation">{</span><span class="token punctuation">{</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>num<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// js使用</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>num<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在html中使用名字很长 可以使用辅助函数 在计算属性中</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 函数 mapState</span>computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 两种写法，名称和定义不同 可使用对象写法（引号不可省略）    </span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>num<span class="token punctuation">:</span> <span class="token string">'num'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 数组写法 名称相同时可以</span>    <span class="token operator">...</span> <span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有其他的辅助函数mapGetters,  mapMutations, mapActions 使用方法类似</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 原始写法 VS 辅助写法</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'函数名'</span><span class="token punctuation">,</span> 参数<span class="token punctuation">)</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'函数名'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'函数名'</span><span class="token punctuation">,</span> 参数<span class="token punctuation">)</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'函数名'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>getMessage  <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'函数名'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意点： ==使用辅助方法调用vuex函数时,  是不能直接传递参数的。可以在页面模板上加入<code>小括号</code>传递参数, 不加括号回默认传递 event 对象==</p><h2 id="路由route"><a href="#路由route" class="headerlink" title="路由route"></a>路由route</h2><p>​    <code>路由（route）</code>就是一组key-value的对应关系</p><p>​    多个路由，需要<code>路由器（router）</code>的通一管理</p><p>安装</p><pre><code>npm i vue-router</code></pre><p>引入 <code>在main.js中</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span> <span class="token comment" spellcheck="true">// 引入vue-router</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router/index'</span> <span class="token comment" spellcheck="true">// 引入路由规则</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 挂载插件</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span>  router <span class="token comment" spellcheck="true">// 使用路由规则</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写路由规则 <code>src/router/index.js</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 引入vue-router</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token comment" spellcheck="true">// 引入组件</span><span class="token keyword">import</span> About <span class="token keyword">from</span> <span class="token string">'../components/About'</span><span class="token comment" spellcheck="true">// 创建路由器</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token comment" spellcheck="true">// 多个路由规则</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 当路径为 /about 时 就展示About组件</span>      component<span class="token punctuation">:</span> About    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 暴露路由器</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>页面使用</p><pre class="line-numbers language-html"><code class="language-html">// 路由跳转 标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>detail<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转对应的组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>// 组件展示的位置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==页面没有被展示的组件处于销毁状态== 路由切换组件将是频繁销毁创建的过程</p><p><img src="image-20220128142336410.png" alt="image-20220128142336410"></p><h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><p>路由规则 —— 使用新配置项 children:  是一个数组</p><pre class="line-numbers language-js"><code class="language-js"> routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 当路径为 /about 时 就展示About组件</span>      component<span class="token punctuation">:</span> About    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> Home<span class="token punctuation">,</span>      children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'message'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> Message      <span class="token punctuation">}</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>页面使用</p><pre><code>&lt;router-link to="/home/message"&gt;&lt;/router-link&gt;</code></pre><h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 地址拼接 传递参数</span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/home/message?name='张三'"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span class="token comment" spellcheck="true">// 页面获取传递的参数</span><span class="token comment" spellcheck="true">// 通过 this.$route.query 获得参数</span><span class="token comment" spellcheck="true">// html可 $route.query 直接使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 动态传递参数对象 </span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token punctuation">:</span>to<span class="token operator">=</span>"<span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/home/message'</span><span class="token punctuation">,</span>    query<span class="token punctuation">:</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">}</span><span class="token punctuation">}</span>"<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span class="token comment" spellcheck="true">// 页面获取传递的参数</span><span class="token comment" spellcheck="true">// 通过 this.$route.query 获得参数</span><span class="token comment" spellcheck="true">// html可 $route.query 直接使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命名路由 添加name属性</p><pre class="line-numbers language-js"><code class="language-js"> routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'about'</span>      path<span class="token punctuation">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 当路径为 /about 时 就展示About组件</span>      component<span class="token punctuation">:</span> About    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好处： 在使用时里可以简化路由</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 如多级路由 不使用name</span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/home/message"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span class="token comment" spellcheck="true">// 使用name</span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token punctuation">:</span>to<span class="token operator">=</span><span class="token string">"{name: message}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h4><p>params方式</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 在路由规则中占位</span> routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'about'</span>      <span class="token comment" spellcheck="true">// :属性名 占位</span>      path<span class="token punctuation">:</span> <span class="token string">'/about/:name'</span><span class="token punctuation">,</span>       component<span class="token punctuation">:</span> About    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 传递 直接将参数 /参数 形式写入</span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/about/张三"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span class="token comment" spellcheck="true">// 使用 </span>$route<span class="token punctuation">.</span>params<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="路由缓存"><a href="#路由缓存" class="headerlink" title="路由缓存"></a>路由缓存</h3><p>:: 路由展示后被切走是立即被销毁的，如果想要保存切换前的状态，可使用缓存</p><p>使用<keep-alive></keep-alive> 包裹</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 标识在该组件的展示的路由都被缓存</span><span class="token operator">&lt;</span>keep<span class="token operator">-</span>alive<span class="token operator">></span>    <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>keep<span class="token operator">-</span>alive<span class="token operator">></span> <span class="token comment" spellcheck="true">// 如果只想要缓存展示的其中一个组件</span><span class="token comment" spellcheck="true">// 通过include="组件名" 指定</span><span class="token operator">&lt;</span>keep<span class="token operator">-</span>alive include<span class="token operator">=</span><span class="token string">"home"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>keep<span class="token operator">-</span>alive<span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>作用::==让不展示的组件保持挂载，不被销毁==</p><h3 id="导航守卫（权限控制）"><a href="#导航守卫（权限控制）" class="headerlink" title="导航守卫（权限控制）"></a>导航守卫（权限控制）</h3><h4 id="全局守卫"><a href="#全局守卫" class="headerlink" title="全局守卫"></a>全局守卫</h4><p>全局前置路由守卫 <code>src/router/index.js</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 初始化和路由切换之前被调用</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 接受三个参数 去哪 来自那 放行</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'路径'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加自定义字段判断是否要鉴权</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 在路由配置中添加自定义属性(布尔类型) 在拦截器中获取该参数来决定是否对其使用守卫拦截(不需要权限校验的可以不写该属性，读取时为undefined，就不会参与拦截)</span><span class="token comment" spellcheck="true">// 路由配置 </span>meta： <span class="token punctuation">{</span>isAuth<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 在需要的路由下书写属性</span><span class="token comment" spellcheck="true">// 拦截器使用</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 判断是否需要鉴权</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>isAuth<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'路径'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>全局后置路由守卫（不常用）</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 接收两个参数 路由离开时调用</span>router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="独享路由守卫"><a href="#独享路由守卫" class="headerlink" title="独享路由守卫"></a>独享路由守卫</h4><p>只对某一路由 进行守卫</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 独享写在路由规则内， 只有前置路由守卫</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> About<span class="token punctuation">,</span>      meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>isAuth<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 独享路由守卫</span>      beforeEnter<span class="token punctuation">:</span> <span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="组件内置守卫"><a href="#组件内置守卫" class="headerlink" title="组件内置守卫"></a>组件内置守卫</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 组件内书写 与data() 平级书写 </span><span class="token comment" spellcheck="true">// ::必须通过路由规则才能触发这两个拦截器::</span><span class="token comment" spellcheck="true">// 通过路由规则，进入该组件时被调用</span>beforeRouteEnter <span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">)</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 通过路由规则，离开该组件时被调用</span>beforeRouteLeave <span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">)</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="路由工作模式"><a href="#路由工作模式" class="headerlink" title="路由工作模式"></a>路由工作模式</h3><p>hash模式（地址上带#号）： 兼容性好（#以后的内容不会随着http发送）</p><p>history模式：部署上线会有页刷新404问题（后端解决）</p><h1 id="一些技巧"><a href="#一些技巧" class="headerlink" title="一些技巧"></a>一些技巧</h1><h2 id="1、模糊搜索排序"><a href="#1、模糊搜索排序" class="headerlink" title="1、模糊搜索排序"></a>1、模糊搜索排序</h2><pre><code></code></pre><h2 id="2、-表单收集技巧"><a href="#2、-表单收集技巧" class="headerlink" title="2、 表单收集技巧"></a>2、 表单收集技巧</h2><p>多个多选时， v-model中绑定的数据设为数组，并在html层增加value</p><p><img src="image-20220116155355610.png" alt="image-20220116155355610"></p><h2 id="3、跨域解决方案"><a href="#3、跨域解决方案" class="headerlink" title="3、跨域解决方案"></a>3、跨域解决方案</h2><p>​        原理：开启一个与<code>客服端端口号</code>相同的代理服务器，进行代理请求（这样就是两个服务器之间的交流，不存在跨域），然后本地请求<code>代理服务器</code>（本地与代理之间 协议 主机 端口）相同自然不会出现跨域问题</p><p>​        开启代理服务器的方法:    nginx反向代理（学习成本较高，需了解后端）</p><p>​                                                        vue-cli开启一个服务（建议的方式）</p><p><code>根目录/vue.config.js</code>进行配置</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 请求前缀, 只要是以这个为前缀的请求就会走代理</span>      <span class="token string">'^/api'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        target<span class="token punctuation">:</span> <span class="token string">'&lt;url>'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 代理目标的url</span>        <span class="token comment" spellcheck="true">// pathRewrite重写url: 通过正则将请求前缀去掉</span>        <span class="token comment" spellcheck="true">// 原因: 请求前缀会随着请求进行路由查找：导致找不到真正的页面出现404的错误，因此要去除请求前缀</span>        pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'^/api'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">}</span>        ws<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 说谎</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        <code>通过请求前缀灵活的控制走不走代理（本地有同名的资源会优先使用本地）</code>通过不同的请求前缀同时代理多个服务器</p><p>注： ==在代理时要通过pathRewrite将请求前缀去除==</p><h2 id="4、动态更改h5页面标签标题"><a href="#4、动态更改h5页面标签标题" class="headerlink" title="4、动态更改h5页面标签标题"></a>4、动态更改h5页面标签标题</h2><pre class="line-numbers language-js"><code class="language-js">document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'标题'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在vue中可配合路由实现动态切换</p><pre class="line-numbers language-json"><code class="language-json">// 配置规则对象routes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>    name<span class="token operator">:</span> 'about'<span class="token punctuation">,</span>    path<span class="token operator">:</span> '/about'<span class="token punctuation">,</span>    component<span class="token operator">:</span> 'About'<span class="token punctuation">,</span>    meta<span class="token operator">:</span> <span class="token punctuation">{</span>title<span class="token operator">:</span> '详情'<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span>// 全局后置拦截器router.afterEach((to<span class="token punctuation">,</span>from<span class="token punctuation">)</span> => <span class="token punctuation">{</span>  document.title = to.meta.title || '默认标题'<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解决页面闪现问题"><a href="#解决页面闪现问题" class="headerlink" title="解决页面闪现问题"></a>解决页面闪现问题</h2><p>1、 使用 v-cloak指令 配合 css  [cloak] {} 实现</p><h2 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h2><p><img src="image-20220120160925095.png" alt="image-20220120160925095"></p><h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><p>测试一般分为 端到端测试（一般由专业人员测试）  和 单元测试</p><p><img src="image-20220120120139619.png" alt="image-20220120120139619"></p><p><img src="image-20220120120259293.png" alt="image-20220120120259293"></p><h3 id="测试工具-Karma-浏览器测试"><a href="#测试工具-Karma-浏览器测试" class="headerlink" title="测试工具 Karma 浏览器测试"></a>测试工具 Karma 浏览器测试</h3><p><img src="image-20220120122848400.png" alt="image-20220120122848400"></p><h3 id="Mocha"><a href="#Mocha" class="headerlink" title="Mocha"></a>Mocha</h3><p>摩卡 与Vue—cli配合中  Mocha本身是不带断言库的  所以必须先引入断言库（Chai.js）</p><p><img src="image-20220120123230314.png" alt="image-20220120123230314"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp生命周期</title>
      <link href="/2022/01/06/uniapp/"/>
      <url>/2022/01/06/uniapp/</url>
      
        <content type="html"><![CDATA[<p>小程序的生命周期说白了就是指程序从创建、到开始、暂停、唤起、停止、卸载的过程。</p><p>我们大概从三个角度看一下小程序的生命周期。</p><p>（1）：应用生命周期</p><p>（2）：页面生命周期</p><p>（3）：应用生命周期影响页面生命周期</p><p>一：应用生命周期</p><p>1：用户首次打开小程序，触发 onLaunch（全局只触发一次）。:</p><p>2：小程序初始化完成后，触发onShow方法，监听小程序显示。</p><p>3：小程序从前台进入后台，触发 onHide方法。:</p><p>4：小程序从后台进入前台显示，触发 onShow方法。</p><p>5：小程序后台运行一定时间，或系统资源占用过高，会被销毁。</p><p>前台、后台定义： 当用户点击左上角关闭，或者按了设备 Home 键离开微信，小程序并没有直接销毁，而是进入了后台；当再次进入微信或再次打开小程序，又会从后台进入前台。</p><p>最后的效果是这个样子的，微信开发者工具没有办法测试onHide方法</p><p>二：页面生命周期</p><p>1：小程序注册完成后，加载页面，触发onLoad方法。</p><p>2：页面载入后触发onShow方法，显示页面。</p><p>3：首次显示页面，会触发onReady方法，渲染页面元素和样式，一个页面只会调用一次。4：当小程序后台运行或跳转到其他页面（使用wx.navigateTo）时，触发onHide方法。</p><p>5：当小程序有后台进入到前台运行或重新进入页面时，触发onShow方法。</p><p>6：当使用重定向方法wx.redirectTo(OBJECT)或关闭当前页返回上一页wx.navigateBack()，触发onUnload</p><p>具体效果如下图所示：注意看触发onHide和触发onunLoad的时机与方式</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-vQzGquRk-1601105238628)(<a href="https://api.guanchao.site/ueditor/php/upload/image/20200730/1596103857528168.gif#pic_center)]">https://api.guanchao.site/ueditor/php/upload/image/20200730/1596103857528168.gif#pic_center)]</a></p><p>三：应用生命周期影响页面生命周期</p><p>1：小程序初始化完成后，页面首次加载触发onLoad，只会触发一次。</p><p>2：当小程序进入到后台，先执行页面onHide方法再执行应用onHide方法。</p><p>3：当小程序从后台进入到前台，先执行应用onShow方法再执行页面onShow方法。</p>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试之js基础</title>
      <link href="/2021/12/19/%E9%9D%A2%E8%AF%95%E4%B9%8Bjs%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/12/19/%E9%9D%A2%E8%AF%95%E4%B9%8Bjs%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="面试—js"><a href="#面试—js" class="headerlink" title="面试—js"></a>面试—js</h1><h2 id="1、堆栈内存及闭包作用域"><a href="#1、堆栈内存及闭包作用域" class="headerlink" title="1、堆栈内存及闭包作用域"></a>1、堆栈内存及闭包作用域</h2><h3 id="js的8种数据类型及区别"><a href="#js的8种数据类型及区别" class="headerlink" title="js的8种数据类型及区别"></a>js的8种数据类型及区别</h3><p> （函数的变量提升高于var）==对象的属性值  数字和字符串不能相等（数字会被隐式转换为字符串）==</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 值类型（基本类型）  —— 栈内存</span>字符串（String）数字（Number）布尔（Boolean）空（<span class="token keyword">null</span>）未定义（Undefined）创建唯一值（Symbol）<span class="token comment" spellcheck="true">// 引用数据类型   ——堆内存</span>对象 （Object）数组（Array）函数（Function）<span class="token comment" spellcheck="true">// 简单数据类型没有修改的说法，只能被替代（原先数据在栈中被回收）</span><span class="token comment" spellcheck="true">// 引用数据类型没有自己的值 引用数据类型的数据是公共的（堆内存中）</span><span class="token comment" spellcheck="true">// 栈中放的是值 对于引用数据类型放的 指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="和-的区别"><a href="#和-的区别" class="headerlink" title="== 和===的区别"></a>== 和===的区别</h3><p>==    与 ===是不同的,一个是判断值是否相等,一个是判断值及类型是否完全相等</p><p>== 比较时会进行强制转换 ： 转换规则如下</p><pre><code>null == undefined 相等 但与其他值都不想等对象 == 字符串 ， 对象会toString（）变为字符串NaN == NaN 不相等其他的都会转换为数字</code></pre><h3 id="变量提升机制（预编译）"><a href="#变量提升机制（预编译）" class="headerlink" title="变量提升机制（预编译）"></a>变量提升机制（预编译）</h3><p>全局预编译</p><ol><li>创建GO对象</li><li>找声明变量 将<code>函数名</code>作为<code>GO对象的属性名</code>  值为undefined</li><li>寻找函数声明 将值赋予函数体 </li></ol><p>函数预编译</p><ol><li>创建AO对象</li><li>找 <code>形参和变量声明</code> 将变量和形参名 当作 AO对象的属性 值为undefined</li><li>实参形参统一</li><li>在函数体里寻找 函数声明 将值赋予函数体</li></ol><h3 id="作用域和作用域链"><a href="#作用域和作用域链" class="headerlink" title="作用域和作用域链"></a>作用域和作用域链</h3><p>作用域： AO(函数作用域)　GO(全局作用域)</p><p>作用域链: AO, GO，　AO和GO的集合</p><p>​        作用域都有上下级关系，上下级关系确定函数在哪个作用域下创建，变量取值都会在当前作用域中查找，如果没有查到就会像上级作用域查找，直到查到全局作用域，这个查找的过程叫做作用域链</p><p>扩展：nodejs中的作用域</p><h3 id="为什么需要闭包"><a href="#为什么需要闭包" class="headerlink" title="为什么需要闭包"></a>为什么需要闭包</h3><p>​    ==闭包的两大作用 ： 保护/保存==</p><p>​        由于垃圾回收机制 ，局部变量无法共享和长久的保存，全局变量又可能造成变量污染，于是我们希望出现一种机制可以长久的保存局部变量，又不会造成变量污染，</p><p>​        闭包就能解决这样的问题(闭包出现的 原因)，能够长久的保存局部变量在内存，而不会造成全居污染（闭包，函数内返回的是一个函数，并且该函数对局部变量进行的引用，并在外部被赋为全局变量==不会被回收的原因==）</p><p>​    不必要的闭包会增加内存的消耗</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 经典的闭包</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       a<span class="token operator">++</span><span class="token punctuation">;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> f2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 11</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 12</span><span class="token comment" spellcheck="true">// 经典闭包简写</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       a<span class="token operator">++</span><span class="token punctuation">;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="防抖节流"><a href="#防抖节流" class="headerlink" title="防抖节流"></a>防抖节流</h3><p>​      防抖： 当持续触发事件，一定时间内没有再触发事件，事件才会执行一次，如果设定的时间来到之前 又一次触发事件 就重新进行延时；例：</p><ul><li>如果在200ms内没有再次触发滚动事件，那么就执行函数</li><li>如果在200ms内再次触发滚动事件，那么当前的计时取消，重新开始计时</li></ul><p><strong>效果</strong>：如果短时间内大量触发同一事件，只会执行一次函数。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 防抖类似王者荣耀回城 打断重新计时</span><span class="token keyword">function</span>                 <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'show'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> debounce <span class="token punctuation">(</span>func<span class="token punctuation">,</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      func<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> debounceShowLog <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span>showLog<span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">debounceShowLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>节流</strong>：在规定时间内函数不会触发，必须等够时间才能触发</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 类似于王者英雄技能，释放过后必须冷却结束才可以再次触发</span><span class="token keyword">function</span> canRun <span class="token punctuation">(</span>func<span class="token punctuation">,</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      func<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>      flag <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> canRunShowLog <span class="token operator">=</span> <span class="token function">canRun</span><span class="token punctuation">(</span>showLog<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">canRunShowLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="浅拷贝深拷贝"><a href="#浅拷贝深拷贝" class="headerlink" title="浅拷贝深拷贝"></a>浅拷贝深拷贝</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 浅拷贝与赋值的区别</span>赋值：当我们把一个对象赋值给一个新的变量，赋的是该对象在栈中的地址，而不是栈中的数据。两个对象指向同一个存储空间。浅拷贝： 重新堆中创建内存，拷贝前后对象的<span class="token template-string"><span class="token string">`基本数据类型`</span></span>互不影响，但对象若有深层次的（<span class="token template-string"><span class="token string">`引用数据类型`</span></span>）拷贝的仍然是地址，由于共享同一块内存会互相影响。深拷贝：在堆中重新开辟一个区域存放对象，对对象的更深层次的对象进行<span class="token template-string"><span class="token string">`递归拷贝`</span></span>，完成后两个对象互不影响。<span class="token comment" spellcheck="true">// 浅拷贝</span>在多维数据处理拷贝中，浅拷贝只为第一层开辟了新的内存空间，拷贝后的对象操作更深层次的数据时会改变原数据。因此需要进行深拷贝<span class="token function">原始数据</span><span class="token punctuation">(</span>三层数据<span class="token punctuation">)</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name： <span class="token string">"lcy"</span><span class="token punctuation">,</span>    NAN<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    dx<span class="token punctuation">:</span> <span class="token punctuation">{</span>        age<span class="token punctuation">:</span> <span class="token number">18</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 简单浅拷贝实现 </span><span class="token comment" spellcheck="true">// let obj2 = {...obj}</span><span class="token comment" spellcheck="true">// Object.assgin() </span><span class="token comment" spellcheck="true">// Array.prototype.concat() </span><span class="token comment" spellcheck="true">// Array.peototype.slice()</span><span class="token comment" spellcheck="true">// es5方法</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    obj2<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 深拷贝 </span>方法一：JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>将字符串改变为对象 JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>将对象转变为字符串<span class="token keyword">let</span> obj2 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//问题： 原始数据内若有函数，日期对象，正则表达式会出现问题，无法拷贝copyObj对象原型链上的属性和方法，当数据的层次很深，会栈溢出，函数和正则表达式会替换为空对象，日期对象会变为字符串（理想的是变为标准日期对象）</span>方法二：因此采用递归的方法更为合适<span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 过滤特殊情况</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!=</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 不直接创建对象的目的：克隆的结果和之前的保存相同的所属类</span>    <span class="token keyword">let</span> newobj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">obj<span class="token punctuation">.</span>constructor</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasOwnproperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            newobj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newobj<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、面向对象（oop）和this处理"><a href="#2、面向对象（oop）和this处理" class="headerlink" title="2、面向对象（oop）和this处理"></a>2、面向对象（oop）和this处理</h2><p>单例设计模式</p><p>类和实例</p><h3 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h3><h4 id="原型和原型链的概念"><a href="#原型和原型链的概念" class="headerlink" title="原型和原型链的概念"></a><strong>原型和原型链的概念</strong></h4><p>每个对象都会在其内部初始化一个属性，就是prototype(原型)，当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么他就会去prototype里找这个属性，这个prototype又会有自己的prototype，于是就这样一直找下去</p><h4 id="原型和原型链的关系"><a href="#原型和原型链的关系" class="headerlink" title="原型和原型链的关系"></a><strong>原型和原型链的关系</strong></h4><pre><code>instance.constructor.prototype = instance.__proto__复制代码</code></pre><h4 id="原型和原型链的特点"><a href="#原型和原型链的特点" class="headerlink" title="原型和原型链的特点"></a><strong>原型和原型链的特点</strong></h4><p>JavaScript对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变</p><p>当我们需要一个属性的时，Javascript引擎会先看当前对象中是否有这个属性， 如果没有的</p><p>就会查找他的Prototype对象是否有这个属性，如此递推下去，一直检索到 Object 内建对象</p><p>new 运算符的实现机制</p><p>call/apply/bind</p><p>constructor构造函数模式</p><h3 id="this对象"><a href="#this对象" class="headerlink" title="this对象"></a>this对象</h3><p>​    this总是指向函数的直接调用者（而非间接调用者）</p><p>​    如果有new关键字，this指向new出来的那个对象</p><p>​    在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window</p><p>js的四大数据类型的检测方案</p><p>js的四大继承方案（深浅拷贝）</p><h2 id="3、DOM-BOM及事件处理机制"><a href="#3、DOM-BOM及事件处理机制" class="headerlink" title="3、DOM/BOM及事件处理机制"></a>3、DOM/BOM及事件处理机制</h2><p>DOM事件级别</p><ul><li>DOM0   element.onclick = function() {}</li><li>DOM2  element.addEventListener(‘click’, function(){})</li><li>DOM3  element.addEventListener(‘click’, function(){}) </li><li>DOM3 相比于DOM2多了很多事件类型（如鼠标）</li></ul><p><code>addEventListener(‘onclick’,function(){}, false)</code>  第三个参数默认为false 表示冒泡执行阶段， 改为true则为捕获阶段</p><p>DOM事件模型</p><p>​            <code>捕获/冒泡</code></p><p>DOM事件流</p><p>​            <code>用户操作-&gt; （捕获）-&gt; (目标阶段) -&gt; (冒泡)</code>  三个阶段</p><p>事件传播机制（dom事件的捕获流程）</p><p>​            获取html标签的方法： document.documentElement</p><p>​            window   -&gt;  document -&gt; html -&gt; body -&gt;  …  -&gt; 目标对象</p><p>事件代理 （事件委托）</p><p>​            事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件</p><p>​            使用  将事件监听绑定到父元素上    .target() 表示被点击的子元素</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>ul<span class="token operator">></span><span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>ul<span class="token punctuation">.</span>oncllick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    e <span class="token operator">=</span> e <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// e.target 表示被点击的元素</span>    <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Event常见事件对象</p><ol><li>event.preventDefault()  阻止默认事件</li><li>event.stopPropagation()  阻止冒泡</li><li>event.stoplmmediatePropagation()  </li><li>event.currentTarget  当前被点击的元素</li><li>event.target 当前被绑定的事件</li></ol><p>自定义事件</p><ul><li>通过 let eve = new Event(‘事件名’) 自定义事件</li><li>使用 ev.addEventListener(‘事件名’，处理函数function)</li><li>.dispatchEvent(eve)触发事件</li></ul><p>DOM/BOM的核心操作</p><p>拖拽和拖拽插件</p><p>发布者订阅者模式</p><p>浏览器底层渲染机制</p><p>DOM的回流渲染机制</p>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试之css</title>
      <link href="/2021/12/19/%E9%9D%A2%E8%AF%95%E4%B9%8Bcss/"/>
      <url>/2021/12/19/%E9%9D%A2%E8%AF%95%E4%B9%8Bcss/</url>
      
        <content type="html"><![CDATA[<h1 id="面试—css3"><a href="#面试—css3" class="headerlink" title="面试—css3"></a>面试—css3</h1><h2 id="新加样式"><a href="#新加样式" class="headerlink" title="新加样式"></a>新加样式</h2><pre><code>transition：过渡transform：旋转、缩放、移动或者倾斜animation：动画gradient：渐变shadow：阴影border-radius：圆角</code></pre><h2 id="行内元素和块级元素"><a href="#行内元素和块级元素" class="headerlink" title="行内元素和块级元素"></a>行内元素和块级元素</h2><p><strong>行内元素（display: inline）</strong></p><p>​        宽度和高度是由内容决定，与其他元素共占一行的元素，我们将其叫行内元素，例如：<code>&lt;span&gt; 、 &lt;i&gt; 、 &lt;a&gt;</code>等</p><p><strong>块级元素（display: block)</strong></p><p>​        默认宽度由父容器决定，默认高度由内容决定，独占一行并且可以设置宽高的元素，我们将其叫做块级元素，例如：<code>&lt;p&gt; 、&lt;div&gt; 、&lt;ul&gt;等</code></p><h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><p>标准盒子模型，ie怪异盒子模型 </p><ul><li>是什么</li></ul><p>css中的盒子模型包括<strong>IE盒子模型</strong>和标准的<strong>W3C盒子模型</strong></p><p>CSS盒子模型组成：外边距（margin）、边框（border）、内边距（padding）、内容（content）</p><p><code>计算盒子的大小不包含外边距margin</code>（css的盒模型由content(内容)、padding(内边距)、border(边框)、margin(外边距)组成。但盒子的大小由content+padding+border这几部分决定，<strong>把margin算进去的那是盒子占据的位置，而不是盒子的大小！</strong>）</p><ul><li>区别</li></ul><p>标准盒子模型： 宽度=内容的宽度（content）+ border + padding + margin</p><p>IE盒子模型：宽度=内容宽度（content+border+padding）+ margin <code>内容区域将边框与内边距包裹在内</code></p><p> 通过css转换盒子模型：box-sizing:  border-box; IE盒子模型;</p><p>​                                            box-sizing:  content-box: 标准盒子模型;</p><p>注：<code>怪异盒子模型内容宽度如果超出 width 仍然会撑开盒子</code></p><h2 id="选择符有哪些，那些可以继承"><a href="#选择符有哪些，那些可以继承" class="headerlink" title="选择符有哪些，那些可以继承"></a>选择符有哪些，那些可以继承</h2><pre class="line-numbers language-ABAP"><code class="language-ABAP">通配*{}id选择器#{}类选择器 .{}标签选择器 {div....}相邻选择器 + {} // 选择加号前的下一个元素后代选择器 空格相连 {}子元素选择器  > {}属性选择器 a[herf] {}那些可以继承https://juejin.cn/post/6844904149222424590那些不可继承1.display2.text-decoration 添加文本样式3.list-style4.盒子模型属性(如padding系列,border系列,margin等,width,height)5.背景属性 background系列6.定位属性 position float clear z-index overflow等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="css优先级算法是如何工作的"><a href="#css优先级算法是如何工作的" class="headerlink" title="css优先级算法是如何工作的;"></a>css优先级算法是如何工作的;</h2><pre><code>!important &gt; 内联样式 &gt; id &gt; class &gt; 标签 &gt; 通配</code></pre><p>css权重计算： </p><pre class="line-numbers language-ABAP"><code class="language-ABAP">第一：内联样式 style 权重 1000第二：id选择器 权重 100第三： 类选择器 权重 10第三： 标签&伪元素 权重 1第五： 通配 *  权重 0Iimportant 权重 无穷大<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对BFC规范的理解"><a href="#对BFC规范的理解" class="headerlink" title="对BFC规范的理解"></a>对BFC规范的理解</h2><pre><code>BFC是一个隔离的独立容器，容器内部的元素不会对外界的元素产生影响</code></pre><h2 id="清除浮动的方式"><a href="#清除浮动的方式" class="headerlink" title="清除浮动的方式"></a>清除浮动的方式</h2><pre><code>1、 触发BFC2、 添加伪元素    ul:after {        content: '';        display: block;        claer: both;    }</code></pre><p>什么是 CSS reset</p><pre><code>reset是一个css文件，用来重置css样式（不常用）</code></pre><h2 id="经典布局方案"><a href="#经典布局方案" class="headerlink" title="经典布局方案"></a>经典布局方案</h2><h3 id="1、圣杯布局"><a href="#1、圣杯布局" class="headerlink" title="1、圣杯布局"></a>1、圣杯布局</h3><p>(双飞翼布局) 就是左右固定 中间自适应</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">1、 父盒子padding左右挤开固定距离，两侧子盒子宽度设置为挤开的距离，中间盒子宽度100%，结合浮动定位实现（）2、flex 实现 (常用)// 结构&lt;div class="container">    &lt;div class="left">zuo&lt;/div>    &lt;div class="center">zhong&lt;/div>    &lt;div class="right">you&lt;/div> &lt;/div>// 样式 <span class="token class">.container</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> antiquewhite<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>vh<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.left</span>,<span class="token class">.right</span> </span><span class="token punctuation">{</span>    <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>vh<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.center</span> </span><span class="token punctuation">{</span>    <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>vh<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、盒子水平居中"><a href="#2、盒子水平居中" class="headerlink" title="2、盒子水平居中"></a>2、盒子水平居中</h3><p>​    回答技巧： 常见的方式 定位 javascript， —-后来在学习到flex布局发现。。。。。更好，还有grid布局的实现，虽然兼容性不是很好，但是实现起来非常简单。</p><pre class="line-numbers language-js"><code class="language-js">一、<span class="token comment" spellcheck="true">/*1、定位    子绝父相，定位宽高50% 然后transform:translate(X,Y)移动盒子宽高的一半即可（兼容性不好）    3、（或者采用margin-top &amp;&amp; margin-left  的负值实现）（必须知道盒子具体的宽高）2、 定位     子绝父相，上下左右定位都设置为零 （但盒子必须设置宽高） */</span>二、flex布局实现（主流）    父元素 <span class="token punctuation">{</span>        display： flex<span class="token punctuation">;</span>        justify<span class="token operator">-</span>content<span class="token punctuation">:</span> conter<span class="token punctuation">;</span>        align<span class="token operator">-</span>items<span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 扩展 grid布局 js实现</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="响应式布局方案"><a href="#响应式布局方案" class="headerlink" title="响应式布局方案"></a>响应式布局方案</h2><p>​    media   rem  flex  vh/ vw</p><h2 id="rem与em的区别"><a href="#rem与em的区别" class="headerlink" title="rem与em的区别"></a>rem与em的区别</h2><blockquote><p>rem是根据根的font-size变化，而em是根据父级的font-size变化</p></blockquote><p>rem：相对于根元素html的font-size，假如html为font-size：12px，那么，在其当中的div设置为font-size：2rem,就是当中的div为24px</p><p>em：相对于父元素计算，假如某个p元素为font-size:12px,在它内部有个span标签，设置font-size：2em,那么，这时候的span字体大小为：12*2=24px</p><h2 id="css3预处理"><a href="#css3预处理" class="headerlink" title="css3预处理"></a>css3预处理</h2><p>less<br>sass</p><p>动画</p>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试通关手册目录</title>
      <link href="/2021/12/17/%E9%9D%A2%E8%AF%95%E9%80%9A%E5%85%B3%E6%89%8B%E5%86%8C%E7%9B%AE%E5%BD%95/"/>
      <url>/2021/12/17/%E9%9D%A2%E8%AF%95%E9%80%9A%E5%85%B3%E6%89%8B%E5%86%8C%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="基本功考察"><a href="#基本功考察" class="headerlink" title="基本功考察"></a>基本功考察</h1><h2 id="关于Html"><a href="#关于Html" class="headerlink" title="关于Html"></a>关于Html</h2><p>html语义化标签的理解; 结构化的理解; 能否写出简洁的html结构; SEO优化<br>h5中新增的属性; 如自定义属性data, 类名className等, 新增表单元素, 拖拽Drag<br>h5中新增的API, 修改的API, 废弃的API 稍作了解 (离线存储, audio, video)</p><h2 id="关于CSS"><a href="#关于CSS" class="headerlink" title="关于CSS"></a>关于CSS</h2><p>CSS选择器( 三大特性 )<br>BFC机制<br>盒模型<br>CSS模块化开发(封装); SCSS和LESS的使用<br>屏幕适配 以及 页面自适应<br>CSS3中新增的选择器<br>CSS3中新增的属性, transform trasition animation等…</p><h2 id="关于布局"><a href="#关于布局" class="headerlink" title="关于布局"></a>关于布局</h2><p>标准文档流(padding + margin + 负margin) + 浮动float + 定位<br>百分比布局(流式布局): px单位 用 %num代替, 占父级元素的百分比<br>flex弹性布局: 主轴 辅助轴的几个属性<br>grid栅格布局: 使用框架中的类名来替代: 本质上还是百分比布局</p><h2 id="关于JS基础"><a href="#关于JS基础" class="headerlink" title="关于JS基础"></a>关于JS基础</h2><p>变量数据类型及检测: 基本 + 引用<br>运算符: 算术 + 条件 + 逻辑 + 位 + 短路, 隐式转换等<br>条件, 循环, 异常处理 if switch(){case xxx:} try catch finally throw<br>函数定义, 调用方式(apply, call, 直接调用), 传参: 实参给形参赋值<br>字符串, 数组, 对象常用API,<br>正则表达式</p><h2 id="关于JS高级"><a href="#关于JS高级" class="headerlink" title="关于JS高级"></a>关于JS高级</h2><p>作用域, 作用域链, 闭包<br>原型, 原型链, 继承<br>函数上下文, this指向<br>js的运行机制, 事件队列和循环<br>同步, 异步编程</p><h2 id="关于网络协议"><a href="#关于网络协议" class="headerlink" title="关于网络协议"></a>关于网络协议</h2><p>HTTP协议<br>cookie, session, token</p><h2 id="关于ES6语法"><a href="#关于ES6语法" class="headerlink" title="关于ES6语法"></a>关于ES6语法</h2><p>字符串, 数组, 对象 扩展的api<br>变量扩展: let const 解构赋值 块级作用域<br>函数扩展: 箭头函数 默认参数, rest参数<br>展开运算符, 模板字符串<br>set 和 map数据结构<br>迭代器和生成器函数 next 和 yield的理解<br>proxy对象 属性代理器: 属性的读取（get）和设置（set）相关操作<br>promise对象, 异步编程的解决方案<br>async + await: 异步编程的终极方案 promise + generator的语法糖<br>class语法 构造函数的语法糖<br>模块化编程 export + import 的 导出和导入</p><h2 id="VUE基础"><a href="#VUE基础" class="headerlink" title="VUE基础"></a>VUE基础</h2><p>基本指令<br>实例的属性和方法<br>实例的生命周期<br>组件基础: 创建,注册,添加属性方法,套用等…<br>组件通信传值 父子, 兄弟, 跨级<br>插槽slot等…</p><h2 id="VUE高级"><a href="#VUE高级" class="headerlink" title="VUE高级"></a>VUE高级</h2><p>vue-router: 搭建SPA<br>路由,组件的配置<br>路由间的传值<br>路由跳转<br>路由的导航守卫<br>记住在router.js 和 组件页面中的使用方式<br>vuex: 状态管理: 数据仓库store<br>实例化仓库的5大属性的使用<br>state, getters, mutations, actions, modules</p><p>辅助函数mapState等…, 仓库中计算属性的映射, 方便操作<br>记住在 store.js 和 组件中 使用方式<br>VUE深入, 源码阅读<br>数据响应式原理<br>virtual dom<br>diff 算法<br>nextTick等等…<br>vue2和vue3的数据绑定<br>vue3的componest API<br>vite的用法</p><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>掌握原生的DOM操作<br>增删查改<br>熟悉node和element对象<br>事件关于事件的机制<br>冒泡和捕获<br>事件委托<br>自定义事件<br>Event对象<br>面向对象<br>了解面向对象的思想，能够以面向对象的思想构建应用。比如封装一个日历组件，设计对象所需的属性值和方法。<br>new方法<br>继承，派生<br>原型和原型链<br>函数<br>熟悉Array，String等的方法<br>call和apply方法的使用<br>链式调用<br>this</p><h2 id="工程化"><a href="#工程化" class="headerlink" title="工程化"></a>工程化</h2><p>掌握gulp<br>索引行考察手写gulp任务<br>掌握模块化<br>CMD标准<br>commonjs<br>ES6模块<br>babel如何使用<br>webpack打包方案<br>异步加载<br>打包多个文件<br>掌握webpack<br>阅读webpack文档<br>理解配置文件结构<br>合并，注入生效代码部分<br>热更新<br>CSS<br>命名策略<br>嵌套<br>变量<br>函数<br>了解nodeJS对于前端岗位，nodejs的使用主要集中在自动化和搭建简单的数据服务器两个方面。<br>是否上传过npm包<br>断点调试法<br>express<br>插件<br>中间件<br>路由原理<br>HTTP协议<br>数据库查询<br>HTML模板（ejs，pug）<br>了解ES6<br>promise<br>Generator<br>花括号作用域<br>class<br>数组遍历（ES5）<br>严格模式（ES5）<br>模块系统<br>框架专题</p><h2 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h2><p>MVC<br>双向数据绑定<br>单项数据流<br>组件化<br>生命期<br>路由<br>前端模板<br>横向对比，所用模板的优点<br>至少使用过两种以上的前端模板</p><h1 id="工程能力考察"><a href="#工程能力考察" class="headerlink" title="工程能力考察:"></a>工程能力考察:</h1><h2 id="项目能力"><a href="#项目能力" class="headerlink" title="项目能力"></a>项目能力</h2><p>vue-cli脚手架搭建和功能配置 vue.config.js<br>vite的使用和搭建等<br>webpack的常用配置<br>项目构建 打包<br>熟悉各类框架的文档…<br>UI框架: Bootstrap, MUI, Element-ui等<br>常用的插件整理, 整理一个自己插件库, 封装自己的方法库,组件库<br>常用的工具熟练度<br>PC端和移动端开发注意事项和兼容性<br>经验总结: 如何快速确定项目的技术选型</p><h2 id="坑点总结"><a href="#坑点总结" class="headerlink" title="坑点总结"></a>坑点总结</h2><p>项目遇到坑坑坑!!!<br>如何处理，如何提出issue并且合作处理<br>git或者svn等使用情况<br>项目中的性能优化记录 ( 都是细节点…多记录 )<br>需求文档的理解, 可以结合 项目流程图, UML图<br>问题解决能力: (bug定位调试, 查找文档, 寻求他人…)<br>平常有记录的习惯吗。<br>模块化, 组件化开发能力<br>项目分类; 各类文件整理,分类<br>各类功能封装<br>组件和功能模块的抽离, 解耦, 复用</p><h2 id="内功考察"><a href="#内功考察" class="headerlink" title="内功考察:"></a>内功考察:</h2><p>面向对象的编程思想<br>类的抽象<br>对象的封装, 继承<br>为了更好的去管理数据, 分类数据 实现高内聚, 低</p><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>设计模式感觉也是<br>将面向对象思想 再度抽象成现实中 某些特定模式<br>数据结构和算法<br>学习常用的排序搜索算法, 顺序表,链表,栈,队列,树,堆 结构等等…<br>考验你的 抽象思维 和 数学功底了<br>将现实需求 抽象成 计算机代码 的思维能力</p><h2 id="附加技能考察"><a href="#附加技能考察" class="headerlink" title="附加技能考察:"></a>附加技能考察:</h2><h3 id="学习能力"><a href="#学习能力" class="headerlink" title="学习能力"></a>学习能力</h3><p>持续学习的态度–博客, 笔记记录<br>技术论坛活跃度高, 问答多<br>GitHub开源项目参与<br>了解一门后端语言<br>node.js, python, php等…<br>数据库mysql,redis,mongodb. sql的操作语句, mongo的操作语句, redis操作语句<br>node + express 搭建本地服务等<br>python + django + request + scrapy</p><h3 id="系统编程"><a href="#系统编程" class="headerlink" title="系统编程"></a>系统编程</h3><p>Linux命令行操作, 系统文件管理<br>多任务, 多线程, 多进程, 协程, 并发, 并行, 串行, 同步, 异步等概念的理解</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>狗秋</title>
      <link href="/2021/12/14/%E7%8E%8B%E7%A7%8B%E9%9C%9E/"/>
      <url>/2021/12/14/%E7%8E%8B%E7%A7%8B%E9%9C%9E/</url>
      
        <content type="html"><![CDATA[<p>大爷今年六十花甲，穿着皮裤叼着雪茄，精神抖擞红光满颊，钞票大把塞满皮夹，欲求一女共度晚霞，诚心征婚就在当下，愿那女子年纪不大，做事温柔不像三八。唠唠家常说说闲话。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试之http</title>
      <link href="/2021/11/19/%E9%9D%A2%E8%AF%95%E4%B9%8B%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/"/>
      <url>/2021/11/19/%E9%9D%A2%E8%AF%95%E4%B9%8B%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h2><h3 id="网络分层"><a href="#网络分层" class="headerlink" title="网络分层"></a>网络分层</h3><ul><li>目前网络分层可分为两种：OSI 模型和 TCP/IP 模型</li></ul><p>OSI七层模型</p><p>​    <code>物理层——数据链路层——网络层——传输层——会话层——表示层——应用层</code></p><p>TCP的层级</p><p>​    <code>应用层——TCP传输控制层——IP网络层——链路层</code></p><h3 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h3><p><strong>区分状态码</strong><br>     1××开头  - 信息提示<br>     2××开头  - 请求成功<br>     3××开头  - 请求被重定向<br>     4××开头  - 请求错误<br>     5××开头  - 服务器错误</p><p><strong>常见状态码</strong><br>     200 - 请求成功，Ajax 接受到信息了<br>     400 - 服务器不理解请求<br>     403 - 服务器拒绝请求<br>     404 - 请求页面错误<br>     500 - 服务器内部错误，无法完成请求</p><h2 id="HTTP协议类"><a href="#HTTP协议类" class="headerlink" title="HTTP协议类"></a>HTTP协议类</h2><h3 id="主要特点（半双工）"><a href="#主要特点（半双工）" class="headerlink" title="主要特点（半双工）"></a>主要特点（半双工）</h3><ul><li>无连接： 连接一次就会断开 不会保持连接</li><li>无状态 ：客户端和服务端是独立的 http协议只帮忙连接传输 （引出token，cookie，session）（引出本地存储）</li><li>简单快速 </li><li>灵活 ： 通过配置头部信息可以控制不同数据的传输</li></ul><p>报文： 请求报文 ： 请求行- 请求头- 空行- 请求体</p><p>​              响应报文： 状态行- 响应头- 空行- 响应体</p><h3 id="http方法"><a href="#http方法" class="headerlink" title="http方法"></a>http方法</h3><ul><li>GET            获取资源</li><li>POST          传输资源</li><li>PUT             更新资源</li><li>DELETE      删除资源</li><li>HEAD          获取报文首部</li></ul><h3 id="GET和POST的主要区别"><a href="#GET和POST的主要区别" class="headerlink" title="GET和POST的主要区别"></a>GET和POST的主要区别</h3><ul><li>GET在浏览器回退是无害的，POST则会重新请求</li><li>GET产生的URL地址可以被收藏， POST不行</li><li>GET请求会被浏览器主动缓存，POST不会</li><li>GET请求参数会保存在浏览器历史记录中，POST中参数不会保留</li><li>参数传递的位置不同，GET在URL中，POST在请求体中</li></ul><h3 id="什么时候用post"><a href="#什么时候用post" class="headerlink" title="什么时候用post"></a>什么时候用post</h3><p>​        post一般用于修改服务器上的资源，对所发送的信息没有限制。比如</p><p>​        1、无法使用缓存文件（更新服务器上的文件或数据库）<br>​        2、向服务器发送大量数据（POST 没有数据量限制）<br>​        3、发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</p><h2 id="TCP-UDP"><a href="#TCP-UDP" class="headerlink" title="TCP/ UDP"></a>TCP/ UDP</h2><p>TCP三握手四挥手</p><h2 id="浏览器如何运作"><a href="#浏览器如何运作" class="headerlink" title="浏览器如何运作"></a>浏览器如何运作</h2><h2 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h2><p>同源策略</p><h3 id="CORS跨域资源共享"><a href="#CORS跨域资源共享" class="headerlink" title="CORS跨域资源共享"></a>CORS跨域资源共享</h3><pre class="line-numbers language-js"><code class="language-js">会问；项目是怎么部署的<span class="token comment" spellcheck="true">// CORS跨域资源共享</span>官方跨域解决方案，特点是不需要客户端做任何特殊操作，完全在服务器中进行处理，支持<span class="token keyword">get</span>和post请求。跨域资源共享标准新增一组HTTP首部字段，CORS怎么工作的？    CORS是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到响应后会对响应放行。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="前台使用-proxy"><a href="#前台使用-proxy" class="headerlink" title="前台使用 proxy"></a>前台使用 proxy</h3><p><code>vue.config.js</code>中 ==注意写完后重启项目==</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 定义一个对象</span><span class="token keyword">let</span> proxyObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 在指定路径下配置不同的 配置  如 ‘/’下</span>proxyObj<span class="token punctuation">[</span><span class="token string">'/'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// websoket 不开启websoket</span>    ws<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token comment" spellcheck="true">// 代理的目标地址</span>    target： ‘http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>loaclhost：<span class="token number">8000</span>’    <span class="token comment" spellcheck="true">// 发送请求头host会被设置target</span>    changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 重写请求地址</span>    pathReWrite： <span class="token punctuation">{</span>    <span class="token string">'^/'</span><span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    host<span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>    post<span class="token punctuation">:</span> <span class="token number">8080</span><span class="token punctuation">,</span>    proxy<span class="token punctuation">:</span> proxyObj<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="AJAX核心步骤"><a href="#AJAX核心步骤" class="headerlink" title="AJAX核心步骤"></a>AJAX核心步骤</h2><h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>点击发送<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>result<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#result'</span><span class="token punctuation">)</span>    btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ajax 四个步骤 1、创建对象</span>      <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 2、初始化 设置请求方法和 url</span>      xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'http://localhost:8080/server'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 3、 发送</span>      xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 4、 事件绑定</span>      <span class="token comment" spellcheck="true">/*        on 当...时候        readystate 是xhr的一个属性 表示状态        有 0（未初始化） 1（open方法调用完毕）         2（send方法调用完毕） 3（服务端返回部分结果）         4（服务端返回所有结果）五个状态（一般用4）        change 改变      */</span>      xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断readyState状态</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 判断响应状态码</span>          <span class="token comment" spellcheck="true">// 2XX 二开头的表示成功</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span><span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 处理结果 行 头 空行 体</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 状态码</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 状态字符串</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>getAllResponseHeaders<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 头</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 响应体</span>            result<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> xhr<span class="token punctuation">.</span>response<span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>result<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">const</span> result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.result'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseover'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ajax 创建对象</span>      <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token string">'http://localhost:8080/server'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// post请求是在send()设置参数</span>      xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'a=1&amp;b=2&amp;c=3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 状态判断</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>radyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 状态码</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 处理返回结果</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> xhr<span class="token punctuation">.</span>response<span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如何设置请求头</p><p>​    <code>在open方法后追加一个 xhr.setRequestHeader()方法</code></p><ol><li>两个参数 头的名称 头的信息</li><li>例如    xhr.setRequestHeader(‘Content-Type’,’application/x-www-form’)</li></ol><p>服务端响应json数据</p><p>网络超时与异常处理</p><ul><li>(超时设置 xhr.timeout == 2000）若超时则请求取消</li><li>超时回调 xhr.ontimeout =function() {alert(网络超时，请刷新后重试)}</li><li>网络异常回调 xhr.onerror = function() { alert(宁的网络似乎出了点问题)}</li></ul><p>重复请求问题解决 节流阀</p><h3 id="axios请求"><a href="#axios请求" class="headerlink" title="axios请求"></a>axios请求</h3><pre class="line-numbers language-js"><code class="language-js"> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8080/server'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// url参数</span>      params<span class="token punctuation">:</span> <span class="token punctuation">{</span>        id<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>        vip<span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 请求头信息</span>      Headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>        size<span class="token punctuation">:</span> <span class="token string">'ii'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 请求体</span>        username<span class="token punctuation">:</span> admin<span class="token punctuation">,</span>        password<span class="token punctuation">:</span> <span class="token number">123456</span>      <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// axios基于Promise 可用then链式调用</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// post请求</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8080/server'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 请求体</span>        username<span class="token punctuation">:</span> admin<span class="token punctuation">,</span>        password<span class="token punctuation">:</span> <span class="token number">123456</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// url参数</span>      params<span class="token punctuation">:</span> <span class="token punctuation">{</span>        id<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>        vip<span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 请求头信息</span>      Headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>        size<span class="token punctuation">:</span> <span class="token string">'ii'</span>      <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// axios基于Promise 可用then链式调用</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>axios通用方法请求</p><pre class="line-numbers language-js"><code class="language-js">axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">'http://loaclhost:8080'</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// method: 'POAT' 不写默认为GET请求</span>    url<span class="token punctuation">:</span> <span class="token string">'/server'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// url参数</span>    params<span class="token punctuation">:</span> <span class="token punctuation">{</span>        vip： <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 请求头信息</span>    Headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> <span class="token number">100</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 请求体参数</span>    data： <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> <span class="token number">1</span>，        b： <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>status<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 响应状态码</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 状态码字符串</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 响应头信息</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 响应体</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ajax优缺点"><a href="#ajax优缺点" class="headerlink" title="ajax优缺点"></a>ajax优缺点</h3><p><strong>ajax的优点</strong></p><p>1、无刷新更新数据（在不刷新整个页面的情况下维持与服务器通信）<br> 2、异步与服务器通信（使用异步的方式与服务器通信，不打断用户的操作）<br> 3、前端和后端负载均衡（将一些后端的工作交给前端，减少服务器与宽度的负担）<br> 4、界面和应用相分离（ajax将界面和应用分离也就是数据与呈现相分离）</p><p><strong>ajax的缺点</strong></p><p>1、ajax不支持浏览器back按钮.<br> 2、安全问题 Aajax暴露了与服务器交互的细节<br> 3、对搜索引擎的支持比较弱<br> 4、破坏了Back与History后退按钮的正常行为等浏览器机制</p>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何搭建青龙面板</title>
      <link href="/2021/11/16/%E9%9D%92%E9%BE%99%E9%9D%A2%E6%9D%BF%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/11/16/%E9%9D%92%E9%BE%99%E9%9D%A2%E6%9D%BF%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<pre><code>建议:服务器大家用腾讯的轻量云就可以 现在优惠力度大 1h2g2m轻量云 50r一年 推荐用2h4g8m的 74r一年 还可以用来搭建v2免流购买地址 https://curl.qcloud.com/mZF3xXoO```教程开始了第一步```下载finalshell 连接服务器 相信这个大家都会```第二步搭建青龙面板的前提条件 安装docker```1.检查yum源且更新sudo yum check-update2.下载dockercurl -sSL https://get.daocloud.io/docker | sh如果出现错误或者下载不了的换这个curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun3.启动dockersudo systemctl start docker4.查看docker状态sudo systemctl status docker启动成功的话 会有绿色的active(running)5.设置开机自启sudo systemctl enable docker```第三步搭建青龙面板1.拉取镜像```连接服务器后执行以下代码5700为面板端口 可以自己更改 两个都要改docker run -dit-v $pwd/ql/config:/ql/config-v $pwd/ql/log:/ql/log-v $pwd/ql/db:/ql/db-v $pwd/ql/scripts:/ql/scripts-v $pwd/ql/jbot:/ql/jbot-p 5700:5700-e ENABLE_HANGUP=true-e ENABLE_WEB_PANEL=true–name ql–hostname ql–restart alwayswhyour/qinglong:latest```2.放行端口 修改密码```去服务器管理界面防火墙 有的是安全组放行5700端口，你自己改的什么就放行什么。下载winscp连接服务器 找到ql文件夹里面config打开 找到auth.json文件 修改密码 password后面是密码 自己修改```第四步```登录青龙面板浏览器打开http://ip:5700ip为你的服务器ip地址 端口根据自己修改的填写```第五步添加脚本 也就是所为的拉库1.点击青龙面板左侧的定时任务，点击右上角“添加定时”2.名称随便填```faker库命令ql repo https://ghproxy.com/https://github.com/shufflewzc/faker2.git “jd_|jx_|gua_|jddj_|getJDCookie” “activity|backUp” “jd[_]|USER|utils|ZooFaker_Necklace.js|JDJRValidator_Pure|sign_graphics_validate”定时规则30 2,8,14,20,23 * * *```3.点击运行按钮 就可以了第六步添加账号```1.点击左上角三道杠2.点击环境变量3.点击右上角添加变量名称：JD_COOKIE 名称不可更改值填写cookiept_key=*******************;pt_pin=********;注意：分号是英文的，中间没有空格。最后怎么教大家抓cookie```第七步安装依赖环境 必须安装 否则有些脚本运行不了 ，以下命令一个一个跑。跑完之后全选所有脚本 点击批量运行 就可以了。```docker exec -it ql bash -c “apk add --no-cache build-base g++ cairo-dev pango-dev giflib-dev &amp;&amp; cd scripts &amp;&amp; npm install canvas --build-from-source”```2.```docker exec -it ql bash -c “cd scripts &amp;&amp; npm i -S png-js”```3.```docker exec -it ql bash -c “npm install axios date-fns”```4.```docker exec -it ql bash -c “npm install png-js”```5.```docker exec -it ql bash -c “pnpm i png-js”```6.```docker exec -it ql bash -c “pip3 install requests”```7.```docker exec -it ql bash -c “apk add --no-cache build-base g++ cairo-dev pango-dev giflib-dev &amp;&amp; cd scripts &amp;&amp; npm install canvas --build-from-source”```8.```docker exec -it ql bash -c “apk add python3 zlib-dev gcc jpeg-dev python3-dev musl-dev freetype-dev”```9.```docker exec -it ql bash -c “cd /ql/scripts/ &amp;&amp; apk add --no-cache build-base g++ cairo-dev pango-dev giflib-dev &amp;&amp; npm i &amp;&amp; npm i -S ts-node typescript @types/node date-fns axios png-js canvas --build-from-source”```10.yum install wget unzip -y cd root/ql/scripts wget https://ghproxy.com/https://github.com/shufflewzc/faker2/releases/download/0.0.1/utils.zip &amp;&amp; unzip utils.zip如何抓cookie手机用户 下载alook浏览器 登录jd官网，登陆之后 点击 菜单 工具箱 开发者工具 cookies获取 安卓 苹果通用 然后按照上面的教程 输入就好了</code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/11/05/koa2%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/11/05/koa2%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>title: koa2学习记录<br>date: 2022-03-14 13:21:43<br>categories: 前端<br>tags: node</p><h1 id="koa2"><a href="#koa2" class="headerlink" title="koa2"></a>koa2</h1><h2 id="一、Koa2安装"><a href="#一、Koa2安装" class="headerlink" title="#一、Koa2安装"></a><a href="http://codesohigh.com/subject/koa2/koa2.html#%E4%B8%80%E3%80%81koa2%E5%AE%89%E8%A3%85">#</a>一、Koa2安装</h2><p>创建一个空白目录，然后进入终端，并在终端对koa进行安装：</p><pre class="line-numbers language-js"><code class="language-js"># 项目初始化npm init <span class="token operator">-</span>y# 安装koa2npm i koa2 <span class="token operator">-</span>S<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、入口文件"><a href="#二、入口文件" class="headerlink" title="#二、入口文件"></a><a href="http://codesohigh.com/subject/koa2/koa2.html#%E4%BA%8C%E3%80%81%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6">#</a>二、入口文件</h2><p>在项目根目录创建 <code>app.js</code> 文件，并在上一步操作中生成的 <code>package.json</code> 里配置：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"node app.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>app.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">9000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*     解释下面这段代码：    app.use()方法是：将给定的中间件方法添加到此应用程序。简单说就是调用中间件    app.use() 返回 this, 因此可以链式表达*/</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"Hello, Koa"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// ctx.body是ctx.response.body的简写</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Server is running at http://localhost:'</span><span class="token operator">+</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后运行 <code>npm start</code> ，并在浏览器输入 <code>http://localhost:9000/</code> 即可看到页面效果。</p><h2 id="三、洋葱模型"><a href="#三、洋葱模型" class="headerlink" title="#三、洋葱模型"></a><a href="http://codesohigh.com/subject/koa2/koa2.html#%E4%B8%89%E3%80%81%E6%B4%8B%E8%91%B1%E6%A8%A1%E5%9E%8B">#</a>三、洋葱模型</h2><p>学Koa必须要了解 <code>洋葱模型</code> :</p><p><a href="https://tva1.sinaimg.cn/large/008eGmZEgy1gplrwjyczwj30da0c30w0.jpg"><img src="008eGmZEgy1gplrwjyczwj30da0c30w0.jpg" alt="img"></a></p><p><code>Koa</code> 和 <code>Express</code> 都会使用到中间件，Express的中间件是顺序执行，从第一个中间件执行到最后一个中间件，发出响应：</p><p><a href="https://tva1.sinaimg.cn/large/008eGmZEgy1gplrwr650yj30oj08bwep.jpg"><img src="008eGmZEgy1gplrwr650yj30oj08bwep.jpg" alt="img"></a></p><p>Koa是从第一个中间件开始执行，遇到 <code>next</code> 进入下一个中间件，一直执行到最后一个中间件，在逆序，执行上一个中间件 <code>next</code> 之后的代码，一直到第一个中间件执行结束才发出响应。</p><p><a href="https://tva1.sinaimg.cn/large/008eGmZEgy1gplrwvfbaaj30mm0fxwfe.jpg"><img src="008eGmZEgy1gplrwvfbaaj30mm0fxwfe.jpg" alt="img"></a></p><p>对于这个洋葱模型，我们用代码来解释一下。假如把上面的代码改写成：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">9000</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Server is running at http://localhost:'</span><span class="token operator">+</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么在浏览器刷新后，控制台得到的顺序是：</p><pre class="line-numbers language-text"><code class="language-text">12321<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在可以看到，我们通过 <code>next</code>可以先运行下个中间件，等中间件结束后，再继续运行当前 <code>next()</code> 之后的代码。</p><h2 id="四、路由安装"><a href="#四、路由安装" class="headerlink" title="#四、路由安装"></a><a href="http://codesohigh.com/subject/koa2/koa2.html#%E5%9B%9B%E3%80%81%E8%B7%AF%E7%94%B1%E5%AE%89%E8%A3%85">#</a>四、路由安装</h2><p>当需要匹配不同路由时，可以安装：</p><pre class="line-numbers language-text"><code class="language-text">npm i koa-router<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将 <code>app.js</code> 修改：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">9000</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"首页"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/list'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"列表页"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Server is running at http://localhost:'</span><span class="token operator">+</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时，到浏览器刷新并在地址栏最后添加 <code>/list</code> 即可得到首页和列表页。</p><p>备注：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 调用router.routes()来组装匹配好的路由，返回一个合并好的中间件</span><span class="token comment" spellcheck="true">// 调用router.allowedMethods()获得一个中间件，当发送了不符合的请求时，会返回 `405 Method Not Allowed` 或 `501 Not Implemented`</span>allowedMethods方法可以做以下配置：app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// throw: true, // 抛出错误，代替设置响应头状态</span>    <span class="token comment" spellcheck="true">// notImplemented: () => '不支持当前请求所需要的功能',</span>    <span class="token comment" spellcheck="true">// methodNotAllowed: () => '不支持的请求方式'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、路由拆分"><a href="#五、路由拆分" class="headerlink" title="#五、路由拆分"></a><a href="http://codesohigh.com/subject/koa2/koa2.html#%E4%BA%94%E3%80%81%E8%B7%AF%E7%94%B1%E6%8B%86%E5%88%86">#</a>五、路由拆分</h2><p>有时候我们需要拆分路由，比如：</p><p>列表页下所有的子路由（即前端请求的api）与首页所有的子路由想分开处理，那么就需要拆分路由。</p><h3 id="1、创建-router-文件夹"><a href="#1、创建-router-文件夹" class="headerlink" title="#1、创建 router 文件夹"></a><a href="http://codesohigh.com/subject/koa2/koa2.html#_1%E3%80%81%E5%88%9B%E5%BB%BA-router-%E6%96%87%E4%BB%B6%E5%A4%B9">#</a>1、创建 <code>router</code> 文件夹</h3><p>创建router文件夹，并在其中创建：<code>index.js</code> （路由总入口文件）、<code>home.js</code> （首页总路由文件）、<code>list.js</code> （列表页总路由文件）：</p><pre class="line-numbers language-js"><code class="language-js"># app<span class="token punctuation">.</span>js<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./router/index'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span># index<span class="token punctuation">.</span>js<span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> home <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./home'</span><span class="token punctuation">)</span><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./list'</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">,</span> home<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> home<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/list'</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span># home<span class="token punctuation">.</span>js<span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> home <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这里的 '/' 就是指向 index.js 中的 /home</span>home<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"首页"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> home<span class="token punctuation">;</span># list<span class="token punctuation">.</span>js<span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"列表页"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> list<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到浏览器刷新 <code>localhost:9000/home</code> 与 <code>localhost:9000/list</code> 即可得到首页与列表页。</p><h3 id="2、路由重定向"><a href="#2、路由重定向" class="headerlink" title="#2、路由重定向"></a><a href="http://codesohigh.com/subject/koa2/koa2.html#_2%E3%80%81%E8%B7%AF%E7%94%B1%E9%87%8D%E5%AE%9A%E5%90%91">#</a>2、路由重定向</h3><p>那么有同学会问了，如果我想直接从 <code>localhost:9000</code> 重定向到 <code>localhost:9000/home</code> 该怎么办？</p><p>我们可以在 <code>router/index.js</code> 中做如下配置：</p><pre class="line-numbers language-js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">,</span> home<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> home<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">...</span>router<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'/home'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3、404无效路由"><a href="#3、404无效路由" class="headerlink" title="#3、404无效路由"></a><a href="http://codesohigh.com/subject/koa2/koa2.html#_3%E3%80%81404%E6%97%A0%E6%95%88%E8%B7%AF%E7%94%B1">#</a>3、404无效路由</h3><p>如果被访问到无效路由，那么我们可以统一返回404页面：</p><p>在 <code>router</code> 下 <code>errorPage.js</code> :</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> errorPage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>errorPage<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"访问页面不存在"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> errorPage<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>app.js</code> 中引用：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 匹配不到页面的全部跳转去404</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>status<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">"/404"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、统一异常处理（可选）"><a href="#六、统一异常处理（可选）" class="headerlink" title="#六、统一异常处理（可选）"></a><a href="http://codesohigh.com/subject/koa2/koa2.html#%E5%85%AD%E3%80%81%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86-%E5%8F%AF%E9%80%89">#</a>六、统一异常处理（可选）</h2><p>作为后端开发，我们经常需要统一异常处理，避免每次都要自己手写404或200进行返回，因此我们可以创建 <code>utils/errorHandler.js</code> ：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 统一异常处理</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span>app<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> status <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> fileName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            status <span class="token operator">=</span> ctx<span class="token punctuation">.</span>status<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//console.log(err);</span>            status <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>status <span class="token operator">>=</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token number">400</span><span class="token punctuation">:</span>                <span class="token keyword">case</span> <span class="token number">404</span><span class="token punctuation">:</span>                <span class="token keyword">case</span> <span class="token number">500</span><span class="token punctuation">:</span>                    fileName <span class="token operator">=</span> status<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token punctuation">:</span>                    fileName <span class="token operator">=</span> <span class="token string">"other"</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在 <code>app.js</code> 中引入：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> errorHandler <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./utils/errorHandler.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">...</span><span class="token function">errorHandler</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实这一块不写关系也不大，但最好还是加上。</p><h2 id="七、操作mysql函数封装"><a href="#七、操作mysql函数封装" class="headerlink" title="#七、操作mysql函数封装"></a><a href="http://codesohigh.com/subject/koa2/koa2.html#%E4%B8%83%E3%80%81%E6%93%8D%E4%BD%9Cmysql%E5%87%BD%E6%95%B0%E5%B0%81%E8%A3%85">#</a>七、操作mysql函数封装</h2><p>这里已经给大家直接封装好了一个库，专门用来操作mysql的。至于mysql的学习，将在独立的mysql教程中呈现。</p><p>首先，项目内安装 <code>mysql</code>：</p><pre class="line-numbers language-js"><code class="language-js">yarn add mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在，我们在 <code>utils</code> 目录下创建一个 <code>db.js</code> 文件：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token keyword">var</span> pool <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    host<span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 连接的服务器(代码托管到线上后，需改为内网IP，而非外网)</span>    port<span class="token punctuation">:</span> <span class="token number">3306</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// mysql服务运行的端口</span>    database<span class="token punctuation">:</span> <span class="token string">'xxx'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 选择的库</span>    user<span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 用户名</span>    password<span class="token punctuation">:</span> <span class="token string">'123456'</span> <span class="token comment" spellcheck="true">// 用户密码   </span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//对数据库进行增删改查操作的基础</span><span class="token keyword">function</span> <span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>    pool<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>connection<span class="token punctuation">)</span><span class="token punctuation">{</span>        connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span>rows<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>rows<span class="token punctuation">)</span>            connection<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>exports<span class="token punctuation">.</span>query <span class="token operator">=</span> query<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方式：</p><blockquote><p>假设要访问首页(‘/home’)时，要查询表users中所有的数据，可以如下操作：</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../utils/db.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>home    <span class="token comment" spellcheck="true">// 页面底部外链</span>    <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">let</span> sqlLang <span class="token operator">=</span> <span class="token template-string"><span class="token string">`select * from users`</span></span><span class="token punctuation">;</span>            db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sqlLang<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 返回拿到的数据</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="八、后端允许跨域"><a href="#八、后端允许跨域" class="headerlink" title="#八、后端允许跨域"></a><a href="http://codesohigh.com/subject/koa2/koa2.html#%E5%85%AB%E3%80%81%E5%90%8E%E7%AB%AF%E5%85%81%E8%AE%B8%E8%B7%A8%E5%9F%9F">#</a>八、后端允许跨域</h2><p>前端想跨域，可以设置proxy。如果后端允许跨域，可以如下操作：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 安装koa2-cors</span>cnpm i koa2<span class="token operator">-</span>cors<span class="token comment" spellcheck="true">// 这里cors中间件一定要写在路由之前</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="九、读取静态资源文件"><a href="#九、读取静态资源文件" class="headerlink" title="#九、读取静态资源文件"></a><a href="http://codesohigh.com/subject/koa2/koa2.html#%E4%B9%9D%E3%80%81%E8%AF%BB%E5%8F%96%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6">#</a>九、读取静态资源文件</h2><p>首先，在项目的根目录下创建 <code>assets</code> 后，将图片资源文件夹 <code>images</code> 放到其中，并且执行以下操作：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 安装koa-static</span>cnpm install koa<span class="token operator">-</span><span class="token keyword">static</span><span class="token comment" spellcheck="true">// 引入</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token keyword">static</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-static'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 获取静态资源文件夹</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token operator">+</span><span class="token string">'/assets'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">...</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>其中有一张图片叫做 <span class="token template-string"><span class="token string">`banner1.png`</span></span>，那么我们打开浏览器，访问：<span class="token template-string"><span class="token string">`http://localhost:5050/images/banner1.png`</span></span> 即可得到图片。这里注意：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>路径上不需要写assets，因为我们已经指定了访问资源时， <a href="http://localhost:5050/">http://localhost:5050</a> 自动指向 assets 文件夹。</p></blockquote><p>由此，我们知道数据库中图片的地址只需要填写 <code>/images/banner1.png</code> 即可。</p><h2 id="十、mysql录入数据"><a href="#十、mysql录入数据" class="headerlink" title="#十、mysql录入数据"></a><a href="http://codesohigh.com/subject/koa2/koa2.html#%E5%8D%81%E3%80%81mysql%E5%BD%95%E5%85%A5%E6%95%B0%E6%8D%AE">#</a>十、mysql录入数据</h2><p>请参考当前目录下的《Chapter2-mysql2操作.md》。</p><h2 id="十一、POST请求"><a href="#十一、POST请求" class="headerlink" title="#十一、POST请求"></a><a href="http://codesohigh.com/subject/koa2/koa2.html#%E5%8D%81%E4%B8%80%E3%80%81post%E8%AF%B7%E6%B1%82">#</a>十一、POST请求</h2><p>我们以登录举例讲post请求。</p><p>这里规定：前端发送 账号+密码 到后端，如果账号不存在于数据库，则注册账号。</p><p>如果账号存在于数据库中，则验证密码。</p><p>验证密码通过或注册账号成功，都返回token给前端。</p><h3 id="1、建表"><a href="#1、建表" class="headerlink" title="#1、建表"></a><a href="http://codesohigh.com/subject/koa2/koa2.html#_1%E3%80%81%E5%BB%BA%E8%A1%A8">#</a>1、建表</h3><p>设定字段为account和pwd</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> users <span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    account <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'账号'</span><span class="token punctuation">,</span>    pwd <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'密码'</span><span class="token punctuation">,</span>  token <span class="token keyword">LONGTEXT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'令牌'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、form表单页面"><a href="#2、form表单页面" class="headerlink" title="#2、form表单页面"></a><a href="http://codesohigh.com/subject/koa2/koa2.html#_2%E3%80%81form%E8%A1%A8%E5%8D%95%E9%A1%B5%E9%9D%A2">#</a>2、form表单页面</h3><p>在 <code>assets</code> 下创建 <code>index.html</code> ：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>账号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入账号<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入密码<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录/注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            url<span class="token punctuation">:</span> <span class="token string">"/login/register"</span><span class="token punctuation">,</span>            method<span class="token punctuation">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                account<span class="token punctuation">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.account'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                pwd<span class="token punctuation">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.pwd'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">success</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在浏览器直接访问 <code>http://localhost:5050/index.html</code> 即可进入表单页。</p><h3 id="3、安装中间件"><a href="#3、安装中间件" class="headerlink" title="#3、安装中间件"></a><a href="http://codesohigh.com/subject/koa2/koa2.html#_3%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%AD%E9%97%B4%E4%BB%B6">#</a>3、安装中间件</h3><p>安装 <code>koa-bodyparser</code> 与 <code>jsonwebtoken</code> 中间件:</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// koa-bodyparser用于获取post请求数据</span>cnpm install koa<span class="token operator">-</span>bodyparser <span class="token operator">--</span>save<span class="token comment" spellcheck="true">// jsonwebtoken用于生成token</span>cnpm install jsonwebtoken <span class="token operator">--</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JWT"><a href="#JWT" class="headerlink" title="#* JWT"></a><a href="http://codesohigh.com/subject/koa2/koa2.html#jwt">#</a>* JWT</h4><p>在用户登录的路由中使用 jwt.sign 来生成token，一共定义三个参数，第一个是存入token的信息，第二个是token的钥匙，和config/passport.js的配置的钥匙相同，第三个是保存的时间，3600即一个小时，最后返回token，要在前面加Bearer:</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span><span class="token keyword">const</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">{</span> myaccount<span class="token punctuation">:</span> myaccount<span class="token punctuation">,</span> mypwd<span class="token punctuation">:</span> mypwd <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'secret'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> expiresIn<span class="token punctuation">:</span> <span class="token number">3600</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  token<span class="token punctuation">,</span>  msg<span class="token punctuation">:</span> <span class="token string">'登录成功'</span><span class="token punctuation">}</span><span class="token function">resolve</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、添加post接口"><a href="#4、添加post接口" class="headerlink" title="#4、添加post接口"></a><a href="http://codesohigh.com/subject/koa2/koa2.html#_4%E3%80%81%E6%B7%BB%E5%8A%A0post%E6%8E%A5%E5%8F%A3">#</a>4、添加post接口</h3><p>在 <code>router/login.js</code> 中加入：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-bodyparser'</span><span class="token punctuation">)</span>login<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">bodyParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>login<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/register'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 可以打印得到数据</span>    ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"登录或注册"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、登录与自动注册"><a href="#5、登录与自动注册" class="headerlink" title="#5、登录与自动注册"></a><a href="http://codesohigh.com/subject/koa2/koa2.html#_5%E3%80%81%E7%99%BB%E5%BD%95%E4%B8%8E%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%86%8C">#</a>5、登录与自动注册</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token keyword">const</span> login <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-bodyparser'</span><span class="token punctuation">)</span><span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../utils/db'</span><span class="token punctuation">)</span><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span>login<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"登录页面"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>login<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">bodyParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>login<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/register'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> myaccount <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">.</span>account<span class="token punctuation">;</span>    <span class="token keyword">let</span> mypwd <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">.</span>pwd<span class="token punctuation">;</span>    <span class="token keyword">let</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`SELECT * FROM users WHERE account='</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>myaccount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'`</span></span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 能找到对应的账号</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pwd <span class="token operator">==</span> mypwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 账号密码正确，返回token</span>            ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>                token<span class="token punctuation">:</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                msg<span class="token punctuation">:</span> <span class="token string">'登录成功'</span><span class="token punctuation">,</span>                account<span class="token punctuation">:</span> myaccount            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 密码错误</span>            ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>                msg<span class="token punctuation">:</span> <span class="token string">'密码错误'</span><span class="token punctuation">,</span>                account<span class="token punctuation">:</span> myaccount            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 找不到对应的账号，直接插入一个</span>        <span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 生成token</span>            <span class="token keyword">const</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">{</span> myaccount<span class="token punctuation">:</span> myaccount<span class="token punctuation">,</span> mypwd<span class="token punctuation">:</span> mypwd <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'secret'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> expiresIn<span class="token punctuation">:</span> <span class="token number">3600</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`INSERT INTO users (account, pwd, token) values ('</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>myaccount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">', '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>mypwd<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">', '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">')`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> datas<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">throw</span> error<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 已插入数据，返回用户名与token</span>                <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>                    token<span class="token punctuation">,</span>                    msg<span class="token punctuation">:</span> <span class="token string">'登录成功'</span><span class="token punctuation">,</span>                    account<span class="token punctuation">:</span> myaccount                <span class="token punctuation">}</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> result1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> login<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时，前端做这个post请求后，就会得到相应的数据。</p><h2 id="十二、部署到服务器上"><a href="#十二、部署到服务器上" class="headerlink" title="#十二、部署到服务器上"></a><a href="http://codesohigh.com/subject/koa2/koa2.html#%E5%8D%81%E4%BA%8C%E3%80%81%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A">#</a>十二、部署到服务器上</h2><p>部署需要先购买服务器，下载filezilla软件。</p><p>服务器上需要安装node 、mysql、pm2</p><p>具体教程请参考下面这篇文章</p><p><a href="https://blog.csdn.net/yh8899abc/article/details/105201742">https://blog.csdn.net/yh8899abc/article/details/105201742</a></p><table><thead><tr><th>基于微信小程序的点餐系统 开题报告</th></tr></thead><tbody><tr><td>文章来源：<a href="http://www.biyezuopin.vip/">www.biyezuopin.vip</a>  发布者：毕业作品网站</td></tr><tr><td>毕业设计(论文)开题报告学生姓名专 业计算机科学与技术班 级指导教师姓名职 称教授工作单位北华航天工业学院课题来源学生自拟课题课题性质应用设计课题名称基于微信小程序的点餐系统本设计的科学依据（科学意义和应用前景，国内外研究概况，目前技术现状、水平和发展趋势等）1.科学意义和应用前景随着“互联网+”的大潮兴起，手机微信深受人的欢迎。随即带来的就是微信小程序凭借微信强大的用户基础及其应用的便捷而受人们热捧。此外微信小程序无需安装，扫描二维码或者微信内搜索即可自动快速打开。且小程序可以设计的很复杂，用户的体验也好。点餐系统的小程序更符合餐厅快进快出的节奏，提高用户消费的体验。也不会出现因为吃饭还需要关注店铺的公众号的困扰。2. 国内外研究概况1. 快进快出的使用场景2. 传统触屏机器的屏幕转移3. 与微信自身能力的深度结合。4. 使用成本低3.目前技术现状、水平和发展趋势1. 很多商家还未采用小程序点餐这种方式。随着科技的发展进步，未来小程序点餐将会受到商家的欢迎。2. 传统触屏机器已经跟不上时代的脚步，取代他的将是随身携带的手机。将技术与需求都与手机合为一体将会让人们的生活更加便利。3. 微信作为一款聊天软件，其用户数量之庞大，所以微信里面的小程序也会走到人们生活中去。4. 使用成本也是需要考虑的一部分。若只是单纯的满足顾客的点餐，没有必要在大费周章的做一个APP来使用。况且微信小程序也可以设计得比较复杂，满足顾客的需求。5. 创作小程序点餐，最终还是为了方便顾客，方便商家。设计内容和预期成果（具体设计内容和重点解决的技术问题、预期成果和提供的形式）1.设计内容1.注册登录引导功能，用户登录时引导用户前往账号注册界面。 2.信息管理功能，对使用用户的信息进行管理存储。 3.订单管理功能，能够与数据库进行互通。 4.评价管理功能，能让用户对此次消费进行评论，还包括对评论的添加和删除。 5.管理员对系统的管理功能，让商家使用小程序更方便。 6.管理员对订单的管理功能，能让商家登录后接受并确认用户的订单。 7.管理员对菜品的管理功能，让商家对菜品进行增删查改2.重点解决的技术问题（1）与数据库进行互通时利用localhost来建立连接 ，使得设备进行连接测试时处于同一网络环境中。（2）数据库的设计与实现。 （3）前端后端的设计与实现。（4）手机界面触碰滑动的调用与实现。3.预期成果预期成果主要包括如下几部分：（1）能够实现手机界面的滑动。（2）实现数据的录入，删除，修改。（3）实现用户登录后可以修改用户的基本信息，也可以退出。（4）实现在后台录入菜品信息后，菜品页面可以浏览并查看详细信息；支持通过查询来查找所需菜品。（5）实现顾客能够收藏喜欢的菜品。（6）实现菜品的选择，让顾客把想要点餐的菜品加入购物车。（7）实现结算页面能填写收货地址，或者在店内点餐都可以写下备注（8）实现订单的付款或取消。（9）实现顾客对菜品的评论。4.提供的形式实现的功能及解决方案以ppt形式呈现程序结构以ensp拓扑图形式呈现拟采取设计方法和技术支持（设计方案、技术要求、实验方法和步骤、可能遇到的问题和解决办法等）1.设计方案及技术要求<img src="20210906100133479001.png" alt="img">2.实验方法和步骤运用MySQL进行数据库存储，采用了JavaWeb和springboot框架作为后台开发，HTML+JS+CSS和微信web开发工具作为前端开发。凭借使用windows操作技术完成数据的录入、修改、删除。学习使用了手机界面触摸滑动的实现。3.可能遇到的问题和解决办法可能遇到的的问题1. 微信小程序可能会出现对隐私数据保护不全面。2. 手机界面触碰滑动的调用与实现问题。针对这些问题我们要注重保护隐私，加强数据安全的监管，对手机界面触碰滑动问题进行研究与学习。实现本项目预期目标和已具备的条件（包括过去学习、研究工作基础，现有主要仪器设备、设计环境及协作条件等）1.实现本项目预期目标（1）学习实现手机屏幕的触摸滑动（2）了解微信web开发工具的使用2.已具备的条件（1）能够熟练使用MySQL。（2）对HTML、JS、CSS熟练掌握。（3）熟练掌握Javaweb。各环节拟定阶段性工作进度(以周为单位)毕业设计分为两个阶段：第10学期：第13周～第16周——与指导教师沟通，完成毕业设计选题；第17周～第18周——完成毕业设计选题，确定毕业设计题目以及任务需求，并查询和所选题目的相关资料，提前搭建好所使用的平台以及软件。第11学期：第1周～第5周——完成三项文档的撰写；开始毕业设计，完成网络拓扑总体规划；第6周～第9周——研究关键技术，开始对自己的作品进行初步的设计，完成总体的框架设计；同时开始毕业论文的撰写第10周～第13周——对网络进行测试并检验是否存在故障，保障能良好的运行；按照任务书要求进行毕业设计成果完善，毕业设计论文修改等工作；第14周～第15周——完成毕业设计成果验收，撰写毕业设计报告和毕业设计验收答辩。</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>node操作mongo</title>
      <link href="/2021/10/28/node%E6%93%8D%E4%BD%9CMongo/"/>
      <url>/2021/10/28/node%E6%93%8D%E4%BD%9CMongo/</url>
      
        <content type="html"><![CDATA[<h2 id="node操作mongodb"><a href="#node操作mongodb" class="headerlink" title="node操作mongodb"></a>node操作mongodb</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><pre class="line-numbers language-js"><code class="language-js">npm install mongodb <span class="token operator">--</span>save <span class="token comment" spellcheck="true">// 或者</span>cnpm install mongodb <span class="token operator">--</span>save <span class="token comment" spellcheck="true">// 或者</span>yarn add mongodb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="node引入连接mongodb"><a href="#node引入连接mongodb" class="headerlink" title="node引入连接mongodb"></a>node引入连接mongodb</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 引入 mongodb</span><span class="token keyword">const</span> <span class="token punctuation">{</span>MongoClient<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongodb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定义数据库连接的地址</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">'mongodb://localhost:27017'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// const url = 'mongodb://admin:123456@localhost:27017/'; 有密码连接方式 admin 表示用户名，123456 表示密码</span><span class="token comment" spellcheck="true">// 定义要操作的数据库</span><span class="token keyword">const</span> dbName <span class="token operator">=</span> <span class="token string">'itying'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 连接数据库</span>MongoClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span> useUnifiedTopology<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>client<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 获取 db 对象 </span>  <span class="token keyword">const</span> db <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">db</span><span class="token punctuation">(</span>dbName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 操作完数据库后，一定要记得关闭</span>  client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="node-对数据进行增删改查"><a href="#node-对数据进行增删改查" class="headerlink" title="node 对数据进行增删改查"></a>node 对数据进行增删改查</h3><h4 id="Nodejs-查找-MongoDb-数据库的数据"><a href="#Nodejs-查找-MongoDb-数据库的数据" class="headerlink" title="Nodejs 查找 MongoDb 数据库的数据"></a>Nodejs 查找 MongoDb 数据库的数据</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span>MongoClient<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongodb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">'mongodb://localhost:27017'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// const url = 'mongodb://admin:123456@localhost:27017/'; 有密码连接方式 admin 表示用户名，123456 表示密码</span><span class="token comment" spellcheck="true">// 定义要操作的数据库</span><span class="token keyword">const</span> dbName <span class="token operator">=</span> <span class="token string">'itying'</span><span class="token punctuation">;</span>MongoClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span> useUnifiedTopology<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>client<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 获取 db 对象 </span>  <span class="token keyword">const</span> db <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">db</span><span class="token punctuation">(</span>dbName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 查找数据</span>  db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 操作完数据库后，一定要记得关闭</span>    client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Nodejs-给-MongoDb-增加数据"><a href="#Nodejs-给-MongoDb-增加数据" class="headerlink" title="Nodejs 给 MongoDb 增加数据"></a>Nodejs 给 MongoDb 增加数据</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span>MongoClient<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongodb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">'mongodb://localhost:27017'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// const url = 'mongodb://admin:123456@localhost:27017/'; 有密码连接方式 admin 表示用户名，123456 表示密码</span><span class="token comment" spellcheck="true">// 定义要操作的数据库</span><span class="token keyword">const</span> dbName <span class="token operator">=</span> <span class="token string">'itying'</span><span class="token punctuation">;</span>MongoClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span> useUnifiedTopology<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>client<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 获取 db 对象 </span>  <span class="token keyword">const</span> db <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">db</span><span class="token punctuation">(</span>dbName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 增加数据</span>  db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insertOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"测试者"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">17</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Nodejs-修改-MongoDb-数据"><a href="#Nodejs-修改-MongoDb-数据" class="headerlink" title="Nodejs 修改 MongoDb 数据"></a>Nodejs 修改 MongoDb 数据</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> MongoClient <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongodb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">'mongodb://localhost:27017'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// const url = 'mongodb://admin:123456@localhost:27017/'; 有密码连接方式 admin 表示用户名，123456 表示密码</span><span class="token comment" spellcheck="true">// 定义要操作的数据库</span><span class="token keyword">const</span> dbName <span class="token operator">=</span> <span class="token string">'itying'</span><span class="token punctuation">;</span>MongoClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span> useUnifiedTopology<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>client<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 获取 db 对象 </span>  <span class="token keyword">const</span> db <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">db</span><span class="token punctuation">(</span>dbName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 修改数据</span>  db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">updateOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"xiaoming"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>$<span class="token keyword">set</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Nodejs-删除-MongoDb-数据"><a href="#Nodejs-删除-MongoDb-数据" class="headerlink" title="Nodejs 删除 MongoDb 数据"></a>Nodejs 删除 MongoDb 数据</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> MongoClient <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongodb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">'mongodb://localhost:27017'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// const url = 'mongodb://admin:123456@localhost:27017/'; 有密码连接方式 admin 表示用户名，123456 表示密码</span><span class="token comment" spellcheck="true">// 定义要操作的数据库</span><span class="token keyword">const</span> dbName <span class="token operator">=</span> <span class="token string">'itying'</span><span class="token punctuation">;</span>MongoClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span> useUnifiedTopology<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>client<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 获取 db 对象 </span>  <span class="token keyword">const</span> db <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">db</span><span class="token punctuation">(</span>dbName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 删除一条数据</span>  db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">deleteOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"xiaoming"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 删除多条数据</span>  db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">deleteMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"设计者"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongo聚合管道</title>
      <link href="/2021/10/27/mongo%E9%AB%98%E7%BA%A7/"/>
      <url>/2021/10/27/mongo%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="mongodb高级"><a href="#mongodb高级" class="headerlink" title="mongodb高级"></a>mongodb高级</h2><h3 id="aggregate聚合管道"><a href="#aggregate聚合管道" class="headerlink" title="aggregate聚合管道"></a>aggregate聚合管道</h3><p>使用聚合管道可以对集合中的文档进行变换和组合。 </p><p>实际项目：表关联查询、数据的统计。</p><p>MongoDB 中使用 db.COLLECTION_NAME.aggregate([{},…]) 方法 来构建和使用聚合管道。。</p><h3 id="MongoDB-Aggregation-管道操作符与表达式"><a href="#MongoDB-Aggregation-管道操作符与表达式" class="headerlink" title="MongoDB Aggregation 管道操作符与表达式"></a>MongoDB Aggregation 管道操作符与表达式</h3><pre><code>管道操作符 Description $project 增加、删除、重命名字段$match 条件匹配。只满足条件的文档才能进入下 一阶段 $limit 限制结果的数量 $skip 跳过文档的数量 $sort 条件排序。$group 条件组合结果 统计 $lookup $lookup 操作符 用以引入其它集合的数据 （表关联查询）</code></pre><p>SQL 和 NOSQL 对比: </p><pre><code>WHERE         $match GROUP BY     $group HAVING         $matchSELECT         $project ORDER         BY $sort LIMIT         $limit SUM()         $sum COUNT()     $sum join         $looku</code></pre><h3 id="管道表达式"><a href="#管道表达式" class="headerlink" title="==管道表达式:=="></a>==管道表达式:==</h3><p>管道操作符作为“键”,所对应的“值”叫做管道表达式。 </p><p>例如{$match:{status:”A”}}，$match 称为管道操作符，而 status:”A”称为管道表达式， 是管道操作符的操作数(Operand)。 </p><p>每个管道表达式是一个文档结构，它是由字段名、字段值、和一些表达式操作符组成的。 </p><pre><code>常用表达式操作符 Description $addToSet 将文档指定字段的值去重 $max 文档指定字段的最大值 $min 文档指定字段的最小值 $sum 文档指定字段求和 $avg 文档指定字段求平均 $gt 大于给定值 $lt 小于给定值 $eq 等于给定</code></pre><h3 id="数据库的备份与恢复"><a href="#数据库的备份与恢复" class="headerlink" title="数据库的备份与恢复"></a>数据库的备份与恢复</h3><h4 id="数据库备份"><a href="#数据库备份" class="headerlink" title="数据库备份"></a>数据库备份</h4><p>1、常用命令格式</p><p>mongodump -h IP –port 端口 -u 用户名 -p 密码 -d 数据库 -c 表 -o 文件存放路径</p><p>参数说明：<br>-h 指明数据库宿主机的IP<br>–port 指明数据库的端口<br>-u 指明数据库的用户名<br>-p 指明数据库的密码<br>-d 指明数据库的名字<br>-c 指明collection的名字<br>-o 指明到要导出的文件名<br>-q 指明导出数据的过滤条件</p><p>2.、导出所有数据库</p><pre><code>mongodump -o D:\mongodump</code></pre><p>3、 导出指定数据库</p><pre><code>mongodump -h 127.0.0.1:27017 -d jackson_YingQi -o D:\mongodump</code></pre><h4 id="数据库恢复"><a href="#数据库恢复" class="headerlink" title="数据库恢复"></a>数据库恢复</h4><p>1、 常用命令格式</p><p>mongorestore -h IP –port 端口 -u 用户名 -p 密码 -d 数据库 –drop 文件存在路径</p><ul><li><p>–drop：</p><p>恢复的时候，先删除当前数据，然后恢复备份的数据。就是说，恢复后，备份后添加修改的数据都会被删除，慎用哦！</p></li><li><p><path>：</path></p><p>mongorestore 最后的一个参数，设置备份数据所在位置，例如：c:\data\dump\test。</p><p>你不能同时指定 <path> 和 –dir 选项，–dir也可以设置备份目录。</path></p></li><li><p>–dir：</p><p>指定备份的目录</p><p>你不能同时指定 <path> 和 –dir 选项。</path></p></li></ul><p>–drop：先删除所有的记录，然后恢复. 慎用</p><pre><code>mongorestore -h 127.0.0.1:27017 -d jackson_YingQi --drop D:\mongodump\jackson_YingQi #删除jackson_YingQi数据库 在恢复备份的数据 </code></pre><p>2、恢复所有数据库到mongodb中</p><pre><code>mongorestore D:\mongodump #所有库的备份路径</code></pre><p>3、恢复指定的数据库</p><pre><code>mongorestore -h 127.0.0.1:27017 -d jackson_YingQi --dir D:\mongodump\jackson_YingQi #jackson_YingQi 这个数据库的备份路径mongorestore -h 127.0.0.1:27017 -d jackson_YingQi_new --dir D:\mongodump\jackson_YingQi #将jackson_YingQi 备份数据还原到jackson_YingQi_new 数据库中</code></pre>]]></content>
      
      
      <categories>
          
          <category> mongo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongodb用户权限设置</title>
      <link href="/2021/10/23/mongo%E8%B6%85%E7%BA%A7%E7%94%A8%E6%88%B7%E8%AE%BE%E7%BD%AE/"/>
      <url>/2021/10/23/mongo%E8%B6%85%E7%BA%A7%E7%94%A8%E6%88%B7%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="mongo用户权限配置"><a href="#mongo用户权限配置" class="headerlink" title="mongo用户权限配置"></a>mongo用户权限配置</h1><p>1、启动 mongo</p><p>2、 进入数据库 use admin</p><p>3、 创建用户 </p><pre><code>db.createUser({    user:'admin',     pwd:'123456',     roles:[{role:'root',db:'admin'}]})</code></pre><p>4、 打开mongodb安装目录下的mongod.cfg文件 添加如下配置</p><pre><code>配置：注意缩进 不然后续可能出现重启服务失败security:    authorization: enabled </code></pre><p>5、 重启mongdb服务</p><pre><code>     win + r 输入 services.msc 找到对应服务重启</code></pre><p>6、 用超级管理员身份链接数据库</p><pre><code>mongo admin -u 用户名 -p 密码</code></pre><h1 id="为某数据库创建一个只能访问-本数据库的用户"><a href="#为某数据库创建一个只能访问-本数据库的用户" class="headerlink" title="为某数据库创建一个只能访问 本数据库的用户"></a>为某数据库创建一个只能访问 本数据库的用户</h1><pre><code>use eggcmsdb.createUser({    user: "eggadmin",    pwd: "123456",     roles:     [ { role: "dbOwner", db: "eggcms" } ]})</code></pre><h1 id="mongodb数据库角色"><a href="#mongodb数据库角色" class="headerlink" title="mongodb数据库角色"></a>mongodb数据库角色</h1><p>1.数据库用户角色：read、readWrite; </p><p>2.数据库管理角色：dbAdmin、dbOwner、userAdmin；</p><p> 3.集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager； </p><p>4.备份恢复角色：backup、restore； </p><p>5.所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、 dbAdminAnyDatabase</p><p> 6.超级用户角色：root</p><h1 id="Mongodb-账户权限配置中常用的命令"><a href="#Mongodb-账户权限配置中常用的命令" class="headerlink" title="Mongodb 账户权限配置中常用的命令"></a>Mongodb 账户权限配置中常用的命令</h1><pre><code>1、show users; #查看当前库下的用户2、db.dropUser("eggadmin") #删除用户3、db.updateUser( "admin",{pwd:"password"}); #修改用户密码4、db.auth("admin","password"); #密码认证</code></pre>]]></content>
      
      
      <categories>
          
          <category> mongo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongodb基本语法</title>
      <link href="/2021/10/22/mongodb%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2021/10/22/mongodb%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<ul><li><h3 id="命令行-终端-启动命令"><a href="#命令行-终端-启动命令" class="headerlink" title="命令行(终端)启动命令"></a>命令行(终端)启动命令</h3><ul><li>mongod : 运行服务端</li><li>mongo: 启动客户端</li></ul></li><li><p>查看帮助命令,默认端口,日志位置</p><ul><li>查看帮助：mongod –help</li><li>查看是否启动成功：ps ajx|grep mongod</li><li>默认端⼝：27017</li><li>日志的位置：/var/log/mongodb/mongod.log</li></ul></li><li><p>mongodb客户端</p><ul><li>启动本地客户端:mongo</li><li>查看帮助：mongo –help</li><li>退出：exit或者ctrl+c</li></ul></li></ul><h3 id="mongo中的数据类型"><a href="#mongo中的数据类型" class="headerlink" title="mongo中的数据类型"></a>mongo中的数据类型</h3><pre><code>Object ID： ⽂档IDString： 字符串， 最常⽤， 必须是有效的UTF-8Boolean： 存储⼀个布尔值， true或falseInteger： 整数可以是32位或64位， 这取决于服务器Double： 存储浮点值Arrays： 数组或列表， 多个值存储到⼀个键Object： ⽤于嵌⼊式的⽂档， 即⼀个值为⼀个⽂档Null： 存储Null值Timestamp： 时间戳， 表示从1970-1-1到现在的总秒数Date： 存储当前⽇期或时间的UNIX时间格式</code></pre><h3 id="操作数据库命令"><a href="#操作数据库命令" class="headerlink" title="操作数据库命令"></a>操作数据库命令</h3><pre class="line-numbers language-tex"><code class="language-tex">查看当前的数据库：db查看所有的数据库：show dbs /show databases切换数据库：use db_name删除当前的数据库：db.dropDatabase()切换到没有的数据库, 添加数据会自动创建显示当前数据库状态：db.stats()当前数据库版本：db.version()查看当前数据库的链接机器地址：db.getMongo()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="操作集合的命令"><a href="#操作集合的命令" class="headerlink" title="操作集合的命令"></a>操作集合的命令</h3><pre><code>不手动创建集合：向不存在的集合中第⼀次加⼊数据时， 集合会被创建出来手动创建结合：创建用户：db.createUser({user:"laowang",pwd:"123456",roles:[{role:"userAdmin",db:"stu"}]}) db.createCollection(name,options)db.createCollection("stu")db.createCollection("sub", { capped : true, size : 10 } )参数capped： 默认值为false表示不设置上限,值为true表示设置上限参数size： 当capped值为true时， 需要指定此参数， 表示上限⼤⼩,单位为字节当⽂档达到上限时， 会将之前的数据覆盖， 最早添加的数据移出, 其余上移, 最后添加在最后一条显示当前所以用户：show  users删除用户：db.removeUser("userName")查看集合：show collections删除集合：db.集合名称.drop()</code></pre><h3 id="文档增删改查"><a href="#文档增删改查" class="headerlink" title="文档增删改查"></a>文档增删改查</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 插入数据</span>db<span class="token punctuation">.</span>集合名称<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span>插⼊⽂档时， 如果不指定_id参数， MongoDB会为⽂档分配⼀个唯⼀的ObjectId类型的_iddb<span class="token punctuation">.</span>stu<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'gj'</span><span class="token punctuation">,</span>gender<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>stu<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>_id<span class="token punctuation">:</span><span class="token string">"20170101"</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">'gj'</span><span class="token punctuation">,</span>gender<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>插入单条指定为字典<span class="token punctuation">,</span> 插入多条指定为列表<span class="token comment" spellcheck="true">// 保存</span>db<span class="token punctuation">.</span>集合名称<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span>如果⽂档的_id已经存在则修改， 如果⽂档的_id不存在则添加区别于<span class="token punctuation">:</span> insert如果存在直接报错<span class="token comment" spellcheck="true">// 简单查询:</span>db<span class="token punctuation">.</span>集合名称<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 更新</span>语法<span class="token punctuation">:</span> db<span class="token punctuation">.</span>集合名称<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>query<span class="token operator">></span> <span class="token punctuation">,</span><span class="token operator">&lt;</span>update<span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">{</span>multi<span class="token punctuation">:</span> <span class="token operator">&lt;</span>boolean<span class="token operator">></span><span class="token punctuation">}</span><span class="token punctuation">)</span>参数query<span class="token punctuation">:</span>查询条件参数update<span class="token punctuation">:</span>更新操作符参数multi<span class="token punctuation">:</span>可选， 默认是<span class="token boolean">false</span>，表示只更新找到的第⼀条记录， 值为<span class="token boolean">true</span>表示把满⾜条件的⽂档全部更新举例<span class="token punctuation">:</span>注意：<span class="token string">"multi update only works with $ operators"</span> 更新全部<span class="token punctuation">,</span>必须使用$<span class="token keyword">set</span>db<span class="token punctuation">.</span>stu<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'hr'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'mnc'</span><span class="token punctuation">}</span><span class="token punctuation">)</span> 更新一条<span class="token punctuation">,</span>没有更新的字段会丢弃<span class="token punctuation">.</span>db<span class="token punctuation">.</span>stu<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'hr'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>$<span class="token keyword">set</span><span class="token punctuation">:</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'hys'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span> 更新一条db<span class="token punctuation">.</span>stu<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>$<span class="token keyword">set</span><span class="token punctuation">:</span><span class="token punctuation">{</span>gender<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>multi<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span> 更新全部<span class="token comment" spellcheck="true">// 删除</span>语法<span class="token punctuation">:</span> db<span class="token punctuation">.</span>集合名称<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>query<span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">{</span>justOne<span class="token punctuation">:</span> <span class="token operator">&lt;</span>boolean<span class="token operator">></span><span class="token punctuation">}</span><span class="token punctuation">)</span>参数query<span class="token punctuation">:</span>可选，删除的⽂档的条件参数justOne<span class="token punctuation">:</span>可选， 如果设为<span class="token boolean">true</span>或<span class="token number">1</span>， 则只删除⼀条， 默认<span class="token boolean">false</span>， 表示删除多条 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> mongo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>性能优化之强缓存</title>
      <link href="/2021/10/21/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2021/10/21/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是性能"><a href="#什么是性能" class="headerlink" title="什么是性能"></a>什么是性能</h1><p>从浏览器开启的那一刻，到代码运行起消耗的一切资源（浏览器，服务器，文件网络）的一切都是性能</p><p>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</p><h2 id="性能优化好处"><a href="#性能优化好处" class="headerlink" title="性能优化好处"></a>性能优化好处</h2><ul><li>提高用户体验</li><li>节约资源</li></ul><h1 id="如何优化-浏览器层面"><a href="#如何优化-浏览器层面" class="headerlink" title="如何优化(浏览器层面)"></a>如何优化(浏览器层面)</h1><h2 id="浏览器缓存策略"><a href="#浏览器缓存策略" class="headerlink" title="浏览器缓存策略"></a>浏览器缓存策略</h2><h3 id="1、-强缓存"><a href="#1、-强缓存" class="headerlink" title="1、 强缓存"></a>1、 强缓存</h3><p>特点<br>强缓存中，当请求再次发出时，浏览器会判断目标资源是否 “命中” 强缓存，如果命中则直接从缓存中获取资源，不会再与服务端发生通信。</p><p>在 Chrome 中，命中强缓存的情况下， Network 中显示的 HTTP 状态码是 200</p><h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><p>强制缓存的请求结果有两种情况：</p><ul><li>命中缓存</li><li>未命中缓存<br><img src="https://cdn.jsdelivr.net/gh/wqx8821/image-host/tyimg/202110121952153.png"></li></ul><p>是否强缓存由以下 3 个 Header 属性共同来控制：</p><p>Expires<br>Expires 的值是一个 HTTP 日期，当服务器返回响应时，在 Response Headers 中将过期时间写入 Expires 字段。</p><p>在浏览器发起请求时，会根据系统时间和 Expires 的值进行比较，如果系统时间超过了 Expires 的值，缓存失效，会继续从服务器获取资源</p><h4 id="Cache-Control（重点）"><a href="#Cache-Control（重点）" class="headerlink" title="==Cache-Control（重点）=="></a>==Cache-Control（重点）==</h4><p>是 HTTP 1.1 中新增的属性，为了弥补 Expires 缺陷提出的，提供了更精确细致的缓存功能。Cache-Control 在请求头和响应头中都可以使用</p><p>Pragma<br>Pragma 只有一个属性值，就是 no-cache ，效果和 Cache-Control 中的 no-cache 一致，不使用强缓存，需要与服务器验证缓存是否新鲜，在 3 个头部属性中的优先级最高。</p><h2 id="2、-协商缓存"><a href="#2、-协商缓存" class="headerlink" title="2、 协商缓存"></a>2、 协商缓存</h2>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm相关</title>
      <link href="/2021/10/19/npm%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/10/19/npm%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1、nvm"><a href="#1、nvm" class="headerlink" title="1、nvm"></a>1、nvm</h2><p><strong>1.1 Mac 安装 nvm</strong></p><pre><code>https://github.com/nvm-sh/nvm/blob/master/README.md</code></pre><p><strong>1.2 Windows 安装 nvm</strong></p><pre><code>nvm-windowsnodist</code></pre><h2 id="2、npm"><a href="#2、npm" class="headerlink" title="2、npm"></a>2、npm</h2><h4 id="2-1-全局安装package"><a href="#2-1-全局安装package" class="headerlink" title="2.1 全局安装package"></a>2.1 全局安装package</h4><pre><code>$ npm install forever --global (-g)$ forever$ npm uninstall forever --global$ forever</code></pre><p><strong>全局安装包的目录</strong></p><ul><li><p>Mac</p><pre><code>/Users/felix/.nvm/versions/node/nvm各个版本/bin/</code></pre></li><li><p>Windows</p><pre><code>C:\Users\你的用户名\AppData\Roaming\npm\node_modules</code></pre></li></ul><h4 id="2-2-本地安装package"><a href="#2-2-本地安装package" class="headerlink" title="2.2 本地安装package"></a>2.2 本地安装package</h4><pre><code>$ cd ~/desktop$ mkdir gp-project$ cd gp-project$ npm install underscore$ npm list (ls)</code></pre><h4 id="2-3-package-json初始化"><a href="#2-3-package-json初始化" class="headerlink" title="2.3 package.json初始化"></a>2.3 package.json初始化</h4><pre><code>$ pwd$ npm init -y$ ls$ cat package.json</code></pre><h4 id="2-4-使用package-json"><a href="#2-4-使用package-json" class="headerlink" title="2.4 使用package.json"></a>2.4 使用package.json</h4><pre><code>$ npm install underscore --save$ cat package.json$ npm install lodash --save-dev$ cat package.json$ rm -rf node_modules$ ls$ npm install$ npm uninstall underscore --save$ npm list | grep underscore$ cat package.json</code></pre><h4 id="2-5-安装指定版本的包"><a href="#2-5-安装指定版本的包" class="headerlink" title="2.5 安装指定版本的包"></a>2.5 安装指定版本的包</h4><pre><code>$ pwd$ npm list$ npm info underscore$ npm view underscore versions$ npm install underscore@1.8.0$ npm list$ npm uninstall underscore$ npm list</code></pre><h4 id="2-6-更新本地安装的包"><a href="#2-6-更新本地安装的包" class="headerlink" title="2.6 更新本地安装的包"></a>2.6 更新本地安装的包</h4><pre><code>$ npm info underscore$ npm view underscore versions$ npm install underscore@1.4.4 --save-dev$ npm list | grep gulp$ npm outdated //~2.0.0表示patch, ^2.0.0表示minor * 表示xx最新版本$ npm list | grep gulp$ npm update</code></pre><h4 id="2-7-清除缓存"><a href="#2-7-清除缓存" class="headerlink" title="2.7 清除缓存"></a>2.7 清除缓存</h4><pre><code>npm cache clean --force</code></pre><h4 id="2-8-上传自己的包"><a href="#2-8-上传自己的包" class="headerlink" title="2.8 上传自己的包"></a>2.8 上传自己的包</h4><h6 id="2-8-1-编写模块"><a href="#2-8-1-编写模块" class="headerlink" title="2.8.1 编写模块"></a>2.8.1 编写模块</h6><p>保存为index.js</p><pre class="line-numbers language-js"><code class="language-js">exports<span class="token punctuation">.</span>sayHello <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token string">'Hello World'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="2-8-2-初始化包描述文件"><a href="#2-8-2-初始化包描述文件" class="headerlink" title="2.8.2 初始化包描述文件"></a>2.8.2 初始化包描述文件</h6><p>$ npm init package.json</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>   <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"gp19-npm"</span><span class="token punctuation">,</span>   <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.1"</span><span class="token punctuation">,</span>   <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"gp19 self module"</span><span class="token punctuation">,</span>   <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>     <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"make test"</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token property">"repository"</span><span class="token operator">:</span> <span class="token punctuation">{</span>     <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"Git"</span><span class="token punctuation">,</span>     <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"git+https://github.com/lurongtao/gp19-npm.git"</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span>     <span class="token string">"demo"</span>   <span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"Felixlu"</span><span class="token punctuation">,</span>   <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>   <span class="token property">"bugs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>     <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://github.com/lurongtao/gp19-npm/issues"</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token property">"homepage"</span><span class="token operator">:</span> <span class="token string">"https://github.com/lurongtao/gp19-npm#readme"</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="2-8-3-注册npm仓库账号"><a href="#2-8-3-注册npm仓库账号" class="headerlink" title="2.8.3 注册npm仓库账号"></a>2.8.3 注册npm仓库账号</h6><pre><code>https://www.npmjs.com 上面的账号felix_lurt/qqmko09ijn$ npm adduser</code></pre><h6 id="2-8-4-上传包"><a href="#2-8-4-上传包" class="headerlink" title="2.8.4 上传包"></a>2.8.4 上传包</h6><pre><code>$ npm publish</code></pre><p>坑：403 Forbidden</p><pre><code>查看npm源：npm config get registry切换npm源方法一：npm config set registry http://registry.npmjs.org切换npm源方法二：nrm use npm</code></pre><h6 id="2-8-5-安装包"><a href="#2-8-5-安装包" class="headerlink" title="2.8.5 安装包"></a>2.8.5 安装包</h6><pre><code>$ npm install gp19-npm</code></pre><h6 id="2-8-6-卸载包"><a href="#2-8-6-卸载包" class="headerlink" title="2.8.6 卸载包"></a>2.8.6 卸载包</h6><pre><code>查看当前项目引用了哪些包 ：npm ls卸载包：npm unpublish --force</code></pre><h6 id="2-8-7-使用引入包"><a href="#2-8-7-使用引入包" class="headerlink" title="2.8.7 使用引入包"></a>2.8.7 使用引入包</h6><pre><code>var hello = require('gp19-npm')hello.sayHello()</code></pre><h4 id="2-9-npm-脚本"><a href="#2-9-npm-脚本" class="headerlink" title="2.9 npm 脚本"></a>2.9 npm 脚本</h4><p>Node 开发离不开 npm，而脚本功能是 npm 最强大、最常用的功能之一。</p><p><strong>一、什么是 npm 脚本？</strong></p><p>npm 允许在 package.json 文件里面，使用 scripts 字段定义脚本命令。</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  // ...  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"node build.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>二、执行顺序</strong></p><p>如果 npm 脚本里面需要执行多个任务，那么需要明确它们的执行顺序。</p><p>script1.js</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>script2.js</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token string">"script1"</span><span class="token punctuation">:</span> <span class="token string">"node script1.js"</span><span class="token punctuation">,</span>  <span class="token string">"script2"</span><span class="token punctuation">:</span> <span class="token string">"node script2.js"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是并行执行（即同时的平行执行），可以使用 <code>&amp;</code> 符号。</p><pre><code>$ npm run script1 &amp; npm run script2</code></pre><p>如果是继发执行（即只有前一个任务成功，才执行下一个任务），可以使用 <code>&amp;&amp;</code> 符号。</p><pre><code>$ npm run script1 &amp;&amp; npm run script2</code></pre><p><strong>三、简写形式</strong></p><p>常用的 npm 脚本简写形式。</p><pre><code>npm start 是 npm run start</code></pre><p><strong>四、变量</strong></p><p>npm 脚本有一个非常强大的功能，就是可以使用 npm 的内部变量。</p><p>首先，通过 <code>npm_package_</code> 前缀，npm 脚本可以拿到 package.json 里面的字段。比如，下面是一个 package.json。</p><blockquote><p>注意：一定要在 npm 脚本中运行（如：npm run view）才可以，直接在命令行中运行JS（如：node view.js）是拿不到值的</p></blockquote><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"foo"</span><span class="token punctuation">,</span>   <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.2.5"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"view"</span><span class="token operator">:</span> <span class="token string">"node view.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么，变量 npm_package_name 返回 foo，变量 npm_package_version 返回 1.2.5。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// view.js</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>npm_package_name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// foo</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>npm_package_version<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1.2.5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面代码中，我们通过环境变量 process.env 对象，拿到 package.json 的字段值。如果是 Bash 脚本，可以用$npm_package_name 和 $npm_package_version 取到这两个值。</p><p>npm<em>package</em>前缀也支持嵌套的package.json字段。</p><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"repository"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"git"</span><span class="token punctuation">,</span>  <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"xxx"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>scripts<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"view"</span><span class="token operator">:</span> <span class="token string">"echo $npm_package_repository_type"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中，repository 字段的 type 属性，可以通过 npm_package_repository_type 取到。</p><p>下面是另外一个例子。</p><pre><code>"scripts": {  "install": "foo.js"}</code></pre><p>上面代码中，npm_package_scripts_install 变量的值等于 foo.js。</p><p>然后，npm 脚本还可以通过 npm<em>config</em> 前缀，拿到 npm 的配置变量，即 npm config get xxx 命令返回的值。比如，当前模块的发行标签，可以通过 npm_config_tag 取到。</p><pre><code>"view": "echo $npm_config_tag",</code></pre><p>注意，package.json 里面的 config 对象，可以被环境变量覆盖。</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>   <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"foo"</span><span class="token punctuation">,</span>  <span class="token property">"config"</span> <span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"port"</span> <span class="token operator">:</span> <span class="token string">"8080"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span> <span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"start"</span> <span class="token operator">:</span> <span class="token string">"node server.js"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中，npm_package_config_port 变量返回的是 8080。这个值可以用下面的方法覆盖。</p><pre><code>$ npm config set foo:port 80</code></pre><p>最后，env命令可以列出所有环境变量。</p><p>“env”: “env”</p><h4 id="2-10-npm-安装-git-上发布的包"><a href="#2-10-npm-安装-git-上发布的包" class="headerlink" title="2.10 npm 安装 git 上发布的包"></a>2.10 npm 安装 git 上发布的包</h4><pre><code># 这样适合安装公司内部的git服务器上的项目npm install git+https://git@github.com:lurongtao/gp-project.git# 或者以ssh的方式npm install git+ssh://git@github.com:lurongtao/gp-project.git</code></pre><h4 id="2-11-cross-env-使用"><a href="#2-11-cross-env-使用" class="headerlink" title="2.11 cross-env 使用"></a>2.11 cross-env 使用</h4><h5 id="2-11-1-cross-env是什么"><a href="#2-11-1-cross-env是什么" class="headerlink" title="2.11.1 cross-env是什么"></a>2.11.1 cross-env是什么</h5><p>运行跨平台设置和使用环境变量的脚本</p><h5 id="2-11-2-出现原因"><a href="#2-11-2-出现原因" class="headerlink" title="2.11.2 出现原因"></a>2.11.2 出现原因</h5><p>当您使用 NODE_ENV=production, 来设置环境变量时，大多数 Windows 命令提示将会阻塞(报错)。（异常是Windows上的Bash，它使用本机Bash。）换言之，Windows 不支持 NODE_ENV=production 的设置方式。</p><h5 id="2-11-3-解决"><a href="#2-11-3-解决" class="headerlink" title="2.11.3 解决"></a>2.11.3 解决</h5><p>cross-env 使得您可以使用单个命令，而不必担心为平台正确设置或使用环境变量。这个迷你的包(cross-env)能够提供一个设置环境变量的 scripts，让你能够以 Unix 方式设置环境变量，然后在 Windows 上也能兼容运行。</p><h5 id="2-11-4-安装"><a href="#2-11-4-安装" class="headerlink" title="2.11.4 安装"></a>2.11.4 安装</h5><p>npm install –save-dev cross-env</p><h5 id="2-11-5-使用"><a href="#2-11-5-使用" class="headerlink" title="2.11.5 使用"></a>2.11.5 使用</h5><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"cross-env NODE_ENV=production webpack --config build/webpack.config.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>NODE_ENV环境变量将由 cross-env 设置 打印 process.env.NODE_ENV === ‘production’</p><h3 id="3、NRM-npm-registry-manager"><a href="#3、NRM-npm-registry-manager" class="headerlink" title="3、NRM: npm registry manager"></a>3、NRM: npm registry manager</h3><h4 id="3-1-手工切换源"><a href="#3-1-手工切换源" class="headerlink" title="3.1 手工切换源"></a>3.1 手工切换源</h4><h5 id="3-1-1-查看当前源"><a href="#3-1-1-查看当前源" class="headerlink" title="3.1.1 查看当前源"></a>3.1.1 查看当前源</h5><pre><code>npm config get registry</code></pre><h5 id="3-1-2-切换淘宝源"><a href="#3-1-2-切换淘宝源" class="headerlink" title="3.1.2 切换淘宝源"></a>3.1.2 切换淘宝源</h5><pre><code>npm config set registry https://registry.npm.taobao.org</code></pre><h4 id="3-2-NRM-管理源"><a href="#3-2-NRM-管理源" class="headerlink" title="3.2 NRM 管理源"></a>3.2 NRM 管理源</h4><p>NRM (npm registry manager)是npm的镜像源管理工具，有时候国外资源太慢，使用这个就可以快速地在 npm 源间切换。</p><h5 id="3-2-1-安装-nrm"><a href="#3-2-1-安装-nrm" class="headerlink" title="3.2.1 安装 nrm"></a>3.2.1 安装 nrm</h5><p>在命令行执行命令，npm install -g nrm，全局安装nrm。</p><h5 id="3-2-2-使用-nrm"><a href="#3-2-2-使用-nrm" class="headerlink" title="3.2.2 使用 nrm"></a>3.2.2 使用 nrm</h5><p>执行命令 nrm ls 查看可选的源。 其中，带*的是当前使用的源，上面的输出表明当前源是官方源。</p><h5 id="3-2-3-切换-nrm"><a href="#3-2-3-切换-nrm" class="headerlink" title="3.2.3 切换 nrm"></a>3.2.3 切换 nrm</h5><p>如果要切换到taobao源，执行命令nrm use taobao。</p><h5 id="3-2-4-测试速度"><a href="#3-2-4-测试速度" class="headerlink" title="3.2.4 测试速度"></a>3.2.4 测试速度</h5><p>你还可以通过 nrm test 测试相应源的响应时间。</p><pre><code>nrm test</code></pre><h3 id="4、NPX-npm-package-extention"><a href="#4、NPX-npm-package-extention" class="headerlink" title="4、NPX: npm package extention"></a>4、NPX: npm package extention</h3><p>npm 从5.2版开始，增加了 npx 命令。它有很多用处，本文介绍该命令的主要使用场景。</p><p>Node 自带 npm 模块，所以可以直接使用 npx 命令。万一不能用，就要手动安装一下。</p><pre><code>$ npm install -g npx</code></pre><h4 id="4-1-调用项目安装的模块"><a href="#4-1-调用项目安装的模块" class="headerlink" title="4.1 调用项目安装的模块"></a>4.1 调用项目安装的模块</h4><p>npx 想要解决的主要问题，就是调用项目内部安装的模块。比如，项目内部安装了Mocha。</p><pre><code>$ npm install -D mocha</code></pre><p>一般来说，调用 Mocha ，只能在项目脚本和 package.json 的scripts字段里面，如果想在命令行下调用，必须像下面这样。</p><pre><code># 项目的根目录下执行$ node-modules/.bin/mocha --version</code></pre><p>npx 就是想解决这个问题，让项目内部安装的模块用起来更方便，只要像下面这样调用就行了。</p><pre><code>$ npx mocha --version</code></pre><p>npx 的原理很简单，就是运行的时候，会到node_modules/.bin路径和环境变量$PATH里面，检查命令是否存在。</p><p>由于 npx 会检查环境变量$PATH，所以系统命令也可以调用。</p><pre><code># 等同于 ls$ npx ls</code></pre><p>注意，Bash 内置的命令不在$PATH里面，所以不能用。比如，cd是 Bash 命令，因此就不能用npx cd。</p><h4 id="4-2-避免全局安装模块"><a href="#4-2-避免全局安装模块" class="headerlink" title="4.2 避免全局安装模块"></a>4.2 避免全局安装模块</h4><p>除了调用项目内部模块，npx 还能避免全局安装的模块。比如，create-react-app 这个模块是全局安装，npx 可以运行它，而且不进行全局安装。</p><pre><code>$ npx create-react-app my-react-app</code></pre><p>上面代码运行时，npx 将 create-react-app 下载到一个临时目录，使用以后再删除。所以，以后再次执行上面的命令，会重新下载 create-react-app。</p><p>注意，只要 npx 后面的模块无法在本地发现，就会下载同名模块。比如，本地没有安装http-server模块，下面的命令会自动下载该模块，在当前目录启动一个 Web 服务。</p><pre><code>$ npx http-server</code></pre><h4 id="4-3-–no-install-参数和-–ignore-existing-参数"><a href="#4-3-–no-install-参数和-–ignore-existing-参数" class="headerlink" title="4.3 –no-install 参数和 –ignore-existing 参数"></a>4.3 –no-install 参数和 –ignore-existing 参数</h4><p>如果想让 npx 强制使用本地模块，不下载远程模块，可以使用–no-install参数。如果本地不存在该模块，就会报错。</p><pre><code>$ npx --no-install http-server</code></pre><p>反过来，如果忽略本地的同名模块，强制安装使用远程模块，可以使用–ignore-existing参数。比如，本地已经安装了http-server，但还是想使用远程模块，就用这个参数。</p><pre><code>$ npx --ignore-existing http-server</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git笔记</title>
      <link href="/2021/10/16/git%E7%9B%B8%E5%85%B3/"/>
      <url>/2021/10/16/git%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="Git笔记"><a href="#Git笔记" class="headerlink" title="Git笔记"></a>Git笔记</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><p>Git是分布式管理仓库，而SVN是集中式（CVS）管理的代表。CVS是保存文件修改的历史记录（文件变更的列表），Git是记录文件及其修改的快照并存储相应索引。</p><h2 id="2-命令"><a href="#2-命令" class="headerlink" title="2. 命令"></a>2. 命令</h2><h3 id="2-1-安装配置"><a href="#2-1-安装配置" class="headerlink" title="2.1 安装配置"></a>2.1 安装配置</h3><h4 id="2-1-1-安装好Git后先全局配置用户信息"><a href="#2-1-1-安装好Git后先全局配置用户信息" class="headerlink" title="2.1.1 安装好Git后先全局配置用户信息"></a>2.1.1 安装好Git后先全局配置用户信息</h4><p>用户名、邮箱。如果在某个项目中需要使用其他用户，可以在项目根目录下去掉’global’单独配置。</p><pre class="line-numbers language-shell"><code class="language-shell">git config --global user.name "John Doe"git config --global user.email johndoe@example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-1-2-检查配置信息"><a href="#2-1-2-检查配置信息" class="headerlink" title="2.1.2 检查配置信息"></a>2.1.2 检查配置信息</h4><p>如果想要检查你的配置，可以使用 git config –list 命令来列出所有 Git 当时能找到的配置  </p><pre class="line-numbers language-shell"><code class="language-shell">git config --list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你可能会看到重复的变量名，因为 Git 会从不同的文件中读取同一个配置（例如：/etc/gitconfig 与 ~/.gitconfig）。 这种情况下，Git 会使用它找到的每一个变量的最后一个配置。</p><p>你可以通过输入 git config &lt;key&gt;： 来检查 Git 的某一项配置<br>可以根据key修改以上的值：git config &lt;key&gt; &lt;value&gt;  </p><h2 id="1-把本地代码推到远程仓库"><a href="#1-把本地代码推到远程仓库" class="headerlink" title="1. 把本地代码推到远程仓库"></a>1. 把本地代码推到远程仓库</h2><p>1.1 上github新建仓库，不选新建README，懒得再解决冲突<br>1.2 （先进入项目文件夹）通过命令 git init 把这个目录变成git可以管理的仓库，记得创建.gitignore文件忽略上传某些文件。  </p><pre class="line-numbers language-shell"><code class="language-shell">git init  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1.3 把文件添加到版本库中，使用命令 git add .添加到暂存区里面去，不要忘记后面的小数点“.”，意为添加文件夹下的所有文件  </p><pre class="line-numbers language-shell"><code class="language-shell">git add .  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1.4 用命令 git commit告诉Git，把文件提交到仓库。引号内为提交说明  </p><pre class="line-numbers language-shell"><code class="language-shell">git commit -m 'first commit'  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1.5 关联到远程库  </p><pre class="line-numbers language-shell"><code class="language-shell">git remote add origin 你的远程库地址  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1.6 获取远程库与本地同步合并（如果远程库不为空必须做这一步，否则后面的提交会失败）  </p><pre class="line-numbers language-shell"><code class="language-shell">git pull --rebase origin main  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1.7 把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程。执行此命令后会要求输入用户名、密码，验证通过后即开始上传。  </p><pre class="line-numbers language-shell"><code class="language-shell">git push -u origin main  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6入门学习</title>
      <link href="/2021/10/11/es6%E5%88%9D%E5%A7%8B%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/10/11/es6%E5%88%9D%E5%A7%8B%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="ES6标准入门学习总结"><a href="#ES6标准入门学习总结" class="headerlink" title="ES6标准入门学习总结"></a>ES6标准入门学习总结</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><h2 id="2-let和const"><a href="#2-let和const" class="headerlink" title="2. let和const"></a>2. let和const</h2><p>const申明的常量只是在内存中的地址不变，指针不变。如果常量是个复杂类型，依然可以修改。如果把一个常量再次赋值给新变量，再覆盖新变量，常量是不会修改的。  </p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> age<span class="token punctuation">:</span> <span class="token number">29</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span>  a<span class="token punctuation">;</span>b<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// a.age === b.age === 30</span>b <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// a依然是{ age: 30 }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-变量解构赋值"><a href="#3-变量解构赋值" class="headerlink" title="3. 变量解构赋值"></a>3. 变量解构赋值</h2><h2 id="4-字符串扩展"><a href="#4-字符串扩展" class="headerlink" title="4. 字符串扩展"></a>4. 字符串扩展</h2><h3 id="4-1-ES6前常用的方法"><a href="#4-1-ES6前常用的方法" class="headerlink" title="4.1 ES6前常用的方法"></a>4.1 ES6前常用的方法</h3><p>4.1.1 String.fromCharCode(Unicode1,Unicode2,…,Unicoden)是String静态方法，参数是至少一个Unicode码，返回所有参数对应的字符组成的字符串。<br>4.1.2 stringObject.indexOf(searchvalue[,fromindex])默认从首字符开始检索，返回某个指定的字符串值在字符串中首次出现的位置，没有返回-1。<br>4.1.3 stringObject.lastIndexOf(searchvalue,fromindex)  </p><p>字符串新增方法  </p><p>正则扩展  </p><p>数值的扩展  </p><p>函数的扩展  </p><p>数组的扩展  </p><p>对象的扩展  </p><p>对象新增的方法  </p><p>Symbol  </p><p>set和map  </p><p>Proxy  </p><p>Reflect  </p><p>Promise  </p><p>Iterator和for…of  </p><p>Generatore  </p><p>Generator 的异步应用  </p><p>async  </p><p>class</p><p>  ES6之前实现一个类一般是通过工厂函数，修改原型链实现类的继承。ES6提供classAPI，使用extends继承。<br>  子类必须在constructor中首先调用super否则会报错(新建子类实例时)，因为子类自己的this对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，加上子类自己的实例属性和方法。如果不调用super方法，子类就得不到this对象。<br>  ES5 的继承，实质是先创造子类的实例对象this，然后再将父类的方法添加到this上面（Parent.apply(this)）。ES6 的继承机制完全不同，实质是先将父类实例对象的属性和方法，加到this上面（所以必须先调用super方法），然后再用子类的构造函数修改this<br>  super表示父类的构造函数，但是返回的是子类<br>  类中无this，只有实例才有</p><p>super指向父类（不是实例哦），constuctor默认返回的是实例，也可手动返回其他对象<br>如果父类constructor有参数，子类必须调用super，并且传入指定参数：既子类的constructor的参数必须包括父类constructor的参数，且子类必须调用super传入这些参数  </p><h2 id="22-class的继承"><a href="#22-class的继承" class="headerlink" title="22. class的继承"></a>22. class的继承</h2><p>  class语法本身是es5构造函数的语法上塘，定义的类的方法(非静态方法)本身是在原型链上添加方法  </p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token function">somemethord</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">othermethord</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 等价于</span>Object<span class="token punctuation">.</span><span class="token function">asign</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token function">somemethord</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">othermethord</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  constructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有constructor方法，如果没有显式定义，一个空的constructor方法会被默认添加。constructor默认返回当前类的实例(this)，也可以返回指定上下文</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 等价于</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  如果有父类，还必须在constructor中调用super  </p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  在new一个类时，先调用constructor方法，如果是子类，必须在constructor内先调用super(接受全部父类需要的参数)，先创建父类上下文，再创建子类上下文<br>  class内的方法不需要加function,可以在constructor中绑定this或使用箭头函数，否则经过赋值后的方法会改变this  </p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token punctuation">{</span>say<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Uncaught TypeError: Cannot read property 'firstname' of undefined</span><span class="token keyword">const</span> <span class="token punctuation">{</span>text<span class="token punctuation">}</span> <span class="token operator">=</span> Parent<span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Uncaught TypeError: Cannot read property 'firstname' of undefined</span><span class="token comment" spellcheck="true">// 修改之后</span><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>say <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>say<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    say <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> username <span class="token operator">=</span> <span class="token string">'nothing'</span>    <span class="token keyword">static</span> text1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token punctuation">{</span>say<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'Parent'</span><span class="token keyword">const</span> <span class="token punctuation">{</span>text<span class="token punctuation">}</span> <span class="token operator">=</span> Parent<span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'nothing'wqwqsdfsdf</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  第二种情况，super作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。</p><p>module  </p><p>module的加载实现  </p><p>编程风格  </p><p>读懂规格  </p><p>异步遍历器  </p><p>ArrayBuffer  </p><p>Decorator</p><p>作用域  </p><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p>在函数、模块外申明的变量全局都可以访问。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// inde.html</span><span class="token comment" spellcheck="true">// 重点在type，如果是module，这段脚本就是es6module</span><span class="token operator">...</span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"./index.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">...</span><span class="token comment" spellcheck="true">// index.js</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 全局作用域</span>b<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用效果如上，他实际上是挂到window上，可以被删除，但是a却不能</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数-局部作用域"><a href="#函数-局部作用域" class="headerlink" title="函数/局部作用域"></a>函数/局部作用域</h3><p>在函数内申明的变量只能在函数内访问（可以访问上一级变量；module也是函数）</p><h3 id="动态作用域"><a href="#动态作用域" class="headerlink" title="动态作用域"></a>动态作用域</h3><p>this  </p><h3 id="块状作用域"><a href="#块状作用域" class="headerlink" title="块状作用域"></a>块状作用域</h3><p>{}中的代码；let、const</p><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>for…in…针对object（array是object，arr.name=122,也会被遍历）,for针对array，for…of…都可以  </p><h2 id="帮你彻底搞懂JS中的prototype、-proto-与constructor（图解）"><a href="#帮你彻底搞懂JS中的prototype、-proto-与constructor（图解）" class="headerlink" title="帮你彻底搞懂JS中的prototype、__proto__与constructor（图解）"></a><a href="https://blog.csdn.net/cc18868876837/article/details/81211729">帮你彻底搞懂JS中的prototype、__proto__与constructor（图解）</a></h2><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>普通函数的this，谁调用只想谁，非严格模式找不到就指向window。箭头函数是绑定的父级的作用域，如果父级也是箭头函数，那就继续晚上找。obj={fn(){}},这是obj={fn:fucntion(){}}的简写，而不是箭头函数。  </p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则相关</title>
      <link href="/2021/10/08/%E6%AD%A3%E5%88%99%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/10/08/%E6%AD%A3%E5%88%99%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="RegExp"><a href="#RegExp" class="headerlink" title="RegExp"></a>RegExp</h1><p><a href="https://tool.oschina.net/uploads/apidocs/jquery/regexp.html">正则表达式手册</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">MDN</a></p><p><a href="https://juejin.cn/post/6844903487155732494">JS 正则表达式完整教程（略长）</a></p><p><a href="https://cloud.tencent.com/developer/chapter/13619">腾讯云文档</a></p><h2 id="1-1-匹配标志"><a href="#1-1-匹配标志" class="headerlink" title="1.1 匹配标志"></a>1.1 匹配标志</h2><table><thead><tr><th>标志</th><th>描述</th></tr></thead><tbody><tr><td>g</td><td>全局搜索</td></tr><tr><td>m</td><td>多行匹配</td></tr><tr><td>i</td><td>忽略大小写</td></tr><tr><td>y</td><td>执行“粘性(<code>sticky</code>)”搜索,匹配从目标字符串的当前位置开始(lastIndex)</td></tr><tr><td>s</td><td>允许<code>.</code> 匹配换行符</td></tr><tr><td>u</td><td>使用 unicode 码的模式进行匹配</td></tr></tbody></table><ul><li>正则对象都有个 lastIndex 属性，只读（但是 js 没有严格语法限制，可以修改），只有正则使用了 global 标志才会在匹配成功是修改 lastIndex 的值，失败置 0。使用 sticky 标志，只会从正则的 lastIndex 开始匹配，但是不会修改它的值。</li><li>多行匹配只有在字符串中有换行符时才有意义，有换行符时^、$表示每行开头结尾，如果不使用^或$那么也没必要使用 m 标志。</li><li>除了 i，其他基本没使用过。</li></ul><h2 id="1-2-匹配模式"><a href="#1-2-匹配模式" class="headerlink" title="1.2 匹配模式"></a>1.2 匹配模式</h2><p>匹配字符或者匹配位置。</p><h2 id="1-3-RegExp-和-String-的一些常用方法"><a href="#1-3-RegExp-和-String-的一些常用方法" class="headerlink" title="1.3 RegExp 和 String 的一些常用方法"></a>1.3 RegExp 和 String 的一些常用方法</h2><p>String：</p><blockquote><p>replace<br>search<br>match<br>matchAll<br>split</p></blockquote><p>RegExp：</p><blockquote><p>test<br>exec<br>compile</p></blockquote><p>正则实际匹配结果看 match 和 matchAll，test 只是判断字符串是否满足正则要求。<br>search 相当于 indexOf 于 Array，找到满足正则的第一个字符集首字符位置，否则返回-1。<br>exec 开启 g 或 y 每次调用会修改 lastIndex。<br>matchAll 返回的是迭代器。</p><p>重点说 replace：str.replace(regexp|substr, newSubStr|function)</p><blockquote><p>第一个参数：可以使正则，会处理全部匹配的字符。可以使字符串，只处理第一个相等字符。<br>第二个参数：可以使特殊字符串，$&amp;表示被整个正则匹配到的字符，可以修饰字符串；$n 表示每个子表达式匹配的字符，可以重新组合或者提取字符串（子表达式没匹配到的会被忽略）；$`、$‘表示匹配字符左边、右边全部类容，可以修饰字符串。可以使函数，参数是[match 的字符，…子表达式匹配的结果,位置，输入值]，返回值替换匹配字符，如果开启 g 或 m 会多次调用。</p></blockquote><table><thead><tr><th>变量名</th><th>代表值</th></tr></thead><tbody><tr><td>$$</td><td>插入一个 “$”</td></tr></tbody></table><h2 id="1-4-问题"><a href="#1-4-问题" class="headerlink" title="1.4 问题"></a>1.4 问题</h2><ol><li><p>一道面试题<br>![一道面试题][reg_g]</p><details>  <summary><font color="#56b6a7">答案</font></summary>  <pre><code>  truetruefalsetrue// 在设置g或y模式，RegExp 对象是有状态的。他们会将上次成功匹配后的位置记录在 lastIndex 属性中。// 全局匹配会记录上次匹配到的位置，然后下一次从上一次的位置开始匹配，失败时会重置lastIndex为0。  </code></pre></details></li><li><p>一道面试题：使用正则实现 String.trim()</p><details>  <summary><font color="#56b6a7">答案</font></summary>  <pre><code>  String.prototype.trim=function(){return this.replace(/^\s+|\s+$/g,"")}  </code></pre></details></li><li><p>实现一个正则：不能以空白字符开头和结束，至少一个字符</p><details>  <summary><font color="#56b6a7">我的</font></summary>  <pre><code>   /^\S(.*\S)?$/ /^\S{1}$|^\S+.*\S+$/g  </code></pre></details></li><li><p>一道面试题：使用正则实现 String.trim()</p></li><li><p>不同系统换行符的区：windows：\n\r，mac：\r，Unix：\n。不同系统处理文件时要注意。</p></li><li><p>表达式里，有些特殊符号要在前面加\转义。比如：根据一个字符串生成一个正则，就需要转义正则里的全部特殊符号，不然直接生成正则是按转移后的字符生成的。</p></li><li><p>讲解两个正则：</p></li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 手机号</span><span class="token regex">/^((\+|00)86)?1((3[\d])|(4[5,6,7,9])|(5[0-3,5-9])|(6[5-7])|(7[0-8])|(8[\d])|(9[1,8,9]))\d{8}$/</span><span class="token comment" spellcheck="true">// 密码强度校验：最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符</span><span class="token regex">/^.*(?=.{6,})(?=.*\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&amp;*? ]).*$/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>1.5 总结</p><ol><li>与：/ppp/，或：/p|p|p/，非：/[^ppp]/。</li><li>正则终究匹配的是字符或者位置。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端总结</title>
      <link href="/2021/10/05/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E4%B8%80%E4%BA%9B/"/>
      <url>/2021/10/05/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E4%B8%80%E4%BA%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="H5移动端开发总结"><a href="#H5移动端开发总结" class="headerlink" title="H5移动端开发总结"></a>H5移动端开发总结</h1><h4 id="移动端一般会为了美观给html、body加统一样式，再用iScorll、betterScroll等"><a href="#移动端一般会为了美观给html、body加统一样式，再用iScorll、betterScroll等" class="headerlink" title="移动端一般会为了美观给html、body加统一样式，再用iScorll、betterScroll等"></a>移动端一般会为了美观给html、body加统一样式，再用iScorll、betterScroll等</h4><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">html,body</span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这有个问题：body或者html依旧不是相对屏幕固定的，上下滑动会造成背景图位移等(Safari)，以下可解决：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">html,body</span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span>fixed<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是在移动端输入时，软键盘弹起解决页面被隐藏或者被顶起时，会有副作用。</p><h4 id="适配一般选择动态计算根字体尺寸，rem为单位。当心有些安卓机型会根据系统设置字体大小修改webview的根字体大小，一般找原生端设置"><a href="#适配一般选择动态计算根字体尺寸，rem为单位。当心有些安卓机型会根据系统设置字体大小修改webview的根字体大小，一般找原生端设置" class="headerlink" title="适配一般选择动态计算根字体尺寸，rem为单位。当心有些安卓机型会根据系统设置字体大小修改webview的根字体大小，一般找原生端设置"></a>适配一般选择动态计算根字体尺寸，rem为单位。当心有些安卓机型会根据系统设置字体大小修改webview的根字体大小，一般找原生端设置</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 注意这里是100倍，因为一般除不尽，多取几位缩小误差。所以应该有个css单位变量是htmlFontsize*1/100</span>        <span class="token comment" spellcheck="true">// spa完全可以放到body尾部</span>        <span class="token keyword">var</span> htmlFontSize <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth <span class="token operator">/</span> <span class="token number">375</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> bodyFontSize <span class="token operator">=</span> <span class="token string">'16px'</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> styleDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        styleDom<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'html{font-size:'</span> <span class="token operator">+</span> htmlFontSize <span class="token operator">+</span> <span class="token string">'!important;}body{font-size:'</span> <span class="token operator">+</span> bodyFontSize <span class="token operator">+</span> <span class="token string">'!important;}'</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'head'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>styleDom<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="禁止缩放和双击放大（包括Safari）"><a href="#禁止缩放和双击放大（包括Safari）" class="headerlink" title="禁止缩放和双击放大（包括Safari）"></a>禁止缩放和双击放大（包括Safari）</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> lastTouchEnd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchstart'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>touches<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchend'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> lastTouchEnd <span class="token operator">&lt;=</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    lastTouchEnd <span class="token operator">=</span> now<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'gesturestart'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'dblclick'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Safari滚动到动态列表时滑动出问题"><a href="#Safari滚动到动态列表时滑动出问题" class="headerlink" title="Safari滚动到动态列表时滑动出问题"></a>Safari滚动到动态列表时滑动出问题</h4><p>动态创建的列表高度没有预设高度，在动态创建列表（ajax等）后，浏览器没有计算好，导致滚动失败。解决办法：设置需要滚动的容器的(min-)height，撑起容器。  </p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js高阶劝退</title>
      <link href="/2021/09/28/%E5%8A%9D%E9%80%80%E6%8C%87%E5%8D%97/"/>
      <url>/2021/09/28/%E5%8A%9D%E9%80%80%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.ruanyifeng.com/blog/2012/10/javascript_module.html">Javascript模块化编程（一）：模块的写法</a><br><a href="https://juejin.im/post/5aaa37c8f265da23945f365c">前端模块化：CommonJS,AMD,CMD,ES6</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li><p>图片分为banner（大图）、普通图片（需要压缩）、小图和图标(可以制作雪碧图、base64等)，所以都需要单独建目录针对处理。</p></li><li><p>样式分为公共和模块独有，公共部分又分common.less、variable.less、reset.less，其中common.less又可以单独拆分：比如常见的容器、整体布局可以分为一类，重置UI框架的样式可以分为一类。然后按序引入一个文件。variable.less可以使用插件。  </p></li><li><p>API可以根据需要分为url和method，配制成对象。常用的也可以封装成方法。  </p></li><li><p>项目中使用的正则全部统一管理，表单验证规则、提示语等根据UI框架设置成json。  </p></li><li><p>常用方法放到util目录。  </p></li><li><p>assets：静态文件目录，可以使用webpack’卓一些处理；static：静态文件，不用做处理；  </p></li><li><p>常用的一些前后端对接的变量：数据字典，单独存储。</p></li><li><p>先讲清楚需求，客户端兼容性，移动端还是PC端，客户端对数据持久化的程度要求，路由切换动效，全局或者局部loading，默认字体及其大小颜色、主题色等。后台数据缺省值，数据模型、名称尽量统一。</p></li><li><p>写详细设计：需求文档中的需求说明、原型、前端交互及数据交互的流程图、接口文档（请求体：报文、method、request，响应体：报文、data、status、message），需求及原型评审、UI评审、详设评审、接口文档评审。  </p></li><li><p>组件一般只解决交互、数据传递、数据通用转换等需求，页面才处理数据请求分发等业务。</p></li><li><p>约定大于大于配置，不要在某些问题上纠结，好的习惯变成约定以配置实现。  </p></li><li><p>与后台约定好接口的status、message，数据不要嵌套太深。  </p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端小白记</title>
      <link href="/2021/09/27/%E5%89%8D%E7%AB%AF%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/09/27/%E5%89%8D%E7%AB%AF%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML篇"><a href="#HTML篇" class="headerlink" title="HTML篇"></a>HTML篇</h1><p>+/*</p><h3 id="1-html概念"><a href="#1-html概念" class="headerlink" title="1.html概念/"></a>1.html概念/</h3><ul><li>html全称HyperText Markup Language,翻译为超文本标记语言,它不是一种编程语言,是一种描述性的标记语言,用于描述超文本内容的显示方式,比如字体,颜色,大小等</li><li>超文本 : 音频,视频,图片等称为超文本</li><li>标记:  &lt;一个英文字母或者单词&gt; 这种类型称之为标记</li><li><strong>作用</strong> : html是负责描述文档语义的语言</li><li><strong>注意</strong> : html语言不是编程语言(有编译过程),而是一个标记语言(没有编译过程),HTML页面直接由浏览器解析执行</li><li>html是一个纯文本文件(也就是txt文件改名而成),用一些标签来描述文字的语义,这些标签在浏览器中是看不到的,所以称为超文本,所以就是超文本语言了</li></ul><h3 id="2-html的网络术语"><a href="#2-html的网络术语" class="headerlink" title="2.html的网络术语"></a>2.html的网络术语</h3><ul><li>网页 ; 由各种标记组成的一个页面就是网页</li><li>主页(首页) ; 一个网站的起始页面或者导航页面</li><li>标记: &lt; p &gt; 称为开始标记,&lt;/ p&gt;称为结束标记,也叫标签,每个标签都规定好了特殊的含义</li><li>元素: 标记之间的内容就叫做元素</li><li>属性,标记中对没一个标签所做的辅助信息</li></ul><h3 id="3-html规范"><a href="#3-html规范" class="headerlink" title="3.html规范"></a>3.html规范</h3><ul><li>所有的标记都要正确的嵌套,不能交叉嵌套,就是一个标记的开始标记和结束标记之间不能存在单独的其他开始标记或结束标记,也就是不能交叉嵌套</li><li>所有标记必须小写</li><li>所有标记必须关闭<ul><li>双边标记 : &lt; span &gt;&lt; /span &gt;</li><li>单边标记 : <code>&lt;br&gt;</code> 转成 <code>&lt;br /&gt;</code> <code>&lt;hr&gt;</code> 转成 <code>&lt;hr /&gt;</code>，还有<code>&lt;img src=“URL” /&gt;</code></li><li>所有属性必须加引号&lt; h1 id = “head” &gt; &lt; /h1 &gt;</li><li>所有属性必须有值</li></ul></li></ul><h3 id="4-htmL的基本语法特征"><a href="#4-htmL的基本语法特征" class="headerlink" title="4.htmL的基本语法特征"></a>4.htmL的基本语法特征</h3><ul><li>对换行不敏感,对tab不敏感<ul><li>html只在乎标签的嵌套结构,嵌套的关系,换行和tab对页面结构不影响</li></ul></li><li>空白折叠现象<ul><li>html中所有的文字中间,如果有空格,换行,tab都将被折叠为一个空格显示</li></ul></li><li>标签严格封闭</li></ul><h3 id="5-html结构"><a href="#5-html结构" class="headerlink" title="5.html结构"></a>5.html结构</h3><ul><li><p>新建html文件,输入html:5 或者 ! 按下tab键后,自动生成默认的代码,如下</p><ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>文档声明头</p><ul><li>任何的标准的html页面,第一行一定是一个以&lt; !DOCTYPE html &gt;开头的一行,这就是文档声明头,DocType Declaration,简称DTD,此标签可以告知浏览器文档使用哪种html或xhtml规范</li></ul></li><li><p>头标签</p><ul><li><p>head标签都放在头部分之间,这里包含了&lt; title &gt; ,&lt; meta &gt;,&lt; link &gt; ,&lt; style &gt;</p><ul><li><p>&lt; title &gt; :指整个网页的标题,显示在浏览器的最上边</p><ul><li>主要是告诉用户和搜索引擎这个网页的主要内容是什么,搜索引擎可以通过网页标题,迅速的判断出当前网页的主题</li></ul></li><li><p>&lt; meta &gt; :提供有关页面的基本信息</p><ul><li><p>严肃可提供有关页面的元信息(mata-information),针对搜索引擎和更新频度的关键词</p></li><li><p>提供的信息用户不可见,分别有两个属性</p><ul><li><p>http_equiv属性</p><ul><li><p>它用来向浏览器传达一些有用的信息,帮助浏览器正确的显示网页的内容,与之对应的属性值为content,content中的内容就是各个参数的变量值</p></li><li><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--重定向 2秒后跳转到对应的网址，注意分号--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>refresh<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2;URL<span class="token punctuation">=</span>http://www.luffycity.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--指定文档的内容类型和编码类型 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--告诉IE浏览器以最高级模式渲染当前网页--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><pre><code>&lt;meta http-equiv="x-ua-compatible" content="IE=edge"&gt;</code></pre></li><li><p>name属性</p><ul><li><p>主要用于页面的关键字描述,写给搜索引擎看的,关键字之间可以用逗号隔开,与之对应的属性值为content,content中的内容主要是便于搜索引擎机器人查找信息和分类信息用的</p></li><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>网易,邮箱,游戏,新闻,体育,娱乐,女性,亚运,论坛,短信<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>这些关键词就是告诉搜索引擎,这个网页是干嘛的,能够提高搜索命中率,让别人能都通过搜索引擎搜索到</li></ul></li><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>网易是中国领先的互联网技术公司，为用户提供免费邮箱、游戏、搜索引擎服务，开设新闻、娱乐、体育等30多个内容频道，及博客、视频、论坛等互动交流，网聚人的力量。<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>只要设置Description页面描述,那么百度搜索结果,就能显示这些语句,这个技术叫做SEO(search engine optimization,搜索引擎优化</li></ul></li><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>viewport</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>上面这个标签,是让我们网页支持移动端,移动设备优先</li></ul></li></ul></li></ul></li><li><p>&lt; link &gt; :定义文档与外部资源的关系</p></li><li><p>&lt; style &gt; : 定义内部样式表与网页的关系</p></li></ul></li></ul></li><li><p>html颜色显示</p><ul><li>纯单词表示:red,green,blue,orange,gray等</li><li>十进制表示: rgb(255,0,0)</li><li>16进制表示 : #FF0000</li></ul></li></ul><h3 id="6-html标签"><a href="#6-html标签" class="headerlink" title="6.html标签"></a>6.html标签</h3><ul><li><p>标签分类</p></li><li><p><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\1565165927495.png" alt="1565165927495"></p><ul><li>html标签又叫html元素,它分为块级元素和内联元素(行内元素),都是html规范中的概念</li></ul></li><li><p>块级元素</p><ul><li><p>块级元素是指本身属性为display:block的元素,因为它自身的特点我们通常使用块级元素来进行大布局(大结构)的搭建</p><ul><li>特点</li><li>独占一行,每个块级元素都会从新的一行重新开始,从上到下排布<ul><li>可以和直接控制宽度,高度以及盒子模型相关的css属性</li><li>在不设置宽度的情况下,块级元素的宽度是它父级元素内容的宽度</li><li>在不设置高度的情况下,块级元素的高度是它本身内容的高度</li></ul></li></ul></li><li><p>内联元素</p><ul><li><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\1565165950629.png" alt="1565165950629"></li></ul></li><li><p>内联元素是指本身属性为display:inlline;的元素,他因为自身的特点,我们通常使用内联元素来进行文字,小图标(小结构)的搭建</p><ul><li>特点</li></ul></li><li><p>和其他内联元素从左到右一行显示</p><ul><li>不能直接控制宽度,高度以及盒子模型的相关css属性,但是直接设置内外边距的左右值是可以的</li><li>内联元素的宽度是由本身内容的大小决定的<ul><li>内联元素只能容纳文本或者其他内联元素(不要再内联元素中嵌套块级元素)</li></ul></li></ul></li></ul></li><li><p>文本及和容器级</p><ul><li>标签可分为文本级和容器级<ul><li>文本级标签:p,span,a,b,i,u,em</li><li>容器级 : dic,h系列,li,dt,dd</li></ul></li><li>文本级标签的意思是标签中只可以放文本,不可以放其他内容,出了p之外,所有的文本级标签都是行内元素,p是个文本及,但是个块级元素</li><li>p里面只能放文本,图片,表单元素,p里面不能放h和ul,p里面也不能放p</li></ul></li></ul><h3 id="7-html中的特殊字符"><a href="#7-html中的特殊字符" class="headerlink" title="7.html中的特殊字符"></a>7.html中的特殊字符</h3><ul><li><code>&amp;nbsp;</code>：空格 （non-breaking spacing，不断打空格）</li><li><code>&amp;lt;</code>：小于号（less than）</li><li><code>&amp;gt;</code>：大于号（greater than）</li><li><code>&amp;amp;</code>：符号<code>&amp;</code></li><li><code>&amp;quot;</code>：双引号</li><li><code>&amp;apos;</code>：单引号</li><li><code>&amp;copy;</code>：版权<code>©</code></li><li><code>&amp;trade;</code>：商标<code>™</code></li></ul><h2 id="HTML块级元素"><a href="#HTML块级元素" class="headerlink" title="HTML块级元素"></a>HTML块级元素</h2><h3 id="1-h1-h6"><a href="#1-h1-h6" class="headerlink" title="1.h1 - h6"></a>1.h1 - h6</h3><ul><li><p>标题使用&lt; h1 &gt; 至 &lt; h6 &gt;标签进行定义.具有align属性,属性值可以使left.center,right</p></li><li><pre class="line-numbers language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>一级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>二级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>三级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>四级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span>五级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span>六级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-列表"><a href="#2-列表" class="headerlink" title="2.列表"></a>2.列表</h3><ul><li><p>列表分为三种,有序列表ol,无序列表和定义类表dl,其中ol和ul必须结合li标签使用,而dl则必须结合dt,dd使用</p></li><li><p>ol ordered list    有序列表</p><ul><li>li list item，列表项</li></ul></li><li><p>ul unordered list 无序列表</p><ul><li>li list item，列表项</li></ul></li><li><p>dl definition list  定义列表</p></li><li><ul><li><code>&lt;dt&gt;</code>：definition title 列表的标题，这个标签是必须的</li><li><code>&lt;dd&gt;</code>：definition description 列表的列表项，如果不需要它，可以不加</li></ul></li><li><p>li不能单独存在,必须包裹在ul或者dl中</p></li></ul><h3 id="3-排版标签"><a href="#3-排版标签" class="headerlink" title="3.排版标签"></a>3.排版标签</h3><ul><li>段落标签<p></p></li><li>属性<ul><li>align = “属性值” : 对齐方式包括left,right,center</li><li>HTMl是分等级的,html将所有的标签分为两种<ul><li>文本级标签,p,span,a,b,i,u,em.文本级标签里只能放文字,图片,表单元素</li><li>容器级标签: div,h系列,li,dt,dd,容器级标签里可以放任何东西</li></ul></li></ul></li><li>div<ul><li>div和span是非常重要的标签1,div的语义是division”分割”</li><li>div : 把标签中的内容作为一个块儿来对待,必须单独占一行</li><li>div标签的属性:<ul><li>align = “属性值” ; 设置块儿的位置,属性值可以选择 ; left,right,center</li></ul></li><li>单独在网页中插入这个元素,不会对页面产生影响,这两个元素是撞门为定义css样式而生的,或者说,DIV+CSS可以实现各种样式,</li><li>div+css,div标签负责布局,负责结构,负责分块,css负责样式</li></ul></li></ul><h3 id="4-hr"><a href="#4-hr" class="headerlink" title="4.hr"></a>4.hr</h3><ul><li>水平分割线,可以在视觉上将文档分隔成各个部分</li></ul><h3 id="5-内容居中标签-lt-center-gt"><a href="#5-内容居中标签-lt-center-gt" class="headerlink" title="5.内容居中标签< center >"></a>5.内容居中标签&lt; center &gt;</h3><ul><li>此时center代表的是一个标签,不是一个属性值,只要是在这个标签里面内容,都会居于浏览器的中间</li><li>在H5中不建议使用center标签</li></ul><h3 id="6-预定义-预格式化-标签-lt-pre-gt"><a href="#6-预定义-预格式化-标签-lt-pre-gt" class="headerlink" title="6.预定义(预格式化)标签< pre >"></a>6.预定义(预格式化)标签&lt; pre &gt;</h3><ul><li>含义:将保留其中所有的空白字符(空格,换行符),原封不动的输出结果(高速浏览器不要忽略空格和空行)</li><li>说明: 真正排网页的过程中,&lt; pre &gt; 标签基本不用,但在PHP中用于打印一个数组时使用</li></ul><h3 id="7-table"><a href="#7-table" class="headerlink" title="7.table"></a>7.table</h3><ul><li><p>一个 表格标签用&lt; table &gt;表示,由&lt; table &gt; 由表头&lt; thead &gt;和表格内容&lt; tbody &gt;组成的.其中每一行是&lt; tr &gt;,每一格是由, &lt; td &gt;组成的</p></li><li><p>表格属性</p><ul><li>boder:边框&lt;像素为单位</li><li>style = “boder-collapse:collapse:”  :  单元格的线和表格边框线合并</li><li>width : 宽度,像素为单位</li><li>height : 高度,像素为单位</li><li>bordercolor : 表格的边框颜色</li><li>align:表格的水平对齐方式,属性值可以填 ;left right center<ul><li>这里的是水平对齐方式,不是表格内容的对齐方式,要想设置表格内容对齐方式,需要在&lt; td &gt;中添加</li></ul></li><li>cellpadding : 单元格内容到边的距离,像素为单位,默认情况下,文字是紧挨着左边那条线的,即默认情况下的值为0,默认是以到四边的左边那条线,如果设置属性dir = “rtl”,那么就是指内容到右边的那条线的距离</li><li>cellspacing : 单元格之间的距离(外边框),</li><li>bgcolor = “#99ccff” : 表格的背景颜色</li><li>backgrand = “路径src /“ : 背景图片<ul><li>图片的优先级大于颜色的优先级</li></ul></li></ul><h3 id="8-table行"><a href="#8-table行" class="headerlink" title="8.table行"></a>8.table行</h3><ul><li>dir ; 公有属性,设置这一行单元格的排列方式,可以取值,ltr : 从左到右(left 头right),rtl反之</li><li>bgcolor : 这一行单元格的背景色,没有backgrand属性,要想设置只能通过css实现</li><li>height : 一行的高度</li><li>align = “center” : 一行的内容水平居中显示,取值 : left ,center ,right</li><li>valign =”center” ;一行的内容垂直居中,取值 : top,middle,botto</li></ul><h3 id="9-table-单元格"><a href="#9-table-单元格" class="headerlink" title="9.table 单元格"></a>9.table 单元格</h3><ul><li>属性<ul><li>align ; 内容的横向对齐方式,left right center</li><li>valign : 纵向,top,middle bottom</li><li>width 绝对值或者相对值(%)</li><li>height : 单元格高低</li><li>bgcolor : 单元格背景色</li><li>&lt; th &gt;:加粗的单元格,相当于&lt; td &gt; +  &lt; b &gt;<ul><li>属性通&lt; td &gt; 标签</li></ul></li><li>&lt; caption &gt; 表格的标题,使用时和tr标签并列</li><li>&lt; thead &gt; ,&lt; thead &gt;,&lt; tfoot &gt;,决定表格的显示顺序,默认按照代码从上到下显示<ul><li>在表格内容非常大的时候,设置这三个属性属性可以变获取边显示,如果不写,则必须等表格的内容全部从服务器获取完成才能显示</li></ul></li></ul></li><li>操作<ul><li>colspan : 横向合并,colspan = “2”表示在当前单元格在水平方向上要占据两个单元的位置</li><li>rowspan ; 纵向合并,例如rowspan = “2”,表示在当前单元格在垂直方向上要占据两个单元格的位置</li></ul></li></ul></li></ul><h3 id="8-表单"><a href="#8-表单" class="headerlink" title="8.表单"></a>8.表单</h3><ul><li><p>表单功能</p><ul><li>表单用于向服务器传输数据,从而实现用户与web服务器的交互</li><li>表单能够包含input系列标签,比如文本字段,复选框,单选框,提交按钮等等</li><li>表单还能把汗textrea ,select,fledset,label标签</li></ul></li><li><p>表单属性</p><ul><li><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>accept-charset</td><td>规定在被提交表单中使用的字符集（默认：页面字符集）。</td></tr><tr><td>action</td><td>规定向何处提交表单的地址（URL）（提交页面）。</td></tr><tr><td>autocomplete</td><td>规定浏览器应该自动完成表单（默认：开启）。</td></tr><tr><td>enctype</td><td>规定被提交数据的编码（默认：url-encoded）。</td></tr><tr><td>method</td><td>规定在提交表单时所用的 HTTP 方法（默认：GET）。</td></tr><tr><td>name</td><td>规定识别表单的名称（对于 DOM 使用：document.forms.name）。</td></tr><tr><td>novalidate</td><td>规定浏览器不验证表单。</td></tr><tr><td>target</td><td>规定 action 属性中地址的目标（默认：_self）。</td></tr></tbody></table></li></ul></li><li><p>表单元素</p><ul><li>基本概念<ul><li>html表单是html元素中较为复杂的部分,表单往往和脚本,动态页面,数据处理等功能相结合</li><li>一般用收集用户的输入信息</li><li>表单工作原理:<ul><li>访问者在浏览有表单的网页时,可填写必须的信息,然后按某个按钮提交,这些信息通过intert传送到服务器上</li><li>服务器专门的程序对这些数据进行处理,有错误信息会返回错误信息,并要求纠正错误,当数据完整无误后,服务器反馈一个输入完成的信息</li></ul></li></ul></li></ul></li><li><p>属性</p><ul><li><p>name:表单的名称,用于js来操作或控制表单时使用,就想分组一样,可以重复</p></li><li><p>id: 表单的名称,用于js来操作或控制表单时使用,html中的唯一标识,不可重复</p></li><li><p>acton ; 指定表单数据的处理程序,一般是PHP,如action = “login.php”</p></li><li><p>method: 表单数据的提交方式,一般取值get(默认)和post</p><ul><li>get 和 post 的区别<ul><li>get将表单数据以”name=value”的形式追加到action指定的处理程序后面,两者之间用”?”隔开,每一个表单的”name=value”间用”&amp;”隔开<ul><li>特点 : 只适合提交少量的信息,并不天安全(不要提交敏感数据),提交的类型只限于</li></ul></li><li>post将表单数据直接发送(隐藏)到action指定的处理程序,post发送的数据不可见,action指定的处理程序可以获取到表单数据<ul><li>特点 : 可以提交海量信息,相对来说比较安全,提交的数据格式是多样的(word,Excel,rar,img等)</li></ul></li></ul></li></ul></li><li><p>Enctype</p><ul><li>表单数据的编码方式(加密方式)取值可以是 : application/x-www-form-urlencoded、multipart/form-data。Enctype只能在POST方式下使用。</li><li>application/x-www-form-urlencoded、multipart/form-data。Enctype只能在POST方式下使用。</li></ul></li><li><p>&lt; inpt &gt; 输入标签(文本框)(内联标签)</p><ul><li><table><thead><tr><th>type属性值</th><th>表现形式</th><th>对应代码</th></tr></thead><tbody><tr><td>text</td><td>单行输入文本</td><td>&lt;input type=text” /&gt;</td></tr><tr><td>password</td><td>密码输入框（不显示明文）</td><td><input type="password"></td></tr><tr><td>date</td><td>日期输入框</td><td><input type="date"></td></tr><tr><td>checkbox</td><td>复选框</td><td><input type="checkbox" checked="checked" name="x"></td></tr><tr><td>radio</td><td>单选框</td><td><input type="radio" name="x"></td></tr><tr><td>submit</td><td>提交按钮</td><td><input type="submit" value="提交"> #发送浏览器上输入标签中的内容，配合form表单使用，页面会刷新</td></tr><tr><td>reset</td><td>重置按钮</td><td><input type="reset" value="重置">  #页面不会刷新，将所有输入的内容清空</td></tr><tr><td>button</td><td>普通按钮</td><td><input type="button" value="普通按钮"></td></tr><tr><td>hidden</td><td>隐藏输入框</td><td><input type="hidden"></td></tr><tr><td>file</td><td>文本选择框</td><td><input type="file"></td></tr></tbody></table></li><li><p>type = “属性值”,文本类型,属性值可以是:</p><ul><li>text(默认)</li><li>password ; 密码类型</li><li>radio: 单选按钮,名字相同的按钮作为一组进行单选(单选按钮,天生是不能互斥的,如果想要互斥,必须要有相同的name属性,</li><li>checkbox : 多选按钮,名字相同的按钮作为一组选择</li><li>checked ; 将单选或者多选按钮默认处于选中状态</li><li>hidden : 隐藏框,在表单中包含不希望用户看见的信息</li><li>button ; 普通的按钮,结合js代码进行使用</li><li>submit ; 提交按钮,将当前表单数据给服务器或者其他程序进行处理</li><li>reset : 重置按钮,清空当前表单的内容,并设置为最初的默认值</li><li>image : 图片按钮,和提交按钮一样的功能,不过图片按钮可以显示图片</li><li>file: 文本选择框<ul><li>可配合js来实现验证,对上传的文件进行安全的检查,一是扩展名的检查,二是文件数据的检查</li></ul></li></ul></li><li><p>value = “内容” 文本框中默认的内容</p></li><li><p>size = “50” : 表示文本框内可以显示五十个字符,一个英文或者一个中文都算一个字符</p></li><li><p>readonly : 文本框只读,不能编辑,光标进不去,属性值可以不写</p></li></ul></li><li><p>&lt; select &gt; :下拉列表标签(内联标签)</p><ul><li>&lt; select &gt; 标签里的每一项都用&lt; option &gt; 表示,select 就是选择,option” 选项”</li><li>select 标签和ul,ol,dl一样,都是组标签</li><li>属性<ul><li>multiple : 可以对下拉列表中的选项进行多选,没有属性值,ctrl+鼠标点选</li><li>size = “3”,如果属性值大于1,则列表为滚动视图,默认属性值为1,即下拉列表</li></ul></li></ul></li><li><p>&lt; option &gt;标签的属性</p><ul><li>selected : 预选中,没有属性值</li></ul></li><li><p>&lt; textarea &gt;标签:多行文本输入框(内联标签)</p><ul><li>text就是文本,area就是区域</li><li>属性<ul><li>value : 提交给服务器的值</li><li>rows = “4” :指定文本区域的行数</li><li>cols = “20” :制定文本区域的列数</li><li>readonly: 只读</li></ul></li></ul></li><li><p>&lt; label&gt; 标签(内联标签)</p><ul><li><p>单选复选框只有点击小圆圈才能选中,可以用label解决,</p><ul><li><pre class="line-numbers language-html"><code class="language-html">input type="radio" name="sex" id="nan" /> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nan<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nv<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul></li></ul><h2 id="HTML内联元素"><a href="#HTML内联元素" class="headerlink" title="HTML内联元素"></a>HTML内联元素</h2><h3 id="1-字体标签"><a href="#1-字体标签" class="headerlink" title="1.字体标签"></a>1.字体标签</h3><ul><li>粗标签&lt; b &gt;或&lt; strong &gt; (已废弃)</li><li>斜体标记&lt; I &gt; 或&lt; em &gt;(已废弃)</li><li>上标 &lt; sup &gt; 下标 &lt; sub &gt; </li><li>下划线标记&lt; u &gt; 中划线标记&lt; s &gt; (已废弃) 和,&lt; del &gt;</li></ul><h3 id="2-排班标签"><a href="#2-排班标签" class="headerlink" title="2.排班标签"></a>2.排班标签</h3><h3 id="3超链接"><a href="#3超链接" class="headerlink" title="3超链接"></a>3超链接</h3><ul><li><p>外部链接</p><ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>new.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击进入到新网页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>也可直接点击链接进入</p></li><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>进入百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>锚链接</p><ul><li>给指定的超链接起一个名字,作用是在本页面或者其他页面的不同位置进行跳转,像回到顶部按钮一样,#top</li></ul></li><li><p>邮件链接</p><ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mailto:zhaoxu@tedu.cn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>联系我们<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>特殊链接 </p><ul><li><p>返回页面顶部</p><ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转到顶部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>与js有关</p><ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转到顶部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>javascrip:;表示什么都不执行,这样点击&lt; a &gt;没有任何响应</p></li><li><p>javastrip: 是表示在触发&lt; a &gt; 的时候执行一段JavaScript的代码</p></li></ul></li></ul></li><li><p>超链接的属性</p><ul><li>href : 目标URL</li><li>title : 悬停文本</li><li>name : 主要用于设置一个锚点的名称</li><li>target : 告诉浏览器用什么方式来打开目标页面<ul><li>-self :同一网页</li><li>-blank: 在新的窗口打开</li><li>-parent : 在父窗口中显示</li><li>-top ; 在顶级窗口显示</li></ul></li></ul></li></ul><h3 id="4-图片标签-lt-img-gt"><a href="#4-图片标签-lt-img-gt" class="headerlink" title="4.图片标签< img />"></a>4.图片标签&lt; img /&gt;</h3><ul><li>img : 代表的就是一张图片,且是单边标记,它是自封闭标签,也称为单标签</li><li>能插入的图片类型<ul><li>能插入: jpg(jpeg),gif,png,bmp</li><li>不能插入: psd,ai</li><li>html页面不是直接插入图片,而是插入图片的引入地址,所以要把图片上传到服务器上</li></ul></li><li>src属性:图片的相对路径和绝对路径<ul><li>相对路径:   . 代表当前目录,   ..代表父路径</li><li>绝对路径: 盘符开始的绝对路径和网络路径</li></ul></li><li>img标签常用属性<ul><li>width,height,宽度高度</li><li>title,提示性文本,也就是鼠标悬停时显示的文本</li><li>align : 指图片的对齐方式,属性值可以是left,center,right</li><li>alt : 当图片显示不出来的时候,代替图片显示的内容,</li><li>src属性,点击图片跳转到相应的链接</li></ul></li></ul><h2 id="CSS篇"><a href="#CSS篇" class="headerlink" title="CSS篇"></a>CSS篇</h2><h3 id="1-为什么学习css"><a href="#1-为什么学习css" class="headerlink" title="1.为什么学习css"></a>1.为什么学习css</h3><ul><li>​    html的缺陷<ul><li>不能够适应多种设备</li><li>要求浏览器必须足够智能足够庞大</li><li>数据和显示没有分开</li><li>功能不够强大</li></ul></li><li>css的优点<ul><li>使数据和显示分开</li><li>降低网络的流量</li><li>使整个网站视觉效果一致</li><li>使开发效率提高了(耦合性降低,一个负责写html,一个负责写css)</li></ul></li></ul><h3 id="2-css的引入方法"><a href="#2-css的引入方法" class="headerlink" title="2.css的引入方法"></a>2.css的引入方法</h3><ul><li><p>行内样式</p><ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> green</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是一个段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>接样式</p><ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token comment" spellcheck="true">/*写我们的css代码*/</span>         <span class="token selector">span</span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>外接样式-链接式</p><ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./index.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>外接样式-导入式</p><ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token atrule"><span class="token rule">@import</span> <span class="token url">url('./index.css')</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="3-css选择器"><a href="#3-css选择器" class="headerlink" title="3.css选择器"></a>3.css选择器</h3><ul><li><p>标签选择器(标签名)</p><ul><li>标签选择器可以选中所有的标签元素,比如div,ul,li,p等,不管标签隐藏的多深,都能选中所有的标签,</li></ul></li><li><p>类选择器</p><ul><li><p>类就是class,任何的标签都可以加类,类可以重复,适于归类的概念,同一个标签中可以携带多个类,用空格隔开</p><ul><li><pre><code>.lv{     color: green;  } .big{     font-size: 40px; } .line{    text-decoration: underline;  }</code></pre></li><li><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 公共类    共有的属性 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lv big<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>段落1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lv line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>段落2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line big<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>段落3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>id选择器</p><ul><li><p>同一个页面中id不能重复,任何的标签都可以设置id,id命名规范,要以数字,下划线大小写严格区分,aa和AA就是两个不一样的属性值</p></li><li><p>css</p><pre class="line-numbers language-html"><code class="language-html">#box{    background:green;}            #s1{    color: red;}#s2{    font-size: 30px;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>html</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>娃哈哈<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>s1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>爽歪歪<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>s2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>QQ星<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>高级选择器</p><ul><li><p>后代选择器</p><ul><li><p>用空格表示后代选择器</p></li><li><pre class="line-numbers language-html"><code class="language-html">.container p{    color: red;        }.container .item p{    color: yellow;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>子代选择器</p><ul><li><p>用&gt;表示子代选择器,比如div&gt;p,仅仅表示的是当前div元素选中的子代(不包括孙子)元素P</p></li><li><pre class="line-numbers language-html"><code class="language-html">.container>p{     color: yellowgreen;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>并集选择器</p><ul><li><pre class="line-numbers language-html"><code class="language-html">/*并集选择器*/h3,a{    color: #008000;    text-decoration: none;                }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><pre class="line-numbers language-html"><code class="language-html">body,h1,h2,h3,h4,h5,h6,hr,p,blockquote,dl,dt,dd,ul,ol,li,pre,form,fieldset,legend,button,input,textarea,th,td {      margin: 0;      padding: 0   }/*使用此并集选择器选中页面中所有的标签，页面布局的时候会使用*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>交集选择器</p><ul><li><p>使用 . 表示交集选择器,第一个标签名必须是标签选择器,第二个标签必须是类选择器,语法:div.active,比如有一个&lt; h4 class=’active’ &gt;&lt; h4&gt; 这样的标签,name它表示两者选中之后元素共有的特性</p></li><li><pre class="line-numbers language-html"><code class="language-html">h4{    width: 100px;    font-size: 14px;}.active{    color: red;    text-decoration: underline;}/* 交集选择器 */h4.active{    background: #00BFFF;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>更多选择器</p><ul><li><p>伪类选择器</p><ul><li><p>伪类悬着器一般会使用在超链接a标签中</p><pre class="line-numbers language-html"><code class="language-html">      /*link表示没有被访问的a标签的样式*/        .box ul li.item1 a:link{                        color: #666;        }        /*visited表示访问过后的a标签的样式*/        .box ul li.item2 a:visited{                        color: yellow;        }        /*hover表示鼠标悬停时a标签的样式*/        .box ul li.item3 a:hover{                        color: green;        }        /*active表示鼠标摁住的时候a标签的样式*/        .box ul li.item4 a:active{                        color: yellowgreen;        }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>伪标签选择器(伪元素选择器)</p><ul><li><pre class="line-numbers language-html"><code class="language-html">/*设置第一个首字母的样式*/     p:first-letter{            color: red;            font-size: 30px;        }        /* 在....之前 添加内容   这个属性使用不是很频繁 了解  使用此伪元素选择器一定要结合content属性*/        p:before{            content:'alex';        }                /*在....之后 添加内容，使用非常频繁 通常与咱们后面要讲到布局 有很大的关联（清除浮动）*/        p:after{            content:'&amp;';            color: red;            font-size: 40px;        }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>属性选择器</p><ul><li><pre class="line-numbers language-html"><code class="language-html">/*根据for属性查找，找到所有又for属性的，设置字体颜色为红色*/           /*[for]{               color: red;           }*/                      /*找到for属性的值等于username的元素 字体颜色设为黄色*/           /*[for='username']{               color: yellow;           }*/                      /*以....开头  ^*/            /*[for^='user']{               color: #008000;           }*/                      /*以....结尾   $*/           /*[for$='vvip']{               color: red;           }*/                      /*包含某元素的标签*/           /*[for*="vip"]{               color: #00BFFF;           }*/                      /*指定标签的for属性           其中for属性的值是以空格隔开的值列表，           user1是值列表中的一个独立值*/           label[for~='user1']{               color: red;           }                      input[type='text']{               background: red;           }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul><h3 id="4-选择器权重"><a href="#4-选择器权重" class="headerlink" title="4.选择器权重"></a>4.选择器权重</h3><ul><li><p>当同一个标签有多重样式,遇到重叠项的设置又该听谁的呢,这就涉及到权重的问题了,</p></li><li><p>行内样式 1000&gt;id选择器 100&gt;类选择器 10&gt;标签选择器 1&gt;继承样式</p></li><li><p>css的两大特性:继承性和层叠性</p><ul><li><p>继承性:给父级设置一些属性,子级继承父级的该属性,这就是css中的继承</p><ul><li><p>继承规则</p></li><li><pre class="line-numbers language-heml"><code class="language-heml">面向对象语言都会存在继承的概念，在面向对象语言中，继承的特点：继承了父类的属性和方法。那么我们现在主要研究css，css就是在设置属性的。不会牵扯到方法的层面。记住：有一些属性是可以继承下来 ： color 、 font-*、 text-*、line-* 。主要是文本级的标签元素。但是像一些盒子元素属性，定位的元素（浮动，绝对定位，固定定位）不能继承<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>层叠性:权重大的标签覆盖掉权重小的标签,谁的权重大就显示谁的标签</p></li></ul></li><li><p>权重比较</p><ul><li>权重一样的时候,是以后来设置的属性为准,</li><li>权重都是0,那么就遵循就近原则,谁描述的近,就使用谁的属性,谁描述的近,就是选中到最内层的距离越近</li></ul></li><li><p>! import:设置为权重无限大</p><ul><li>它不影响继承来的权重,只影响选中的元素,不要随便使用,以为他会影响页面的布局</li></ul></li><li><p>使用什么选择器?</p><ul><li>不要试图用一个类将页面写完,这个标签要携带多个类,共同设置样式</li><li>每个类尽可能的小,要有公共的概念,能让更多的标签使用.</li><li>在css中尽可能的使用classs,除非一些特殊的情况可以用id,id一般是用在js中的,也就是说js是通过id来获取到标签</li></ul></li><li><p>选择器的选择</p><ul><li>先看标签元素有没有被选中,如果被选中了,就数数(id,class,标签的数量) 谁的权重大,就显示谁的属性,权重一样大,后来者居上</li><li>如果没有被选中标签,权重为0</li><li>如果属性都是被继承下来的,权重都是0,就近原则,谁描述的近就显示谁的属性</li></ul></li></ul><h3 id="5-盒模型"><a href="#5-盒模型" class="headerlink" title="5.盒模型"></a>5.盒模型</h3><ul><li><p>在css中,box model这一术语是用来设计和布局时使用的,在网页中显示一些方方正正的盒子,这种盒子就叫盒模型</p></li><li><p>盒模型有两种: 标准模型和IE模型(了解)</p></li><li><p>盒模型属性</p><ul><li><p>width : 内容的宽度</p></li><li><p>height : 内容的高度</p></li><li><p>padding : 内边距,边框到内容的距离,padding区域是有背景颜色的,且背景颜色和内容的颜色一样,也就是说background-color这个属性将填充所有的border以内的区域</p><ul><li><pre class="line-numbers language-html"><code class="language-html">padding-top: 30px;padding-right: 30px;padding-bottom: 30px;padding-left: 30px;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>border : 边框 ,盒子的宽度</p><ul><li><pre class="line-numbers language-html"><code class="language-html">/*上 右 下 左*/padding: 20px 30px 40px 50px ;/*上 左右  下*/padding: 20px 30px 40px;/* 上下 左右*/padding: 20px 30px;            /*上下左右*/padding: 20px;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>边框有三个要素,粗细,线性样式,颜色,(如不写粗细不显示边框,不写颜色默认黑色,只写线性样式,默认有上下左右 3px宽度的实体黑色边框</p></li><li><p>按照三要素来写border</p><ul><li><pre class="line-numbers language-html"><code class="language-html">border-width: 3px;border-style: solid;border-color: red;/*border-width: 5px 10px;border-style: solid dotted double dashed;border-color: red green yellow;*//*设置顺序 ：上 右 左 下*//*border-style: 实线，点状，双线，虚线*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>按照方向划分设置小属性</p><ul><li><pre><code>border-top-width: 10px;border-top-color: red;border-top-style: solid;border-right-width: 10px;border-right-color: red;border-right-style: solid;border-bottom-width: 10px;border-bottom-color: red;border-bottom-style: solid;border-left-width: 10px;border-left-color: red;border-left-style:solid;</code></pre></li></ul></li><li><p>按照方向设置</p><ul><li><pre><code>border-top: 10px solid red;border-right: 10px solid red;border-bottom: 10px solid red;border-left: 10pxb solid red;</code></pre></li></ul></li><li><p>设置border没有样式</p><ul><li><pre><code>border:none；border：0；表示border没有设置样式。</code></pre></li></ul></li><li><p>border-radius属性</p><ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">div<span class="token class">.box1</span></span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#f0809d</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">div<span class="token class">.box2</span></span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#7ef0c2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">div<span class="token class">.box3</span></span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">border-top-left-radius</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">border-bottom-right-radius</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>            <span class="token property">border-bottom-left-radius</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#b589f0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>利用border画三角形</p></li></ul></li></ul></li><li><p>margin : 外边框,盒子边框到附近盒子的距离</p><ul><li><p>在写网页的时候,一般要清除页面标签中的padding和margin,以便我们更好的去调整元素的位置</p><ul><li><pre class="line-numbers language-html"><code class="language-html">{  padding:0;  margin:0;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>效率不高,所以我们要是用并集选择器选中页面中应有的标签,搜索reset.css,可找到方法</p></li></ul></li><li><p>设置margin</p><ul><li><pre class="line-numbers language-html"><code class="language-html">/*表示四个方向的外边距离为20px*/margin: 20px;/*表示盒子向下移动了30px*/margin-top: 30px;/*表示盒子向右移动了50px*/margin-left: 50px;/*表示盒子距离右面的盒子100px*/margin-right: 100px;/*表示盒子距离下面的盒子100px*/margin-bottom: 100px;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>margin的塌陷</p><ul><li><pre class="line-numbers language-html"><code class="language-html">html:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>css:    *{            padding: 0;            margin: 0;        }        .father{            width: 400px;            border: 1px solid gray;            /*float: left;*/        }        .box1{            width: 300px;            height: 200px;            background-color: red;            margin-bottom: 20px;            /*float: left;*/        }        .box2{            width: 400px;            height: 300px;            background-color: green;            margin-top: 50px;            /*float: left;*/        }/*当给两个标准流下兄弟盒子 设置垂直方向上的margin时，那么以较大的为准，那么我们称这种现象叫塌陷。没法解决，我们称为这种技巧叫“奇淫技巧”。记住这种现象，在布局垂直方向盒子的时候注意margin的用法。当我们给两个标准流下的兄弟盒子设置浮动之后，就不会出现margin塌陷的问题。*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>margin : 0 auto;</p><ul><li><pre class="line-numbers language-html"><code class="language-html">div{            width: 780px;            height: 50px;            background-color: red;            /*水平居中盒子*/            margin: 0px auto;                        /*水平居中文字*/            text-align: center;        }/*当一个div元素设置margin：0 auto;时就会居中盒子，那我们知道margin:0 auto;表示上下外边距离为0，左右为auto的距离，那么auto是什么意思呢？设置margin-left:auto；我们发现盒子尽可能远离左侧，当设置margin-right:auto；我们发现盒子尽可能远离右侧。当两条语句并存的时候，我们发现盒子尽可能远离两侧，此时盒子就居中了。如果给盒子设置浮动，那么margin:0 auto失效。使用margin：0 auto;注意点：1.使用margin: 0 auto;水平居中盒子必须有width，要有明确width，文字水平居中使用text-align: center;2.只有标准流下的盒子 才能使用margin:0 auto; 当一个盒子浮动了，固定定位，绝对定位(后面会讲)，margin:0 auto; 不能用了3.margin：0 auto;居中盒子。而不是居中文本，文字水平居中使用text-align: center;*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>善于使用父亲的padding,而不是margin</p><ul><li>margin属性是描述兄弟盒子的关系,而padding描述的是父子盒子的关系</li><li>给父盒子设定border,或者padding,那么父盒子就不会因为子盒子的原因掉下来</li></ul></li></ul></li></ul><h3 id="6-标准文档流"><a href="#6-标准文档流" class="headerlink" title="6.标准文档流"></a>6.标准文档流</h3><ul><li>web网页的制作,从上往下设计,</li><li>空白折叠现象</li><li>高矮不齐,底边对齐<ul><li>图片文档的大小不一都会让页面出现高矮不齐的现象,但是遵循底边对齐</li></ul></li><li>自动换行,一行写不满,换行写</li></ul><h3 id="7-块级元素和行内元素的转换"><a href="#7-块级元素和行内元素的转换" class="headerlink" title="7.块级元素和行内元素的转换"></a>7.块级元素和行内元素的转换</h3><ul><li>行内元素<ul><li>与其他行内元素并排</li><li>不能设置宽高,默认的宽度就是文字的宽度</li></ul></li><li>块级元素<ul><li>霸占一行,不能与其他元素并列</li><li>能设置宽高,如果不设置宽高,那么宽度将默认变为父亲的100%</li></ul></li><li>相互转换<ul><li>可以通过display属性将会计元素和行内元素进行互相转换,display即”显示模式”</li><li>块级元素转换为行内元素<ul><li>display: inline;</li></ul></li><li>行内元素转换为块级元素<ul><li>display: block;</li></ul></li></ul></li></ul><h3 id="8-css脱离标准文档流的三种方式"><a href="#8-css脱离标准文档流的三种方式" class="headerlink" title="8.css脱离标准文档流的三种方式"></a>8.css脱离标准文档流的三种方式</h3><ul><li><p>浮动 ; float</p><ul><li><p>属性</p><ul><li>none:表示不浮动,默认</li><li>left,左浮动</li><li>right,右浮动</li></ul></li><li><p>四大特性</p><ul><li>浮动的元素会脱离标准文档流</li><li>浮动的元素互相贴靠</li><li>浮动的元素有”子围”效果<ul><li>当div浮动,p不浮动,div遮盖了p,div的层级提高,但是p中的文字不会被遮盖,此时就形成了子围效果</li></ul></li><li>收缩的效果<ul><li>一个浮动的元素,如果没有设置width,那么就自动收缩为文字的高度</li></ul></li></ul></li><li><p>清除浮动</p><ul><li><p>给父盒子设定高度,但是使用不灵活,常用于页面中固定高度,且子元素并排显示的布局,比如导航栏</p></li><li><p>clear:both</p><ul><li>left:当前元素的左边不许有浮动的元素</li><li>right: 当前元素的有边不许有浮动的元素</li><li>both:两边都不许有</li></ul></li><li><p>伪元素清除法(常用)</p><ul><li><p>给浮动子元素的父盒子,也就是不浮动元素,添加一个clearfix类,然后设置</p><ul><li><pre class="line-numbers language-html"><code class="language-html">.clearfix:after{    /*必须要写这三句话*/    content: '.';    clear: both;    display: block;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul></li><li><p>overflow:hidden</p><ul><li><p>overflow属性规定当内容溢出元素框时发生的事情。</p><p>说明：</p><p>这个属性定义溢出元素内容区的内容会如何处理。如果值为 scroll，不论是否需要，用户代理都会提供一种滚动机制。因此，有可能即使元素框中可以放下所有内容也会出现滚动条。</p><p>有五个值：</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>visible</td><td>默认值。内容不会被修剪，会呈现在元素框之外。</td></tr><tr><td>hidden</td><td>内容会被修剪，并且其余内容是不可见的。</td></tr><tr><td>scroll</td><td>内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</td></tr><tr><td>auto</td><td>如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</td></tr><tr><td>inherit</td><td>规定应该从父元素继承 overflow 属性的值。</td></tr></tbody></table></li></ul></li></ul></li><li><p>定位</p><ul><li><p>定位分为三种:决定定位,相对定位,固定定位</p></li><li><p>相对定位</p><ul><li><p>现象和使用：</p><p>1.如果对当前元素仅仅设置了相对定位，那么与标准流的盒子什么区别。</p><p>2.设置相对定位之后，我们才可以使用四个方向的属性： top、bottom、left、right</p><p>特性：1.不脱标  2.形影分离  3.老家留坑（占着茅房不拉屎，恶心人）</p><p>所以说相对定位在页面中没有什么太大的作用。影响我们页面的布局。我们不要使用相对定位来做压盖效果</p><p>用途：</p><p>1.微调元素位置</p><p>2.做绝对定位的参考（父相子绝）绝对定位会说到此内容。</p></li></ul></li><li><p>绝对定位</p><ul><li><p>特性：1.脱标  2.做遮盖效果，提成了层级。设置绝对定位之后，不区分行内元素和块级元素，都能设置宽高。</p><p>参考点(重点)：</p><p>一、单独一个绝对定位的盒子</p><p>1.当我使用top属性描述的时候 是以页面的左上角（跟浏览器的左上角区分）为参考点来调整位置<br>2.当我使用bottom属性描述的时候。是以首屏页面左下角为参考点来调整位置。</p><p>二、以父辈盒子作为参考点</p><p>1.父辈元素设置相对定位，子元素设置绝对定位，那么会以父辈元素左上角为参考点，这个父辈元素不一定是爸爸，它也可以是爷爷，曾爷爷。</p><p>2.如果父亲设置了定位，那么以父亲为参考点。那么如果父亲没有设置定位，那么以父辈元素设置定位的为参考点</p><p>3.不仅仅是父相子绝，父绝子绝 ，父固子绝,都是以父辈元素为参考点</p><p>注意了：父绝子绝，没有实战意义，做站的时候不会出现父绝子绝。因为绝对定位脱离标准流，影响页面的布局。相反‘父相子绝’在我们页面布局中，是常用的布局方案。因为父亲设置相对定位，不脱离标准流，子元素设置绝对定位，仅仅的是在当前父辈元素内调整该元素的位置。</p><p>还要注意，绝对定位的盒子无视父辈的padding</p><p><strong>作用：页面布局常见的“父相子绝”，一定要会！！！！</strong></p></li></ul></li><li><p>固定定位</p><ul><li><p>固定当前的元素不会随着页面滚动而滚动</p><p>特性: 1.脱标 2.遮盖，提升层级 3.固定不变</p><p>参考点：</p><p>设置固定定位，用top描述。那么是以浏览器的左上角为参考点<br>如果用bottom描述，那么是以浏览器的左下角为参考点</p><p>作用： 1.返回顶部栏 2.固定导航栏 3.小广告</p></li></ul></li><li><p>z-index</p><ul><li><p>指的就是各个盒子重叠在一起谁上谁下的问题。</p><p>四大特性，只要你记住了，页面布局就不会出现找不到盒子的情况。</p><ul><li><ul><li><ul><li>z-index 值表示谁压着谁，数值大的压盖住数值小的，</li><li>只有定位了的元素，才能有z-index,也就是说，不管相对定位，绝对定位，固定定位，都可以使用z-index，而浮动元素不能使用z-index</li><li>z-index值没有单位，就是一个正整数，默认的z-index值为0如果大家都没有z-index值，或者z-index值一样，那么谁写在HTML后面，谁在上面压着别人，定位了元素，永远压住没有定位的元素。</li><li>从父现象：父亲怂了，儿子再牛逼也没用</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="8-文本属性和字体属性"><a href="#8-文本属性和字体属性" class="headerlink" title="8.文本属性和字体属性"></a>8.文本属性和字体属性</h3><ul><li><p>文本属性</p><ul><li><table><thead><tr><th>属性</th><th>描述</th><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>text-align</td><td>文本对齐方式</td><td>nonecenterleftrightjustify</td><td></td></tr><tr><td>color</td><td>文本颜色</td><td></td><td></td></tr><tr><td>text-indent</td><td>首行缩进，单位建议em</td><td></td><td></td></tr><tr><td>text-decoration</td><td>规定文本修饰的样式</td><td>none   underline  overline  line-throughinherit</td><td>默认下划线定义文本上的一条线定义穿过文本下的一条线继承父元素text-decoration属性的值</td></tr><tr><td>line-height</td><td>行高</td><td></td><td>针对单行文本垂直居中公式：行高=盒子高度，使文本垂直居中，只适用单行文本。针对多行文本垂直居中行高不能小于字体，不然字会紧挨一起。</td></tr><tr><td>text-shadow</td><td>阴影</td><td>5px 5px 5px #FF0000</td><td>水平方向偏移量垂直方向偏移量模糊度阴影颜色</td></tr><tr><td>text-overflow</td><td>文字溢出</td><td>clipellipsis</td><td>修剪文本显示省略号代表被修剪文本</td></tr><tr><td>white-space</td><td>处理元素内的空白</td><td>normalprenowrappre-wrappre-lineinherit</td><td>默认。空白被浏览器忽略。空白会被浏览器保留文本不换行，直到遇到 <br>保留空白符序列，但正常地进行换行合并空白符序列，但是保留换行符继承父元素 white-space 属性的值</td></tr></tbody></table></li></ul></li><li><p>字体属性</p><ul><li><table><thead><tr><th>属性</th><th>描述</th><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>text-align</td><td>文本对齐方式</td><td>nonecenterleftrightjustify</td><td></td></tr><tr><td>color</td><td>文本颜色</td><td></td><td></td></tr><tr><td>text-indent</td><td>首行缩进，单位建议em</td><td></td><td></td></tr><tr><td>text-decoration</td><td>规定文本修饰的样式</td><td>none   underline  overline  line-throughinherit</td><td>默认下划线定义文本上的一条线定义穿过文本下的一条线继承父元素text-decoration属性的值</td></tr><tr><td>line-height</td><td>行高</td><td></td><td>针对单行文本垂直居中公式：行高=盒子高度，使文本垂直居中，只适用单行文本。针对多行文本垂直居中行高不能小于字体，不然字会紧挨一起。</td></tr><tr><td>text-shadow</td><td>阴影</td><td>5px 5px 5px #FF0000</td><td>水平方向偏移量垂直方向偏移量模糊度阴影颜色</td></tr><tr><td>text-overflow</td><td>文字溢出</td><td>clipellipsis</td><td>修剪文本显示省略号代表被修剪文本</td></tr><tr><td>white-space</td><td>处理元素内的空白</td><td>normalprenowrappre-wrappre-lineinherit</td><td>默认。空白被浏览器忽略。空白会被浏览器保留文本不换行，直到遇到 <br>保留空白符序列，但正常地进行换行合并空白符序列，但是保留换行符继承父元素 white-space 属性的值</td></tr></tbody></table></li></ul></li></ul><h3 id="9-background"><a href="#9-background" class="headerlink" title="9.background"></a>9.background</h3><ul><li><p>background-color : 背景颜色</p></li><li><p>background-image : 背景图片</p><ul><li><table><thead><tr><th>background-repeat：设置背景图像的平铺方式</th><th></th></tr></thead><tbody><tr><td>repeatrepeat-xrepeat-yno-repeateinherit</td><td>默认。背景图像将在垂直方向和水平方向重复背景图像将在水平方向重复背景图像将在垂直方向重复背景图像将仅显示一次规定应该从父元素继承 background-repeat 属性的设置</td></tr><tr><td>background-position：设置背景图像的起始位置</td><td></td></tr><tr><td>垂直位置 水平位置</td><td>可以从两个纬度上设定关键词：上中下 左中右垂直位置：top center bottom水平位置：left center right如仅规定了一个关键词，那么第二个值将是”center”。默认值：0 0；这两个值必须挨在一起。</td></tr><tr><td>background-attachment：设置固定的背景图像</td><td></td></tr><tr><td>scrollfixedinherit</td><td>默认值。背景图像会随着页面其余部分的滚动而移动。当页面的其余部分滚动时，背景图像不会移动。规定应该从父元素继承 background-attachment 属性的设置。</td></tr></tbody></table></li></ul></li></ul><h1 id="JavaScript篇"><a href="#JavaScript篇" class="headerlink" title="JavaScript篇"></a>JavaScript篇</h1><h2 id="ECMAScript-语法标准"><a href="#ECMAScript-语法标准" class="headerlink" title="ECMAScript:语法标准"></a>ECMAScript:语法标准</h2><h3 id="1-js介绍"><a href="#1-js介绍" class="headerlink" title="1.js介绍"></a>1.js介绍</h3><ul><li>JavaScript分为三层<ul><li>ECMAScript : JavaScript的语法标准,包括变量,表达式,运算符,函数,if语句,for语句等</li><li>DOM : 文档对象模型,操作网页上的元素的API,比如让盒子移动变色轮播图等</li><li>BOM : 浏览器对象模型,操作浏览器功能的部分API,比如让浏览器自动滚动</li></ul></li><li>优点<ul><li>JavaScript对初学者比较友好</li><li>JavaScript是有界面效果的(比如C语言就只有白底黑字)</li><li>JavaScript是弱变量型的语言,变量只需要用var来声明,而java中的变量的声明,要根据变量的类型来定义</li></ul></li><li>特点<ul><li>简单易用:可以使用任何的文本编辑器编写,只需要浏览器就能执行程序</li><li>解释执行(解释语言) ; 事先不编译,逐行执行,无需进行严格的变量声明</li></ul></li><li>语法要求<ul><li>JavaScript对换行缩进空格不敏感</li><li>所有的符号都是英文的</li></ul></li><li>js代码的引入<ul><li>在页面中，我们可以在body标签中放入<code>&lt;script type=”text/javascript”&gt;&lt;/script&gt;</code>标签对儿，<code>&lt;script type=”text/javascript”&gt;&lt;/script&gt;</code>标签对儿</li></ul></li></ul><h3 id="2-js变量和复制"><a href="#2-js变量和复制" class="headerlink" title="2.js变量和复制"></a>2.js变量和复制</h3><ul><li>变量<ul><li>变量有命名规范: 只能有字母数字下划线,美元符号$构成,且不能以数字开头,并且不能是JavaScript中的保留字,变量区分大小写</li></ul></li><li>赋值<ul><li>将等号右边的值,赋值给左边的变量,等号右边的变量的值不变</li></ul></li><li>注释<ul><li>单行注释(//)是ctrl + /,多汗注释(/*   */)是ctrl + shift +/</li></ul></li></ul><h3 id="3-输入输出信息"><a href="#3-输入输出信息" class="headerlink" title="3.输入输出信息"></a>3.输入输出信息</h3><ul><li>弹出警告框 : alert语句</li><li>控制台输出console.log(“”)和输入框prompt()</li></ul><h3 id="4-基础数据类型"><a href="#4-基础数据类型" class="headerlink" title="4.基础数据类型"></a>4.基础数据类型</h3><ul><li><p>number</p><ul><li>JavaScript中只要是数就是数值型的(number),无论整数,浮点数,无论大小,无论正负,都是number类型的</li></ul></li><li><p>string ; 字符串类型</p><ul><li><p>常用方法</p><ul><li><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>.length   #不加括号的是属性</td><td>返回长度</td></tr><tr><td>.trim()    #得到一个新值</td><td>移除空白</td></tr><tr><td>.trimLeft()</td><td>移除左边的空白</td></tr><tr><td>.trimRight()</td><td>移除右边的空白</td></tr><tr><td>.concat(value, …) #s1=’hello’;s.concat(‘xx’);得到helloxx</td><td>拼接</td></tr><tr><td>.charAt(n) #n类似索引，从0开始，超过最大值返回’’空字符串</td><td>返回第n个字符</td></tr><tr><td>.indexOf(substring, start) #这个start是从索引几开始找，没有返回-1</td><td>子序列位置</td></tr><tr><td>.substring(from, to) #不支持负数，所以一般都不用它，了解一下就行了</td><td>根据索引获取子序列</td></tr><tr><td>.slice(start, end) #var s1=’helloworld’;s1.slice(0,-5)看结果，就用它</td><td>切片</td></tr><tr><td>.toLowerCase() #全部变小写</td><td>小写</td></tr><tr><td>.toUpperCase()  #全部变大写</td><td>大写</td></tr><tr><td>.split(delimiter, limit)#分隔,s1.splite(‘ ‘),后面还可以加参数s1.split(‘ ‘，2),返回切割后的元素个数</td><td>分割</td></tr></tbody></table></li></ul></li></ul></li><li><p>布尔值 : boolean</p></li><li><p>空元素 : null</p></li><li><p>未定义 : undefined</p></li></ul><h3 id="5-内置数据类型"><a href="#5-内置数据类型" class="headerlink" title="5.内置数据类型"></a>5.内置数据类型</h3><ul><li><p>数组.Array</p><ul><li><p>数组的创建</p><ul><li><pre class="line-numbers language-html"><code class="language-html">var colors = ['red','color','yellow']; //字面量方式创建（推荐）var colors2 = new Array();//使用构造函数（后面会讲）的方式创建 使用new关键词对构造函数进行创建对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>数组的赋值</p><ul><li><pre class="line-numbers language-html"><code class="language-html">var arr = [];//通过下标进行一一赋值arr[0] = 123;arr[1] = '哈哈哈';arr[2] = '嘿嘿嘿'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>数组的常用方法</p><ul><li><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>.length</td><td>数组的大小</td></tr><tr><td>.push(ele)</td><td>尾部追加元素</td></tr><tr><td>.pop()</td><td>获取尾部的元素</td></tr><tr><td>.unshift(ele)</td><td>头部插入元素</td></tr><tr><td>.shift()</td><td>头部移除元素</td></tr><tr><td>.slice(start, end)</td><td>切片</td></tr><tr><td>.reverse() #在原数组上改的</td><td>反转</td></tr><tr><td>.join(seq)#a1.join(‘+’)，seq是连接符</td><td>将数组元素连接成字符串</td></tr><tr><td>.concat(val, …) #连个数组合并,得到一个新数组，原数组不变</td><td>连接数组</td></tr><tr><td>.sort()</td><td>排序</td></tr><tr><td>.forEach() #讲了函数再说</td><td>将数组的每个元素传递给回调函数</td></tr><tr><td>.splice() #参数：1.从哪删(索引), 2.删几个  3.删除位置替换的新元素(可多个元素)</td><td>删除元素，并向数组添加新元素。</td></tr><tr><td>.map()  #讲了函数再说</td><td>返回一个数组元素调用函数处理后的值的新数组</td></tr></tbody></table></li></ul></li><li><p>json对象</p><ul><li><pre class="line-numbers language-html"><code class="language-html">var str1 = '{"name": "chao", "age": 18}';var obj1 = {"name": "chao", "age": 18};// JSON字符串转换成对象var obj = JSON.parse(str1); // 对象转换成JSON字符串var str = JSON.stringify(obj1);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>日期: Date</p><ul><li><p>定义</p><ul><li><p>创建日期对象只有构造函数一种方式,使用关键字new</p></li><li><pre class="line-numbers language-html"><code class="language-html">var myDate = new Date();  //创建了一个date对象<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>常用方法</p><ul><li><img src="https://images2018.cnblogs.com/blog/1364810/201805/1364810-20180527115655555-1984356276.png" alt="img"></li></ul></li></ul></li><li><p>RegExp对象</p><ul><li><pre class="line-numbers language-html"><code class="language-html">//RegExp对象//创建正则对象方式1// 参数1 正则表达式(不能有空格)// 参数2 匹配模式：常用g(全局匹配;找到所有匹配，而不是在第一个匹配后停止)和i(忽略大小写)// 用户名只能是英文字母、数字和_，并且首字母必须是英文字母。长度最短不能少于6位 最长不能超过12位。// 创建RegExp对象方式（逗号后面不要加空格），假如匹配用户名是只能字母开头后面是字母加数字加下划线的5到11位的var reg1 = new RegExp("^[a-zA-Z][a-zA-Z0-9_]{5,11}$"); //注意，写规则的时候，里面千万不能有空格，不然匹配不出来你想要的内容，除非你想要的内容本身就想要空格，比如最后这个{5,11},里面不能有空格// 匹配响应的字符串var s1 = "bc123";//RegExp对象的test方法，测试一个字符串是否符合对应的正则规则，返回值是true或false。reg1.test(s1);  // true// 创建方式2，简写的方式// /填写正则表达式/匹配模式（逗号后面不要加空格）var reg2 = /^[a-zA-Z][a-zA-Z0-9_]{5,11}$/; reg2.test(s1);  // true注意，此处有坑：如果你直接写一个reg2.test()，test里面啥也不传，直接执行，会返回一个true，用其他的正则规则，可能会返回false，是因为，test里面什么也不传，默认传的是一个undefined，并且给你变成字符串undefined，所以能够匹配undefined的规则，就能返回true，不然返回false// String对象与正则结合的4个方法var s2 = "hello world";s2.match(/o/g);         // ["o", "o"]             查找字符串中 符合正则 的内容 ，/o/g后面这个g的意思是匹配所有的o,s2.search(/h/g);        // 0                      查找字符串中符合正则表达式的内容位置，返回第一个配到的元素的索引位置，加不加g效果相同s2.split(/o/g);         // ["hell", " w", "rld"]  按照正则表达式对字符串进行切割，得到一个新值，原数据不变s2.replace(/o/g, "s");  // "hells wsrld"          对字符串按照正则进行替换// 关于匹配模式：g和i的简单示例var s1 = "name:Alex age:18";s1.replace(/a/, "哈哈哈");      // "n哈哈哈me:Alex age:18"s1.replace(/a/g, "哈哈哈");     // "n哈哈哈me:Alex 哈哈哈ge:18"      全局匹配s1.replace(/a/gi, "哈哈哈");    // "n哈哈哈me:哈哈哈lex 哈哈哈ge:18"  不区分大小写// 注意事项1：// 如果regExpObject带有全局标志g，test()函数不是从字符串的开头开始查找，而是从属性regExpObject.lastIndex所指定的索引处开始查找。// 该属性值默认为0，所以第一次仍然是从字符串的开头查找。// 当找到一个匹配时，test()函数会将regExpObject.lastIndex的值改为字符串中本次匹配内容的最后一个字符的下一个索引位置。// 当再次执行test()函数时，将会从该索引位置处开始查找，从而找到下一个匹配。// 因此，当我们使用test()函数执行了一次匹配之后，如果想要重新使用test()函数从头开始查找，则需要手动将regExpObject.lastIndex的值重置为 0。// 如果test()函数再也找不到可以匹配的文本时，该函数会自动把regExpObject.lastIndex属性重置为 0。var reg3 = /foo/g;// 此时 regex.lastIndex=0reg3.test('foo'); // 返回true// 此时 regex.lastIndex=3reg3.test('xxxfoo'); // 还是返回true// 所以我们在使用test()方法校验一个字符串是否完全匹配时，一定要加上^和$符号，把匹配规则写的确定一些，尽量不用上面这种的写法/xxx/。// 注意事项2(说出来你可能不信系列)：// 当我们不加参数调用RegExpObj.test()方法时, 相当于执行RegExpObj.test(undefined)，然后将这个undefined又转为字符串"undefined",去进行匹配了, 并且/undefined/.test()默认返回true。var reg4 = /^undefined$/;reg4.test(); // 返回truereg4.test(undefined); // 返回truereg4.test("undefined"); // 返回true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>数学相关 Math</p><ul><li>常用方法</li><li><img src="https://images2018.cnblogs.com/blog/1364810/201805/1364810-20180527115730266-1931075271.png" alt="img"></li></ul></li></ul></li></ul><h3 id="6-数据类型之间的转换"><a href="#6-数据类型之间的转换" class="headerlink" title="6.数据类型之间的转换"></a>6.数据类型之间的转换</h3><ul><li><p>parseint() : 字符串转数字</p></li><li><p>parseFloat() : 字符串转小数</p></li><li><p>String() 和.toString() : 转字符串</p><ul><li><pre class="line-numbers language-html"><code class="language-html">var n1 = 123;var str1 = String(n1);console.log(typeof str1);var num = 234;console.log(num.toString())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>Boolean() : 任何数据类型都可以转成布尔值</p><ul><li><pre class="line-numbers language-html"><code class="language-html">var b1 = '123';  // truevar b3 = -123;  // truevar b4 = Infinity; //表示正无穷大 truevar b2 = 0;       // falsevar b5 = NaN;     //falsevar b6;              //表示undefined //falsevar b7 = null;    //false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="7-运算符"><a href="#7-运算符" class="headerlink" title="7.运算符"></a>7.运算符</h3><ul><li>字符串可以相加,数字也可以相加,字符串和数字也可以相加,但是会自动把结果转换成字符串</li><li>字符串 - 数值 = 数值</li></ul><h3 id="8-流程控制"><a href="#8-流程控制" class="headerlink" title="8.流程控制"></a>8.流程控制</h3><ul><li><p>if单分支</p></li><li><p>if…else…</p></li><li><p>if…else if…else</p></li><li><p>case语句</p><ul><li><pre class="line-numbers language-html"><code class="language-html">var gameScore = 'better';switch(gameScore){//case表示一个条件 满足这个条件就会走进来 遇到break跳出。如果某个条件中不写 break，那么直到该程序遇到下一个break停止    case 'good':    console.log('玩的很好')    //break表示退出    break;    case  'better':    console.log('玩的老牛逼了')    break;    case 'best':    console.log('恭喜你 吃鸡成功')    break;    default:    console.log('很遗憾')}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>while循环</p></li><li><p>do-while循环</p><ul><li><pre class="line-numbers language-html"><code class="language-html">//不管有没有满足while中的条件do里面的代码都会走一次var i = 3;//初始化循环变量do{    console.log(i)    i++;//更新循环条件}while (i&lt;10) //判断循环条件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>for循环</p></li><li><p>三元运算符</p><ul><li><pre class="line-numbers language-html"><code class="language-html">var a = 1var b =2var c = a>b ? a:b  //如果a>b成立返回a，否则返回bconsole.log(c)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="9-函数"><a href="#9-函数" class="headerlink" title="9.函数"></a>9.函数</h3><ul><li><p>函数的定义</p><ul><li><pre class="line-numbers language-html"><code class="language-html">function 函数名字(){    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>函数的调用</p><ul><li>函数名();</li></ul></li><li><p>函数的参数和返回值:形参和实参</p><ul><li>注意: 实际参数和形式参数的个数,要相同</li><li>注意: 函数只能返回一个值,如果要返回多个值,只能将其放在数组或者对象中返回</li></ul></li><li><p>伪数组 : arguments</p><ul><li>arguments代表的是实参,arguments只在函数中使用</li><li>返回函数实参的个数 : arguments.length</li><li>获取形参的个数 : 函数名.length</li><li>之所以说arguments是伪数组,是因为; arguments可以修改元素,但是不能改变数组的长短</li></ul></li><li><p>匿名函数</p><ul><li><pre class="line-numbers language-html"><code class="language-html">// 匿名函数方式，多和其他函数配合使用，后面我们就会用到了var sum = function(a, b){  //在es6中，使用var，可能会飘黄，是因为在es6中，建议你使用let来定义变量，不过不影响你使用  return a + b;  }sum(1, 2);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>自执行函数</p><ul><li><pre class="line-numbers language-html"><code class="language-html">// 立即执行函数，页面加载到这里，这个函数就直接执行了，不需要被调用执行(function(a, b){  return a + b;})(1, 2);  //python中写可以这么写：ret=(lambda x,y:x+y)(10,20) 然后print(ret)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>函数的全局变量和局部变量</p><ul><li>局部变量: 在函数内部使用var声明的是局部变量,只有函数内部能访问它,函数运行完毕就会消失</li><li>全局变量: 在函数外部声明的变量是全局变量,网页上的所有脚本和函数都鞥呢访问它,全局变量会在页面关闭后删除</li></ul></li><li><p>作用域</p><ul><li>函数内部查找变量,如果找不到会再到外部查找,逐步找到最外层</li></ul></li></ul><h3 id="10-面向对象-了解"><a href="#10-面向对象-了解" class="headerlink" title="10.面向对象(了解)"></a>10.面向对象(了解)</h3><ul><li>创建对象的几种常用方式<ul><li>使用object或对象字面量创建对象</li><li>工厂模式创建对象</li><li>构造函数模式创建对象</li><li>原型模式创建对象</li></ul></li></ul><h3 id="11正则的用法"><a href="#11正则的用法" class="headerlink" title="11正则的用法"></a>11正则的用法</h3><ul><li><pre class="line-numbers language-html"><code class="language-html">创建一个正则:var reg = RegExp('正则表达式')  //注意,写在字符串中所有带\的元字符都会被转义,应该写作\\var reg2 = /正则表达式/  //内部的元字符就不会转义了reg.test('待检测的字符串') //如果字符串中含有符合表达式规则的内容就返回true,否则返回false在字符串中应用正则var exp = 'alex3714'exp.match(/\d/)    //只匹配从左到右的第一个exp.match(/\d/g)   //匹配所有符合规则的 返回一个数组var exp2 = 'Alex is a big sb'exp2.match(/a/) //只匹配小写aexp2.match(/a/i) //i表示不区分大小写 A也会被匹配出来exp2.match(/a/ig) //不区分大小写并匹配所有exp.search(/正则表达式/i) //不区分大小写,从exp字符串中找出符合条件的子串的第一个索引位置exp.split(/正则表达式/i,n) //不区分大小写,根据正则切割,返回前n个结果exp.replace(/正则/gi,'新的值') //i表示不区分大小写,g表示替换所有,将符合正则条件的内容替换成新的值小问题1var reg2 = /\d/g     //正则表示要匹配多个值reg2.test('a1b2c3')  //多次test会的到true true true false 继续test会循环之前的结果小问题2var reg3 = /\w{5,10}/reg3.test() //如果什么都不写,那么默认test中传递undefined参数,刚好可以符合9位字符串的规则<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="DOM-文档对象模型"><a href="#DOM-文档对象模型" class="headerlink" title="DOM:文档对象模型"></a>DOM:文档对象模型</h2><h3 id="1-DOM"><a href="#1-DOM" class="headerlink" title="1.DOM"></a>1.DOM</h3><ul><li><p>DOM:文档对象模型,DOM为文档提供了结构化表示,并定义了如何通过脚本来访问文档结构,目的其实是为了能让js操作heml元素而制定的一个规范</p></li><li><p>DOM就是由节点组成: heml加载完毕,渲染引擎会在内存中把HTML文档生成一个DOM树<img src="https://images2018.cnblogs.com/blog/1364810/201805/1364810-20180528220440235-730879308.png" alt="img"></p></li><li><p>由上图可知,在HTML中一切都是节点<font color="red">非常重要</font></p><ul><li>元素节点: HTML标签</li><li>文本节点: 标签中的文字(比如标签之间的空格,换行)</li><li>属性节点: 标签的属性</li><li>整个html文档就是一个文档节点所有节点都是Object</li></ul></li><li><p>利用DOM可以完成</p><ul><li>找对象(元素节点)</li><li>设置元素的属性值</li><li>设置元素的样式</li><li>动态创建和删除元素</li><li>事件的触发响应: 事件源,事件,事件的驱动程序</li></ul></li></ul><h3 id="2-节点查找"><a href="#2-节点查找" class="headerlink" title="2.节点查找"></a>2.节点查找</h3><ul><li><p>DOM节点的获取方式其实就是获取事件源的方式</p></li><li><p>直接查找:</p><ul><li><pre class="line-numbers language-html"><code class="language-html">var div1 = document.getElementById("box1");      //方式一：通过id获取单个标签var arr1 = document.getElementsByTagName("div1");     //方式二：通过 标签名 获得 标签数组，所以有svar arr2 = document.getElementsByClassName("hehe");  //方式三：通过 类名 获得 标签数组，所以有s//其中方式二、方式三获取的是标签数组，那么习惯性是先遍历之后再使用。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>特殊情况,只有一个元素</p></li><li><pre class="line-numbers language-html"><code class="language-html">即便如此，这一个值也是包在数组里的。这个值的获取方式如下：document.getElementsByTagName("div1")[0];    //取数组中的第一个元素document.getElementsByClassName("hehe")[0];  //取数组中的第一个元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>间接查找</p><ul><li><p>DOM的节点并不是孤立的,因此可以通过DOM节点之间的相对关系对他们进行访问,节点的访问呢关系是以属性的方式存在的<img src="https://images2018.cnblogs.com/blog/1364810/201805/1364810-20180528220938094-853745001.png" alt="img"></p></li><li><p>获取父节点</p><ul><li><pre class="line-numbers language-html"><code class="language-html">节点.parentNode<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>获取兄弟节点</p><ul><li><p><strong>总结</strong>：为了获取下一个<strong>元素节点</strong>，我们可以这样做：在IE678中用nextSibling，在火狐谷歌IE9+以后用nextElementSibling</p></li><li><p>为了获取前一个<strong>元素节点</strong>，我们可以这样做：在IE678中用previousSibling，在火狐谷歌IE9+以后用previousElementSibling</p></li><li><p>随意兄弟节点</p><ul><li><pre class="line-numbers language-html"><code class="language-html">节点自己.parentNode.children[index];  //随意得到兄弟节点<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li><li><p>获取子节点</p><ul><li><p>单个子节点</p><ul><li><strong>总结</strong>：为了获取第一个<strong>子元素节点</strong>，我们可以这样做：在IE678中用firstChild，在火狐谷歌IE9+以后用firstElementChild</li><li><strong>总结</strong>：为了获取最后一个<strong>子元素节点</strong>，我们可以这样做：在IE678中用lastChild，在火狐谷歌IE9+以后用lastElementChild</li></ul></li><li><p>所有子节点</p><ul><li><pre class="line-numbers language-html"><code class="language-html">子节点数组 = 父节点.childNodes;   //获取所有节点。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><pre class="line-numbers language-html"><code class="language-html">子节点数组 = 父节点.children;   //获取所有节点。用的最多。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><pre class="line-numbers language-html"><code class="language-html">nodeType == 1 表示的是元素节点（标签） 。记住：元素就是标签。nodeType == 2 表示是属性节点 了解nodeType == 3 是文本节点 了解<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul></li></ul><h3 id="3-节点操作"><a href="#3-节点操作" class="headerlink" title="3.节点操作"></a>3.节点操作</h3><ul><li><p>节点本身操作</p><ul><li><p>创建节点</p><ul><li><pre class="line-numbers language-html"><code class="language-html">新的标签(元素节点) = document.createElement("标签名");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>比如,创建一个li标签,或者创建一个不存在的adg标签,可以这样做</p><ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> a1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//创建一个li标签</span>    <span class="token keyword">var</span> a2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"adbc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//创建一个不存在的标签</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>插入节点</p><pre><code>父节点.appendChild(新的子节点);//方式1：父节点的最后插入一个新的子节点。 父节点.insertBefore(新的子节点,作为参考的子节点);//方式2：在参考节点前插入一个新的节点。如果参考节点为null，那么他将在父节点最后插入一个子节点。</code></pre></li><li><p>删除节点</p><pre><code>父节点.removeChild(子节点);//用父节点删除子节点。必须要指定是删除哪个子节点。node1.parentNode.removeChild(node1);//删除自己这个节点</code></pre></li><li><p>复制节点（克隆节点）</p><pre><code>要复制的节点.cloneNode();       //括号里不带参数和带参数false，效果是一样的。不带参数/带参数false：只复制节点本身，不复制子节点。要复制的节点.cloneNode(true);   //带参数true：既复制节点本身，也复制其所有的子节点。</code></pre></li><li><p>替换节点</p><pre class="line-numbers language-html"><code class="language-html">父节点.replaceChild(newnode, 某个节点);   //找到这个父标签里面的要被替换的子标签，然后用新的标签将该子标签替换掉<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>节点的属性操作</p><ul><li><p>获取节点属性值</p><ul><li><pre class="line-numbers language-html"><code class="language-html">元素节点.属性;元素节点[属性];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><pre class="line-numbers language-html"><code class="language-html">元素节点.getAttribute("属性名称");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>设置节点属性值</p><ul><li><pre class="line-numbers language-html"><code class="language-html">    myNode.src = "images/2.jpg"   //修改src的属性值    myNode.className = "image2-box";  //修改class的name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><pre class="line-numbers language-html"><code class="language-html">元素节点.setAttribute(属性名, 新的属性值);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>删除节点的属性</p><ul><li><pre class="line-numbers language-html"><code class="language-html">元素节点.removeAttribute(属性名);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li><li><p>节点文本操作</p><ul><li><p>获取文本节点的值</p><ul><li><pre class="line-numbers language-html"><code class="language-html">var divEle = document.getElementById("d1")divEle.innerText  #输入这个指令，一执行就能获取该标签和内部所有标签的文本内容divEle.innerHTML  #获取的是该标签内的所有内容，包括文本和标签<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>设置文本节点的值</p><ul><li><pre class="line-numbers language-html"><code class="language-html">var divEle = document.getElementById("d1")divEle.innerText="1"  divEle.innerHTML="<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>" #能识别成一个p标签<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>获取值的操作</p><ul><li><p>elemenNode.value  ; 适用于以下标签 ,用户输入或者选择类型的标签: input,select,textarea</p><ul><li><pre class="line-numbers language-html"><code class="language-html">var iEle = document.getElementById("i1");console.log(iEle.value);var sEle = document.getElementById("s1");console.log(sEle.value);var tEle = document.getElementById("t1");console.log(tEle.value);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>class的操作</p><ul><li><pre class="line-numbers language-html"><code class="language-html">className  获取所有样式类名(字符串)首先获取标签对象标签对象.classList.remove(cls)  删除指定类classList.add(cls)  添加类classList.contains(cls)  存在返回true，否则返回falseclassList.toggle(cls)  存在就删除，否则添加，toggle的意思是切换，有了就给你删除，如果没有就给你加一个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>指定css的操作</p><ul><li><pre class="line-numbers language-html"><code class="language-html">obj.style.backgroundColor="red"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>对于没有中横线的css属性直接用style.属性名即可,如:</p><ul><li><pre class="line-numbers language-html"><code class="language-html">obj.style.marginobj.style.widthobj.style.leftobj.style.position<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>对于含有中横线的css属性,将中横线后面的第一个字母换成大写即可,如</p><ul><li><pre class="line-numbers language-html"><code class="language-html">obj.style.marginTopobj.style.borderLeftWidthobj.style.zIndexobj.style.fontFamily<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul><h3 id="4-事件"><a href="#4-事件" class="headerlink" title="4.事件"></a>4.事件</h3><ul><li><p>JS是以事件驱动为核心的一门语言</p></li><li><p>事件三要素</p><ul><li>事件源,事件,事件驱动程序</li></ul></li><li><p>代码书写步骤</p><ul><li><pre class="line-numbers language-html"><code class="language-html">（1）获取事件源：document.getElementById(“box”); //类似与ios语言的 UIButton *adBtn = [UIButton buttonWithType:UIButtonTypeCustom];（2）绑定事件： 事件源box.事件onclick = function(){ 事件驱动程序 };（3）书写事件驱动程序：关于DOM的操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>常见事件如下<img src="https://images2018.cnblogs.com/blog/1364810/201805/1364810-20180528212850888-1985583768.png" alt="img"></p></li><li><p>获取事件源</p><ul><li><pre class="line-numbers language-html"><code class="language-html">var div1 = document.getElementById("box1");      //方式一：通过id获取单个标签var arr1 = document.getElementsByTagName("div1");     //方式二：通过 标签名 获得 标签数组，所以有svar arr2 = document.getElementsByClassName("hehe");  //方式三：通过 类名 获得 标签数组，所以有s　<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>绑定事件的方式</p><ul><li><p>直接绑定匿名函数</p></li><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> div1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//绑定事件的第一种方式</span>    div1<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是弹出的内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>先单独定义函数,再绑定</p></li><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> div1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//绑定事件的第二种方式</span>    div1<span class="token punctuation">.</span>onclick <span class="token operator">=</span> fn<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//注意，这里是fn，不是fn()。fn()指的是返回值。</span>    <span class="token comment" spellcheck="true">//单独定义函数</span>    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是弹出的内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><font color="yellow">注意上方代码的注释,绑定的时候,是fn,不是写fn(),fn代表的是整个函数,fn()代表的是返回值</font></li></ul></li><li><p>行内绑定</p></li><li><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--行内绑定--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fn()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是弹出的内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>事件驱动程序</p><ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token id">#box</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>            <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> oDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//点击鼠标时，原本粉色的div变大了，背景变红了</span>    oDiv<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        oDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">"200px"</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//属性值要写引号</span>        oDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">"200px"</span><span class="token punctuation">;</span>        oDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//属性名是backgroundColor，不是background-Color</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><font color="yellow">注意事项:</font></p><ul><li>在js里写属性值时，要用引号</li><li>在js里写属性名时，是<code>backgroundColor</code>，不是CSS里面的<code>background-Color</code>。记得所有的像css属性的text-*，line-*、backgroun-*等在js中都写成驼峰</li></ul></li></ul></li><li><p>onload事件</p><ul><li><p>当页面加载文本和图片完毕后,触发onload事件</p></li><li><p>有一点我们要知道：<strong>js的加载是和html同步加载的</strong>。因此，如果使用元素在定义元素之前，容易报错。这个时候，onload事件就能派上用场了，我们可以把使用元素的代码放在onload里，就能保证这段代码是最后执行。</p><p>建议是：整个页面上所有元素加载完毕在执行js内容。所以，window.onload可以预防使用标签在定义标签之前。</p></li><li><p>onload事件(屏幕可视区域)</p><ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">                <span class="token comment" spellcheck="true">// 屏幕的可视区域</span>        window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// document.documentElement 获取的是html标签</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 窗口大小发生变化时，会调用此方法</span>            window<span class="token punctuation">.</span>onresize <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                           <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>onload事件(offset系列)</p><ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token selector">*</span><span class="token punctuation">{</span>                <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">2000</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"> <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> green</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">5</span>px solid red<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span><span class="token number">50</span>px<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">/*             offsetWidth占位宽  内容+padding+border             offsetHeight占位高              * offsetTop: 如果盒子没有设置定位 到body的顶部的距离,如果盒子设置定位，那么是以父辈为基准的top值             * offsetLeft： 如果盒子没有设置定位 到body的左部的距离，如果盒子设置定位，那么是以父辈为基准的left值                          * */</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>offsetTop<span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">)</span>                    <span class="token punctuation">}</span>            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>onscroll事件</p><ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token selector">*</span><span class="token punctuation">{</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">2000</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">2000</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        &lt;div id = 'scroll' style="width: 200px;height: 200px;border: 1px solid red;overflow: auto;padding: 10px;margin: 5px 0px 0px 0px;">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城                路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城                路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城                路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城路飞学城            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">                window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//实施监听滚动事件</span>            window<span class="token punctuation">.</span>onscroll <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//                console.log(1111)</span><span class="token comment" spellcheck="true">//                console.log('上'+document.documentElement.scrollTop)</span><span class="token comment" spellcheck="true">//                console.log('左'+document.documentElement.scrollLeft)</span><span class="token comment" spellcheck="true">//                console.log('宽'+document.documentElement.scrollWidth)</span><span class="token comment" spellcheck="true">//                console.log('高'+document.documentElement.scrollHeight)</span>                                            <span class="token punctuation">}</span>                        <span class="token keyword">var</span> s <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        s<span class="token punctuation">.</span>onscroll <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            scrollHeight : 内容的高度+padding  不包含边框</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'上'</span><span class="token operator">+</span>s<span class="token punctuation">.</span>scrollTop<span class="token punctuation">)</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'左'</span><span class="token operator">+</span>s<span class="token punctuation">.</span>scrollLeft<span class="token punctuation">)</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'宽'</span><span class="token operator">+</span>s<span class="token punctuation">.</span>scrollWidth<span class="token punctuation">)</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'高'</span><span class="token operator">+</span>s<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="BOM-浏览器对象模型"><a href="#BOM-浏览器对象模型" class="headerlink" title="BOM:浏览器对象模型"></a>BOM:浏览器对象模型</h2><h3 id="1-BOM-Browser-Object-Model-浏览器对象模型"><a href="#1-BOM-Browser-Object-Model-浏览器对象模型" class="headerlink" title="1.BOM: Browser Object Model,浏览器对象模型"></a>1.BOM: Browser Object Model,浏览器对象模型</h3><ul><li>结构图<ul><li><img src="https://images2018.cnblogs.com/blog/1364810/201805/1364810-20180529172315923-104404745.png" alt="img"></li><li>window对象是BOM的顶层(核心)对象,所有对象都是通过它延伸出来的,也可以成为window的子对象</li><li>DOM是BOM的一部分</li></ul></li></ul><h3 id="2-BOM常见的内置方法和内置对象"><a href="#2-BOM常见的内置方法和内置对象" class="headerlink" title="2.BOM常见的内置方法和内置对象"></a>2.BOM常见的内置方法和内置对象</h3><ul><li><p>window对象</p><ul><li><p>弹出系统对话框</p><ul><li><pre class="line-numbers language-html"><code class="language-html">alert();    //不同浏览器中的外观是不一样的confirm();  //兼容不好prompt();   //不推荐使用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>打开窗口,关闭窗口</p><ul><li><p>打开窗口</p><ul><li><pre class="line-numbers language-html"><code class="language-html">window.open(url,target)//url：要打开的地址。//target：新窗口的位置。可以是：_blank 、_self、 _parent 父框架。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>关闭窗口</p><ul><li><pre class="line-numbers language-html"><code class="language-html">window.close() - 关闭当前窗口 (只能关闭用js的window.open()打开的页面，了解一下就行了)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li><li><p>获取窗口宽高</p><ul><li><pre class="line-numbers language-html"><code class="language-html">window.innerHeight - 浏览器窗口的内部高度window.innerWidth - 浏览器窗口的内部宽度 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>定时器</p><ul><li><p>setTimeOut():在指定时间后执行一次</p><ul><li><pre class="line-numbers language-html"><code class="language-html">/定时器 异步运行  function hello(){  alert("hello");  }  //使用方法名字执行方法  var t1 = window.setTimeout(hello,1000);  var t2 = window.setTimeout("hello()",3000);//使用字符串执行方法  window.clearTimeout(t1);//去掉定时器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>setInterval():指定时间为周期循环执行</p><ul><li><pre class="line-numbers language-html"><code class="language-html">/实时刷新  时间单位为毫秒  var t = setInterval('refreshQuery()',8000);   /* 刷新查询 */  function refreshQuery(){    console.log('每8秒调一次') }window.clearInterval(t)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul></li><li><p>location对象</p><ul><li><p>window.location可以简写成location,location相当于浏览器的地址栏,可以将url解析成独立的片段</p></li><li><p>属性</p><ul><li><p>href:跳转</p><ul><li><p>页面不存在时5秒后跳转到指定页面,可以用location</p></li><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"http://www.baidu.com"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>点击盒子时进行跳转</p></li><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>smyhvae<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"http://www.baidu.com"</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//点击div时，跳转到指定链接</span> <span class="token comment" spellcheck="true">//     window.open("http://www.baidu.com","_blank");  //方式二</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>location.reload()重新加载:</p></li><li><pre class="line-numbers language-html"><code class="language-html">setTimeout(function(){         //3秒之后让网页整个刷新    window.location.reload();                        },3000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>hash 返回url中#后面的内容,包含#</p></li><li><p>host 主机名,包括端口</p></li><li><p>hostname 主机名</p></li><li><p>pathname url中的路径部分</p></li><li><p>protocal 协议,一般是http,https</p></li><li><p>search 查询字符串</p></li></ul></li></ul></li><li><p>navigator对象</p><ul><li><p>window.navigator的一些属性可以获取客户端的一些信息</p><ul><li>userAgent:系统,浏览器</li><li>platform : 浏览器支持的系统,win/mac/linux</li></ul></li><li><p>例子</p><ul><li><pre class="line-numbers language-html"><code class="language-html">console.log(navigator.userAgent);console.log(navigator.platform);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>history对象</p><ul><li><p>后退</p><ul><li><pre class="line-numbers language-html"><code class="language-html">history.back()history.go(-1)：0是刷新<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>前进</p><ul><li><pre class="line-numbers language-html"><code class="language-html">history.forward()history.go(1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>screen对象(了解)</p><ul><li><p>屏幕对象,不常用</p></li><li><pre class="line-numbers language-html"><code class="language-html">screen.availWidth - 可用的屏幕宽度screen.availHeight - 可用的屏幕高度<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul><h1 id="jQuery篇"><a href="#jQuery篇" class="headerlink" title="jQuery篇"></a>jQuery篇</h1><h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><h3 id="1-为什么使用jQuery"><a href="#1-为什么使用jQuery" class="headerlink" title="1.为什么使用jQuery?"></a>1.为什么使用jQuery?</h3><ul><li><p>js中window onload事件只能出现一次,如果出现多次,后面的事件会覆盖掉前面的事件</p></li><li><p>js代码容错差</p></li><li><p>简单的动画效果实现很繁琐,例如简单的动画渐变效果</p></li><li><p>jQuery的两大特点</p><ul><li>链式编程:比如 .show() 和. html()可以连写为.show().html().</li><li>隐式迭代 : 隐式对应的是显式,隐式迭代的意思是: 在方法的内部循环遍历,而不用我们自己再进行循环,简化我们的操作,方便我们调用</li></ul></li></ul><h3 id="2-什么是Jquery"><a href="#2-什么是Jquery" class="headerlink" title="2.什么是Jquery"></a>2.什么是Jquery</h3><ul><li><p>Jquery是js的一个库,封装了我们开发过程中常用的一些功能,方便我们调用,提高开发效率</p></li><li><p>js库是把我们常用的复杂功能封装到简单的方法中,我们用的时候,将库直接引入然后调用方法即可<img src="https://img2018.cnblogs.com/blog/827651/201908/827651-20190814214439879-287447194.png" alt="img"></p></li><li><p>使用步骤</p><ul><li><img src="https://img2018.cnblogs.com/blog/827651/201908/827651-20190803010126992-1481898717.png" alt="img"></li></ul></li><li><p>导入包的代码一定要放在js代码的最上面</p></li></ul><h3 id="3-入口函数"><a href="#3-入口函数" class="headerlink" title="3.入口函数"></a>3.入口函数</h3><ul><li><p>原生的js’的入口函数指的是:window.onload = function() {}</p></li><li><p>jQuery的入口函数,有以下几个写法</p><ul><li><p>写法一: 文档加载完毕,图片不加字啊的时候,可以执行这个函数</p><ul><li><pre class="line-numbers language-html"><code class="language-html">$(document).ready(function () {           alert(1);       })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>写法二: 写法一的简洁版</p><ul><li><pre class="line-numbers language-html"><code class="language-html">$(function () {           alert(1);       });<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>写法三: 文档加载完毕,图片也加载完毕的时候,在执行这个函数</p><ul><li><pre class="line-numbers language-html"><code class="language-html">$(window).ready(function () {           alert(1);       })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>jQuery入口函数与js入口函数的区别</p><ul><li><p>书写个数不同:</p><ul><li>js的入口函数只能出现一次,出现多次会存在事件覆盖效果</li><li>jQuery的入口函数&lt;可以出现任意多次,并不存在事件覆盖效果</li></ul></li><li><p>执行时机不同</p><ul><li>js的入口函数是在所有的文件资源加载完成后,才执行,这些文件资源包括:页面文档,外部的js文件,外部的css文件,图片等</li><li>jQuery的入口函数,是在文档加载完成后,再执行,文档加载完成指的是:DOM树加载完成后,就可以操作DOM了,不用等到所有额外部资源都加载完毕</li></ul></li></ul></li></ul><h3 id="4-jQuery的-符号"><a href="#4-jQuery的-符号" class="headerlink" title="4.jQuery的$符号"></a>4.jQuery的$符号</h3><ul><li>jQuery使用$的原因:书写简洁,相对于其他字符与众不同,容易被记住,</li><li>Jquery占用了我们两个变量: $和JQuery.在代码中这两个变量都是一样的</li></ul><h3 id="5-js中的DOM对象和jQuery对象的比较重点"><a href="#5-js中的DOM对象和jQuery对象的比较重点" class="headerlink" title="5.js中的DOM对象和jQuery对象的比较重点"></a>5.js中的DOM对象和jQuery对象的比较<font color="yellow">重点</font></h3><ul><li><p>二者的区别</p><ul><li><p>通过Jquery获取的元素是一个jq对象数组,其中包含着原生js中的DOM对象,</p></li><li><p>对于这样一个div结构</p><ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>js获取元素节点方式</p><ul><li><pre class="line-numbers language-html"><code class="language-html">    var myBox = document.getElementById("app");           //通过 id 获取单个元素    var boxArr = document.getElementsByClassName("box");  //通过 class 获取的是伪数组    var divArr = document.getElementsByTagName("div");    //通过标签获取的是伪数组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>jQuery获取这些元素节点的方式:(获取的都是数组)</p><ul><li><pre class="line-numbers language-html"><code class="language-html">//获取的是数组，里面包含着原生 JS 中的DOM对象。   　　console.log($('#app'));   　　console.log($('.box'));   　　console.log($('div'));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>总结:jQuery就是把DOM对象重新包装一下,让其具有jQuery方法\</p></li></ul></li></ul></li><li><p>二者的相互转换</p><ul><li><p>DOM对象转换为jQuery对象</p><ul><li><pre class="line-numbers language-html"><code class="language-html">$(js对象);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>jQuery对象转为DOM对象</p><ul><li><pre class="line-numbers language-html"><code class="language-html">jquery对象[index];      //方式1（推荐）jquery对象.get(index);  //方式2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>jquery对象转换成了DOM对象之后,可以直接调用DOM提供的一些功能,如\</p><ul><li><pre class="line-numbers language-html"><code class="language-html">$('div')[1].style.backgroundColor = 'yellow';$('div')[3].style.backgroundColor = 'green';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul><h3 id="6-jQuery的选择器"><a href="#6-jQuery的选择器" class="headerlink" title="6.jQuery的选择器"></a>6.jQuery的选择器</h3><ul><li><p>分为基本选择器,层级选择器,属性选择器</p></li><li><p>基本选择器</p><ul><li><pre><code>$("#id")         //id选择器$("tagName")     //标签选择器$(".className")  //class选择器$("*")           //通用选择器$("div.c1")      // 交集选择器 找到有含有c1类的div标签$("#id, .className, tagName") //并集选择器</code></pre></li></ul></li><li><p>层级选择器</p><ul><li><pre class="line-numbers language-html"><code class="language-html">$("x y");// x的所有后代y（子子孙孙）$("x > y");// x的所有儿子y（儿子）$("x + y")// 找到所有紧挨在x后面的y$("x ~ y")// x之后所有的兄弟y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>属性选择器</p><ul><li><pre class="line-numbers language-html"><code class="language-html">$('[href]')       //找所有含href属性的标签$('a[href]')      //找所有含href属性的a标签$('a[title="luffy"]') //找所有title属性是luffy的a标签$('a[title="baidu"]') //找所有title属性不是百度的a标签$('a[href^="https"]') //找所有href属性以https开头的a标签$('a[href$="html"]')  //找所有href属性以html结尾的a标签$('a[href*="i"]')  //找所有href属性中含有i的a标签$('a[href][title="luffy"]') //找所有含有href属性且title属性=luffy的a标签 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="7-jQuery的筛选器"><a href="#7-jQuery的筛选器" class="headerlink" title="7.jQuery的筛选器"></a>7.jQuery的筛选器</h3><ul><li><p>基本筛选器</p><ul><li><pre class="line-numbers language-html"><code class="language-html">:first // 第一个:last // 最后一个:eq(index)// 索引等于index的那个元素:even // 匹配所有索引值为偶数的元素，从 0 开始计数:odd // 匹配所有索引值为奇数的元素，从 0 开始计数:gt(index)// 匹配所有大于给定索引值的元素:lt(index)// 匹配所有小于给定索引值的元素:not(元素选择器)// 移除所有满足not条件的标签:has(元素选择器)// 根据含有某个后代筛选<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>表单筛选器</p><ul><li><pre class="line-numbers language-html"><code class="language-html">type筛选器:text:password:file:radio:checkbox:submit:reset:button<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>其他属性筛选器</p><ul><li><pre class="line-numbers language-html"><code class="language-html">:enabled:disabled:checked:selected<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="8-筛选器方法"><a href="#8-筛选器方法" class="headerlink" title="8.筛选器方法"></a>8.筛选器方法</h3><ul><li><pre class="line-numbers language-html"><code class="language-html">//找兄弟$("#id").siblings();// 兄弟们，不包含自己，.siblings('#id')，可以在添加选择器进行进一步筛选//找弟弟$("#id").next()$("#id").nextAll()$("#id").nextUntil("#i2") #直到找到id为i2的标签就结束查找，不包含它//找哥哥$("#id").prev()$("#id").prevAll()$("#id").prevUntil("#i2")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html">//找祖辈$("#id").parent()$("#id").parents()  // 查找当前元素的所有的父辈元素（爷爷辈、祖先辈都找到）$("#id").parentsUntil('body') // 查找当前元素的所有的父辈元素，直到遇到匹配的那个元素为止，这里直到body标签，不包含body标签，基本选择器都可以放到这里面使用。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html">//找儿子$("#id").children();// 儿子们<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html">//过滤$("div").first() // 获取匹配的第一个元素$("div").last() // 获取匹配的最后一个元素$("div").eq(n) // 索引值等于指定值的元素，n是索引$("div").not() // 从匹配元素的集合中删除与指定表达式匹配的元素$("div").find("p") //后代选择器，在所有div标签中找后代的p标签$("div").filter(".c1")  // 交集选择器，从结果集中过滤出有c1样式类的$("div").has() // 保留包含特定后代的元素，去掉那些不含有指定后代的元素。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="9-jQuery绑定事件"><a href="#9-jQuery绑定事件" class="headerlink" title="9.jQuery绑定事件"></a>9.jQuery绑定事件</h3><ul><li><pre class="line-numbers language-html"><code class="language-html">为button按钮绑定单击事件，单机按钮弹出警告框$('button').click(        function () {            alert('wahaha')        })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="10-jQuery操作标签"><a href="#10-jQuery操作标签" class="headerlink" title="10.jQuery操作标签"></a>10.jQuery操作标签</h3><ul><li><p>标签内文本操作</p><ul><li><p>html标签元素中所有的内容</p><pre class="line-numbers language-html"><code class="language-html">为button按钮绑定单击事件，单机按钮弹出警告框$('button').click(        function () {            alert('wahaha')        })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>text标签元素的文本内容</p><pre class="line-numbers language-html"><code class="language-html">//获取值：获取选中标签元素中的文本内容$('#box').text();//设置值：设置该所有的文本内容$('#box').text('<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度一下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>文档标签操作</p><ul><li><p>插入标签</p><ul><li><p>append和appendTo</p><pre class="line-numbers language-html"><code class="language-html">//追加某元素，在父元素中添加新的子元素。子元素可以为：stirng | element（js对象） | jquery元素父元素.append(子元素)//追加到某元素，子元素添加到父元素子元素.appendTo(父元素)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html">//appendvar oli = document.createElement('li');oli.innerHTML = '哈哈哈';$('ul').append('<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1233<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>');$('ul').append(oli);$('ul').append($('#app'));//appendTo$('<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>天王盖地虎<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>').appendTo($('ul')).addClass('active')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意:如果追加的jQuery对原本在文档树中,那么这些元素将从原位置上消失,简言之就是移动操作</p></li><li><p>prepend和prependTo</p><pre class="line-numbers language-html"><code class="language-html">// 前置添加， 添加到父元素的第一个位置父元素.prepend(子元素)；// 前置添加， 添加到父元素的第一个位置子元素.prependTo(父元素)；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>after和insertAfter</p><pre class="line-numbers language-html"><code class="language-html">// 在匹配的元素之后插入内容 兄弟元素.after(要插入的兄弟元素)；要插入的兄弟元素.inserAfter(兄弟元素)；$('ul').after('<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>我是一个h3标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>')$('<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span>我是一个h2标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>').insertAfter('ul')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>before和onsertBefore</p><pre class="line-numbers language-html"><code class="language-html">// 在匹配的元素之前插入内容兄弟元素.before(要插入的兄弟元素)；要插入的兄弟元素.inserBefore(兄弟元素)； //示例$('ul').before('<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>我是一个h3标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>')$('<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>我是一个h2标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>').insertBefore('ul')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>删除标签</p><ul><li><pre class="line-numbers language-html"><code class="language-html">//删除节点后，事件也会删除（简言之，删除了整个标签）$(selector).remove(); // 删除节点后，事件会保留$(selector).detach(); // 清空选中元素中的所有后代节点$(selector).empty(); <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>修改标签</p><ul><li><pre class="line-numbers language-html"><code class="language-html">// selector被替换：将所有匹配的元素替换成指定的string、js对象、jquery对象。$(selector).replaceWith(content);// selector被替换：将所有的匹配的元素替换成p标签。$('<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>哈哈哈<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>')replaceAll(selector);// replaceWith $('h5').replaceWith('<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>') //将所有的h5标题替换为a标签$('h5').replaceWith($('#app')); //将所有h5标题标签替换成id为app的dom元素// replaceAll$('<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>').replaceAll('h4')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>克隆标签</p><ul><li><pre class="line-numbers language-html"><code class="language-html">$('button').click(function() { // 1.clone()：克隆匹配的DOM元素 // 2.clone(true)：元素以及其所有的事件处理并且选中这些克隆的副本(简言之，副本具有与真身一样的事件处理能力)  $(this).clone(true).insertAfter(this);})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>属性操作</p><ul><li><p>atter()设置属性值或者获取值</p><pre><code>//获取值：attr()设置一个属性值的时候 只是获取值$('div').attr('id')$('div').attr('class')//设置值$('div').attr('class','box') //设置一个值$('div').attr({name:'hahaha',class:'happy'}) //设置多个值</code></pre></li><li><p>removeAttr()移除属性</p><pre><code>//删除单个属性$('#box').removeAttr('name');$('#box').removeAttr('class');//删除多个属性$('#box').removeAttr('name class');</code></pre></li><li><p>prop()</p><pre><code>// 查看属性$(selector).prop(property)// 设置属性$(selector).prop(property,value)// 设置多个属性$(selector).prop({property:value, property:value,...})</code></pre></li></ul></li><li><p>class类属性</p><ul><li><p>addClass添加类名</p><pre class="line-numbers language-html"><code class="language-html">// 为每个匹配的元素添加指定的类名。$('div').addClass("box");//追加一个$('div').addClass("box box2");//追加多个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>removeClass移除类名</p><pre class="line-numbers language-html"><code class="language-html">// 从所有匹配的元素中删除全部或者指定的类。$('div').removeClass('box')；//移除box类$('div').removeClass();//移除全部的类<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>toggleClass类的切换</p><pre class="line-numbers language-html"><code class="language-html">// 如果存在（不存在）就删除（添加）一个类。$('div').toggleClass('box')$('span').click(function(){    //动态的切换class类名为active    $(this).toggleClass('active')})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>val表单控制Value属性</p><ul><li><pre class="line-numbers language-html"><code class="language-html">// 获取值：用于表单控件中获取值，比如input textarea select等等$(selector).val()// 设置值：$('input').val('设置了表单控件中的值')；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>css样式</p><pre class="line-numbers language-html"><code class="language-html">// css(直接修改css的属性来修改样式)$("div").css('color'); //获取$("p").css("color", "red"); //设置$("p").css({"color":"red","background-color":"yello"}); // 设置多个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>盒子样式属性</p><ul><li><p>内容:宽度(width)和高度(height)</p></li><li><p>内容+padding:宽度(innerWidth) 高度(innerHeight)</p></li><li><p>内容+padding+border:宽度(outerWidth) 高度(outerHeight)</p><pre class="line-numbers language-html"><code class="language-html">// 外部宽 .outerWidth() //获取第一个匹配元素 ：内容+padding+border的宽 .outerWidth(true) //获取第一个匹配元素：内容+padding+border+margin的宽 .outerWidth(value) //设置多个，调整的是“内容”的宽//外部高 .outerHeight() //第一个匹配元素：获取内容+padding+border的高 .outerHeight(true) //第一个匹配元素：获取内容+padding+border+margin的高 .outerHeight( value ) //设置多个，调整的是“内容”的高<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>滚动条距离属性</p><pre class="line-numbers language-htm"><code class="language-htm">// 水平方向.scrollLeft()      //获取.scrollLeft( value )//设置// 垂直方向.scrollTop() //获取.scrollTop( value ) //设置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="jQuery动画效果"><a href="#jQuery动画效果" class="headerlink" title="jQuery动画效果"></a>jQuery动画效果</h2><h3 id="1-显示动画"><a href="#1-显示动画" class="headerlink" title="1.显示动画"></a>1.显示动画</h3><ul><li><p>无参数,让指定的元素显现出来,底层通过display:block实现</p><ul><li><pre class="line-numbers language-html"><code class="language-html">$("div").show();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>通过控制元素的宽高,透明度,display属性,逐渐显示,例如3秒后显示完毕</p><ul><li><pre class="line-numbers language-html"><code class="language-html">$('div').show(3000);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>参数</p><ul><li>slow 慢:600ms</li><li>normal 正常 400ms</li><li>fast 快:200ms</li></ul></li><li><p>动画执行完毕后立即执行回调函数</p><ul><li><pre class="line-numbers language-html"><code class="language-html">//show(毫秒值，回调函数;   $("div").show(5000,function () {       alert("动画执行完毕！");   );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul><h3 id="2-隐藏动画"><a href="#2-隐藏动画" class="headerlink" title="2.隐藏动画"></a>2.隐藏动画</h3><ul><li><pre class="line-numbers language-html"><code class="language-html">    $(selector).hide();    $(selector).hide(1000);     $(selector).hide("slow");    $(selector).hide(1000, function(){});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-开关式显示隐藏动画"><a href="#3-开关式显示隐藏动画" class="headerlink" title="3.开关式显示隐藏动画"></a>3.开关式显示隐藏动画</h3><ul><li><pre class="line-numbers language-html"><code class="language-html">$('#box').toggle(3000,function(){});<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>显示和隐藏的拉回切换采用的是toggle()方法,就是先执行show(),再执行hide()</p></li><li><pre class="line-numbers language-html"><code class="language-html">    $('#btn').click(function(){            $('#box').toggle(3000,function(){                $(this).text('盒子出来了');                    if ($('#btn').text()=='隐藏') {                    $('#btn').text('显示');                    }else{                    $('#btn').text('隐藏');                    }            });        })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="4-滑入和滑出"><a href="#4-滑入和滑出" class="headerlink" title="4.滑入和滑出"></a>4.滑入和滑出</h3><ul><li><p>滑入,下拉动画,显示元素</p><ul><li><pre class="line-numbers language-html"><code class="language-html">$(selector).slideDown(speed, 回调函数);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>滑出,上拉动画,隐藏元素</p><ul><li><pre class="line-numbers language-html"><code class="language-html">$(selector).slideUp(speed, 回调函数);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>滑入滑出动画效果切换</p><ul><li><pre><code>$(selector).slideToggle(speed, 回调函数);</code></pre></li></ul></li></ul><h3 id="5-淡入淡出效果"><a href="#5-淡入淡出效果" class="headerlink" title="5.淡入淡出效果"></a>5.淡入淡出效果</h3><ul><li><p>淡入动画效果,</p><ul><li><pre><code>$(selector).fadeIn(speed, callback);</code></pre></li></ul></li><li><p>淡出动画效果</p><ul><li><pre><code>$(selector).fadeOut(1000);</code></pre></li></ul></li><li><p>淡入淡出动画效果来回切换</p><ul><li><pre class="line-numbers language-HTML"><code class="language-HTML">$(selector).fadeToggle('fast', callback);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><h3 id="6-自定义动画"><a href="#6-自定义动画" class="headerlink" title="6.自定义动画"></a>6.自定义动画</h3><ul><li><pre class="line-numbers language-html"><code class="language-html">$(selector).animate({params}, speed, callback);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>作用:执行一组CSS属性的自定义动画</p><ul><li>第一个参数:要执行动画的CSS属性(必选)</li><li>第二个参数:执行动画的时长:可选</li><li>第三个动画:动画执行完毕后,立即执行的回调函数(可选)</li></ul></li></ul><h3 id="7-停止动画"><a href="#7-停止动画" class="headerlink" title="7.停止动画"></a>7.停止动画</h3><ul><li><pre class="line-numbers language-html"><code class="language-html">$(selector).stop(true, false);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>参数说明</p><ul><li>第一个参数:true表示后续动画不执行,false表示后续动画执行</li><li>第二个参数:true表示立即执行完成当前动画,false表示立即停止当前动画</li><li>如果参数都不写,默认两个参数都是false,实际常用的是stop(),</li></ul></li></ul><h2 id="jQuery的事件操作"><a href="#jQuery的事件操作" class="headerlink" title="jQuery的事件操作"></a>jQuery的事件操作</h2><h3 id="1-绑定事件"><a href="#1-绑定事件" class="headerlink" title="1.绑定事件"></a>1.绑定事件</h3><ul><li><pre class="line-numbers language-html"><code class="language-html">bind(type,data,fn)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>参数说明</p><ul><li><p>type(string) :事件类型</p></li><li><p>data(Object):可选,作为event.data属性值传递给事件对象的额外数据对象</p></li><li><p>fn(Function) : 绑定到每个匹配元素的事件上面的处理函数</p></li><li><p>示例:当每个p标签被点击时,弹出其文本</p><ul><li><pre class="line-numbers language-html"><code class="language-html">$("p").bind("click", function(){  alert( $(this).text() );});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>示例:事件处理之前传递一些附加的数据</p><ul><li><pre class="line-numbers language-html"><code class="language-html">function handler(event) {//event.data 可以获取bind()方法的第二个参数的数据  alert(event.data.foo);}$("p").bind("click", {foo: "bar"}, handler)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>常见事件</p><ul><li><pre class="line-numbers language-html"><code class="language-html">click(function(){...})hover(function(){...})blur(function(){...})focus(function(){...})change(function(){...}) //内容发生变化，input，select等keyup(function(){...})  mouseover/mouseoutmouseenter/mouseleavemouseover事件是如果该标签有子标签，那么移动到该标签或者移动到子标签时会连续触发，mouseenter事件不管有没有子标签都只触发一次，表示鼠标进入这个对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过返回false来取消默认的行为来阻止事件起泡</p><ul><li><pre class="line-numbers language-html"><code class="language-html">$("form").bind("submit", function() { return false; })<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>通过event.preventDefault()方法来阻止事件起泡</p><ul><li><pre class="line-numbers language-html"><code class="language-html">$("form").bind("submit", function(event){  event.stopPropagation();});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul></li></ul><h3 id="2-解绑事件"><a href="#2-解绑事件" class="headerlink" title="2.解绑事件"></a>2.解绑事件</h3><ul><li><pre class="line-numbers language-html"><code class="language-html">unbind(type,fn);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>描述:bind()的反向操作,从每一个匹配的元素中删除绑定的事件,如果没有参数,则删除所有的绑定事件,如果把绑定时传递的处理函数作为第二个参数,则只有这个特定的事件处理函数会被删除</p></li><li><p>参数说明</p><ul><li><pre class="line-numbers language-html"><code class="language-html">type (String) : (可选) 事件类型fn(Function) : (可选) 要从每个匹配元素的事件中反绑定的事件处理函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="3-补充一次性事件"><a href="#3-补充一次性事件" class="headerlink" title="3.补充一次性事件"></a>3.补充一次性事件</h3><ul><li><pre class="line-numbers language-html"><code class="language-html">one(type,data,fn)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>描述:为每一个匹配的元素的特定事件,像(click)绑定一个一次性的事件处理函数,在每个对象上,这个事件处理函数只会被执行一次,其他规则与bind()函数相同</p></li><li><p>参数说明</p><ul><li><pre class="line-numbers language-html"><code class="language-html">type (String) : 事件类型data (Object) : (可选) 作为event.data属性值传递给事件对象的额外数据对象fn (Function) : 绑定到每个匹配元素的事件上面的处理函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>示例:当所有段落被第一次点击的时候,显示所有其文本</p><ul><li><pre class="line-numbers language-html"><code class="language-html">$("p").one("click", function(){//只有第一次点击的时候才会触发，再次点击不会触发了  alert( $(this).text() );});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="4-事件委托-事件代理"><a href="#4-事件委托-事件代理" class="headerlink" title="4.事件委托(事件代理)"></a>4.事件委托(事件代理)</h3><ul><li><p>原理:利用冒泡的原理,把事件加到父级上,触发执行效果</p></li><li><p>作用:</p><ul><li>性能要好</li><li>针对新创新的元素,直接可以拥有事件</li></ul></li><li><p>事件源:</p><ul><li>跟this作用一样(他不用看指向问题,谁操作的就是谁),event对象下的</li></ul></li><li><p>使用情景</p><ul><li><p>为DOM中的很多元素绑定的相同事件</p></li><li><p>为DOM中尚不存在的元素绑定事件</p></li><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>luffy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>路飞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>路飞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>路飞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jquery-3.2.1.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//通过on()方法</span>     <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token string">'#namei,.luffy'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">//未来追加的元素 </span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'&lt;a id="namei">娜美&lt;/a>'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>语法:在选定的元素上绑定一个或者多个事件处理函数</p><ul><li><pre class="line-numbers language-html"><code class="language-html">on(type,selector,data,fn);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>参数说明</p><ul><li>events(String) : 一个或多个空格分隔的事件类型</li><li>selector(String) : 一个选择器字符串,用于过滤出被选中的元素中能触发事件的后代元素</li><li>data:当一个事件被触发时,要传递给事件处理函数的event.data.</li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>总结常用的一些类库</title>
      <link href="/2021/09/25/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93/"/>
      <url>/2021/09/25/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="总结常用的一些类库"><a href="#总结常用的一些类库" class="headerlink" title="总结常用的一些类库"></a>总结常用的一些类库</h1><h2 id="1-JS模板引擎"><a href="#1-JS模板引擎" class="headerlink" title="1. JS模板引擎"></a>1. JS模板引擎</h2><p>1.1 <a href="https://handlebarsjs.com/zh/">handlebars.js</a><br>1.2 <a href="https://ejs.bootcss.com/">ejs.js</a>  </p><blockquote><p>服务端和客户端都可以，捕获异常准确调试方便  </p></blockquote><p>1.3 <a href="https://aui.github.io/art-template/zh-cn/index.html">art-template.js</a>  </p><blockquote><p>分客户端（兼容IE8+，IE8需要加补丁），node端：express、koa，webpack端  </p></blockquote><h2 id="2-JS库"><a href="#2-JS库" class="headerlink" title="2. JS库"></a>2. JS库</h2><h3 id="1-jQuery，zepto-js"><a href="#1-jQuery，zepto-js" class="headerlink" title="1. jQuery，zepto.js"></a>1. <a href="https://jquery.com/">jQuery</a>，<a href="http://www.zeptojs.cn/">zepto.js</a></h3><blockquote><p>jQuery兼容许多老浏览器版本，1.x兼容到IE6，2.x只是相较于1.x移除了IE6/7/8的兼容，3.x相较于2.x增加了许多新特性。可以参照<a href="https://www.hangge.com/blog/cache/detail_2228.html">jQuery - 不同版本的差异汇总（版本选择建议</a>、<a href="https://www.hangge.com/blog/cache/detail_2235.html">jQuery - jQuery3的新特性汇总（附样例）</a><br>zepto相较于jQuery，则是针对Chrome和safria，更加轻量<br><a href="https://jqueryvalidation.org/documentation/">jquery-validation</a>表单验证插件。(jQuery, tested with 1.7.2, 1.8.3, 1.9.1, 1.11.1, 3.1.1)</p></blockquote><h3 id="2-backbone-js"><a href="#2-backbone-js" class="headerlink" title="2. backbone.js"></a>2. <a href="http://www.zeptojs.cn/">backbone.js</a></h3><blockquote><p>MVC前端框架<a href="https://github.com/the5fire/backbonejs-learning-note">Backbone.js入门教程第二版</a>  </p></blockquote><h3 id="3-popper-js"><a href="#3-popper-js" class="headerlink" title="3. popper.js"></a>3. <a href="https://popper.js.org/">popper.js</a></h3><blockquote><p>元素定位类库，许多UI框架都在使用。</p></blockquote><h2 id="koa2"><a href="#koa2" class="headerlink" title="koa2"></a>koa2</h2><h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><p>koa-views,koa-swig,ejs,handlebars,art-template<br>模板引擎也分服务端和客户端，node端得搭配koa-views、koa-swig、koa-ejs等使用。这里只讲<a href="mailto:koa-views@6.2.1">koa-views@6.2.1</a>使用中路径问题,其内部使用get-paths(path, relPath, extension)这个库解析路径。</p><p><img src="./images/koa2_demo_koa-views_path.jpg" alt="项目路径"></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"koa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@koa/router"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> views <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"koa-views"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// views方法第一个参数就是get-paths接收的第一个参数，还可以是绝/相对路径，extension就是第三个参数。路由中render的第一个参数就是get-paths第二个参数(这是个坑，不是路径,可以有后缀名)。解析到文件会找下面的index文件。</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">views</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    extension<span class="token punctuation">:</span> <span class="token string">"ejs"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/users"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        title<span class="token punctuation">:</span> <span class="token string">"用户管理"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/users/admin"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'users/admin'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        title<span class="token punctuation">:</span> <span class="token string">"admin"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ejs  </p><blockquote><p>服务端：npm i ejs<br>客户端：Go to the <a href="https://github.com/mde/ejs/releases/latest">Latest Release</a>, download<br><code>./ejs.js</code> or <code>./ejs.min.js</code>. Alternately, you can compile it yourself by cloning<br>the repository and running <code>jake build</code> (or <code>$(npm bin)/jake build</code> if jake is<br>not installed globally).也可以<code>npx jake buld</code></p></blockquote><h3 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h3><p>koa-static，koa-static-cache  </p><h2 id="3-打包工具"><a href="#3-打包工具" class="headerlink" title="3 打包工具"></a>3 打包工具</h2><h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a><a href="https://www.webpackjs.com/">webpack</a></h3><h3 id="parceljs"><a href="#parceljs" class="headerlink" title="parceljs"></a><a href="https://parceljs.org/">parceljs</a></h3><h3 id="gulp-v4-x"><a href="#gulp-v4-x" class="headerlink" title="gulp v4.x"></a><a href="https://www.gulpjs.com.cn/">gulp v4.x</a></h3><h3 id="Rollup-js"><a href="#Rollup-js" class="headerlink" title="Rollup.js"></a><a href="https://www.rollupjs.com/">Rollup.js</a></h3><h2 id="node"><a href="#node" class="headerlink" title="node"></a>node</h2><h3 id="dotenv"><a href="#dotenv" class="headerlink" title="dotenv"></a><a href="https://www.npmjs.com/package/dotenv">dotenv</a></h3><p>识别文件(.env)中的变量，并添加到process.env中  </p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><h4 id="sequelize"><a href="#sequelize" class="headerlink" title="sequelize"></a><a href="https://github.com/demopark/sequelize-docs-Zh-CN">sequelize</a></h4><p>Sequelize 是一个基于 promise 的 Node.js ORM, 目前支持 Postgres, MySQL, SQLite 和 Microsoft SQL Server. 它具有强大的事务支持, 关联关系, 预读和延迟加载,读取复制等功能.</p><h3 id="node端生成、操作DOMjsdom"><a href="#node端生成、操作DOMjsdom" class="headerlink" title="node端生成、操作DOMjsdom"></a>node端生成、操作DOM<a href="https://www.npmjs.com/package/jsdom">jsdom</a></h3><h2 id="富文本编辑器"><a href="#富文本编辑器" class="headerlink" title="富文本编辑器"></a>富文本编辑器</h2><h3 id="tinymce（无依赖）"><a href="#tinymce（无依赖）" class="headerlink" title="tinymce（无依赖）"></a><a href="https://www.tiny.cloud/docs/">tinymce</a>（无依赖）</h3><h3 id="ckeditor（无依赖）"><a href="#ckeditor（无依赖）" class="headerlink" title="ckeditor（无依赖）"></a><a href="https://ckeditor.com/">ckeditor</a>（无依赖）</h3><h3 id="draft-js（react，facebook开源）"><a href="#draft-js（react，facebook开源）" class="headerlink" title="draft.js（react，facebook开源）"></a><a href="https://draftjs.org/docs/getting-started">draft.js</a>（react，facebook开源）</h3><h3 id="Lin-CMS"><a href="#Lin-CMS" class="headerlink" title="Lin CMS"></a><a href="http://doc.cms.7yue.pro/">Lin CMS</a></h3><p>可以用koa、flask、spring-boot搭建  </p><h2 id="4-popper-js弹窗"><a href="#4-popper-js弹窗" class="headerlink" title="4 popper.js弹窗"></a>4 <a href="https://popper.js.org/">popper.js弹窗</a></h2><h2 id="5-网站运行状态管理"><a href="#5-网站运行状态管理" class="headerlink" title="5 网站运行状态管理"></a>5 网站运行状态管理</h2><p>不过一般来说有后台监视系统</p><ol><li><a href="https://github.com/juliomrqz/statusfy">statusfy</a>  </li><li><a href="https://github.com/CachetHQ/Cachet">Cachet</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
